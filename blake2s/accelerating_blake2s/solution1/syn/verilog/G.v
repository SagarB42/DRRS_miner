// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module G (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_V_address0,
        v_V_ce0,
        v_V_we0,
        v_V_d0,
        v_V_q0,
        v_V_address1,
        v_V_ce1,
        v_V_q1,
        a,
        b,
        c,
        d,
        x_V,
        y_V
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] v_V_address0;
output   v_V_ce0;
output   v_V_we0;
output  [31:0] v_V_d0;
input  [31:0] v_V_q0;
output  [3:0] v_V_address1;
output   v_V_ce1;
input  [31:0] v_V_q1;
input  [3:0] a;
input  [3:0] b;
input  [4:0] c;
input  [4:0] d;
input  [31:0] x_V;
input  [31:0] y_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] v_V_address0;
reg v_V_ce0;
reg v_V_we0;
reg[31:0] v_V_d0;
reg[3:0] v_V_address1;
reg v_V_ce1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] v_V_addr_reg_294;
reg   [3:0] v_V_addr_5_reg_300;
wire   [31:0] rhs_V_fu_141_p2;
reg   [31:0] rhs_V_reg_306;
wire    ap_CS_fsm_state2;
reg   [3:0] v_V_addr_6_reg_311;
wire    ap_CS_fsm_state3;
wire   [31:0] ret_V_1_fu_172_p3;
reg   [31:0] ret_V_1_reg_317;
wire    ap_CS_fsm_state4;
reg   [3:0] v_V_addr_7_reg_322;
wire    ap_CS_fsm_state5;
wire   [31:0] rhs_V_1_fu_186_p2;
reg   [31:0] rhs_V_1_reg_328;
wire    ap_CS_fsm_state6;
wire   [31:0] ret_V_3_fu_211_p3;
reg   [31:0] ret_V_3_reg_333;
wire    ap_CS_fsm_state8;
wire   [31:0] rhs_V_2_fu_225_p2;
reg   [31:0] rhs_V_2_reg_338;
wire    ap_CS_fsm_state10;
wire   [31:0] ret_V_5_fu_251_p3;
reg   [31:0] ret_V_5_reg_343;
wire    ap_CS_fsm_state12;
wire   [31:0] rhs_V_3_fu_260_p2;
reg   [31:0] rhs_V_3_reg_348;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln8_fu_125_p1;
wire   [63:0] zext_ln8_1_fu_130_p1;
wire   [63:0] zext_ln9_fu_148_p1;
wire   [63:0] zext_ln10_fu_181_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [31:0] ret_V_7_fu_285_p3;
wire   [31:0] add_ln209_fu_135_p2;
wire   [31:0] ret_V_fu_153_p2;
wire   [15:0] trunc_ln790_fu_168_p1;
wire   [15:0] r_V_fu_158_p4;
wire   [31:0] ret_V_2_fu_192_p2;
wire   [11:0] trunc_ln790_1_fu_207_p1;
wire   [19:0] r_V_6_fu_197_p4;
wire   [31:0] add_ln209_3_fu_220_p2;
wire   [31:0] ret_V_4_fu_232_p2;
wire   [7:0] trunc_ln790_2_fu_247_p1;
wire   [23:0] r_V_8_fu_237_p4;
wire   [31:0] ret_V_6_fu_266_p2;
wire   [6:0] trunc_ln790_3_fu_281_p1;
wire   [24:0] r_V_s_fu_271_p4;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_V_1_reg_317 <= ret_V_1_fu_172_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ret_V_3_reg_333 <= ret_V_3_fu_211_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ret_V_5_reg_343 <= ret_V_5_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rhs_V_1_reg_328 <= rhs_V_1_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_2_reg_338 <= rhs_V_2_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        rhs_V_3_reg_348 <= rhs_V_3_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rhs_V_reg_306 <= rhs_V_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v_V_addr_5_reg_300 <= zext_ln8_1_fu_130_p1;
        v_V_addr_reg_294 <= zext_ln8_fu_125_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_V_addr_6_reg_311 <= zext_ln9_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_V_addr_7_reg_322 <= zext_ln10_fu_181_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state16))) begin
        v_V_address0 = v_V_addr_5_reg_300;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state14))) begin
        v_V_address0 = v_V_addr_7_reg_322;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        v_V_address0 = v_V_addr_6_reg_311;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        v_V_address0 = v_V_addr_reg_294;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        v_V_address0 = zext_ln8_fu_125_p1;
    end else begin
        v_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        v_V_address1 = v_V_addr_7_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        v_V_address1 = v_V_addr_6_reg_311;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        v_V_address1 = v_V_addr_reg_294;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        v_V_address1 = v_V_addr_5_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v_V_address1 = zext_ln10_fu_181_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_V_address1 = zext_ln9_fu_148_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        v_V_address1 = zext_ln8_1_fu_130_p1;
    end else begin
        v_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        v_V_ce0 = 1'b1;
    end else begin
        v_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        v_V_ce1 = 1'b1;
    end else begin
        v_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v_V_d0 = ret_V_7_fu_285_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        v_V_d0 = rhs_V_3_fu_260_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        v_V_d0 = ret_V_5_fu_251_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        v_V_d0 = rhs_V_2_fu_225_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        v_V_d0 = ret_V_3_fu_211_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v_V_d0 = rhs_V_1_fu_186_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v_V_d0 = ret_V_1_fu_172_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v_V_d0 = rhs_V_fu_141_p2;
    end else begin
        v_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        v_V_we0 = 1'b1;
    end else begin
        v_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_3_fu_220_p2 = (y_V + ret_V_3_reg_333);

assign add_ln209_fu_135_p2 = (x_V + v_V_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign r_V_6_fu_197_p4 = {{ret_V_2_fu_192_p2[31:12]}};

assign r_V_8_fu_237_p4 = {{ret_V_4_fu_232_p2[31:8]}};

assign r_V_fu_158_p4 = {{ret_V_fu_153_p2[31:16]}};

assign r_V_s_fu_271_p4 = {{ret_V_6_fu_266_p2[31:7]}};

assign ret_V_1_fu_172_p3 = {{trunc_ln790_fu_168_p1}, {r_V_fu_158_p4}};

assign ret_V_2_fu_192_p2 = (v_V_q1 ^ rhs_V_1_reg_328);

assign ret_V_3_fu_211_p3 = {{trunc_ln790_1_fu_207_p1}, {r_V_6_fu_197_p4}};

assign ret_V_4_fu_232_p2 = (v_V_q1 ^ rhs_V_2_reg_338);

assign ret_V_5_fu_251_p3 = {{trunc_ln790_2_fu_247_p1}, {r_V_8_fu_237_p4}};

assign ret_V_6_fu_266_p2 = (v_V_q1 ^ rhs_V_3_reg_348);

assign ret_V_7_fu_285_p3 = {{trunc_ln790_3_fu_281_p1}, {r_V_s_fu_271_p4}};

assign ret_V_fu_153_p2 = (v_V_q1 ^ rhs_V_reg_306);

assign rhs_V_1_fu_186_p2 = (v_V_q1 + ret_V_1_reg_317);

assign rhs_V_2_fu_225_p2 = (add_ln209_3_fu_220_p2 + v_V_q1);

assign rhs_V_3_fu_260_p2 = (v_V_q1 + ret_V_5_reg_343);

assign rhs_V_fu_141_p2 = (add_ln209_fu_135_p2 + v_V_q0);

assign trunc_ln790_1_fu_207_p1 = ret_V_2_fu_192_p2[11:0];

assign trunc_ln790_2_fu_247_p1 = ret_V_4_fu_232_p2[7:0];

assign trunc_ln790_3_fu_281_p1 = ret_V_6_fu_266_p2[6:0];

assign trunc_ln790_fu_168_p1 = ret_V_fu_153_p2[15:0];

assign zext_ln10_fu_181_p1 = c;

assign zext_ln8_1_fu_130_p1 = b;

assign zext_ln8_fu_125_p1 = a;

assign zext_ln9_fu_148_p1 = d;

endmodule //G
