// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "blake2s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic blake2s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic blake2s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> blake2s::ap_ST_fsm_state1 = "1";
const sc_lv<8> blake2s::ap_ST_fsm_state2 = "10";
const sc_lv<8> blake2s::ap_ST_fsm_state3 = "100";
const sc_lv<8> blake2s::ap_ST_fsm_state4 = "1000";
const sc_lv<8> blake2s::ap_ST_fsm_state5 = "10000";
const sc_lv<8> blake2s::ap_ST_fsm_state6 = "100000";
const sc_lv<8> blake2s::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> blake2s::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> blake2s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> blake2s::ap_const_lv32_1 = "1";
const sc_lv<1> blake2s::ap_const_lv1_0 = "0";
const sc_lv<1> blake2s::ap_const_lv1_1 = "1";
const sc_lv<32> blake2s::ap_const_lv32_3 = "11";
const sc_lv<32> blake2s::ap_const_lv32_4 = "100";
const sc_lv<32> blake2s::ap_const_lv32_6 = "110";
const sc_lv<32> blake2s::ap_const_lv32_2 = "10";
const sc_lv<4> blake2s::ap_const_lv4_0 = "0000";
const sc_lv<5> blake2s::ap_const_lv5_0 = "00000";
const sc_lv<32> blake2s::ap_const_lv32_5 = "101";
const sc_lv<32> blake2s::ap_const_lv32_7 = "111";
const sc_lv<64> blake2s::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> blake2s::ap_const_lv4_8 = "1000";
const sc_lv<4> blake2s::ap_const_lv4_1 = "1";
const sc_lv<32> blake2s::ap_const_lv32_1010020 = "1000000010000000000100000";
const sc_lv<5> blake2s::ap_const_lv5_10 = "10000";
const sc_lv<5> blake2s::ap_const_lv5_1 = "1";
const sc_lv<9> blake2s::ap_const_lv9_1F = "11111";
const sc_lv<32> blake2s::ap_const_lv32_1FF = "111111111";
const sc_lv<10> blake2s::ap_const_lv10_1FF = "111111111";
const sc_lv<512> blake2s::ap_const_lv512_lc_1 = "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<3> blake2s::ap_const_lv3_0 = "000";
const bool blake2s::ap_const_boolean_1 = true;

blake2s::blake2s(sc_module_name name) : sc_module(name), mVcdFile(0) {
    IV_V_U = new compress_IV_V("IV_V_U");
    IV_V_U->clk(ap_clk);
    IV_V_U->reset(ap_rst);
    IV_V_U->address0(IV_V_address0);
    IV_V_U->ce0(IV_V_ce0);
    IV_V_U->q0(IV_V_q0);
    h_V_U = new blake2s_h_V("h_V_U");
    h_V_U->clk(ap_clk);
    h_V_U->reset(ap_rst);
    h_V_U->address0(h_V_address0);
    h_V_U->ce0(h_V_ce0);
    h_V_U->we0(h_V_we0);
    h_V_U->d0(h_V_d0);
    h_V_U->q0(h_V_q0);
    m_V_U = new blake2s_m_V("m_V_U");
    m_V_U->clk(ap_clk);
    m_V_U->reset(ap_rst);
    m_V_U->address0(m_V_address0);
    m_V_U->ce0(m_V_ce0);
    m_V_U->we0(m_V_we0);
    m_V_U->d0(m_V_d0);
    m_V_U->q0(m_V_q0);
    m_V_U->address1(grp_compress_fu_200_m_V_address1);
    m_V_U->ce1(m_V_ce1);
    m_V_U->q1(m_V_q1);
    grp_compress_fu_200 = new compress("grp_compress_fu_200");
    grp_compress_fu_200->ap_clk(ap_clk);
    grp_compress_fu_200->ap_rst(ap_rst);
    grp_compress_fu_200->ap_start(grp_compress_fu_200_ap_start);
    grp_compress_fu_200->ap_done(grp_compress_fu_200_ap_done);
    grp_compress_fu_200->ap_idle(grp_compress_fu_200_ap_idle);
    grp_compress_fu_200->ap_ready(grp_compress_fu_200_ap_ready);
    grp_compress_fu_200->h_V_address0(grp_compress_fu_200_h_V_address0);
    grp_compress_fu_200->h_V_ce0(grp_compress_fu_200_h_V_ce0);
    grp_compress_fu_200->h_V_we0(grp_compress_fu_200_h_V_we0);
    grp_compress_fu_200->h_V_d0(grp_compress_fu_200_h_V_d0);
    grp_compress_fu_200->h_V_q0(h_V_q0);
    grp_compress_fu_200->m_V_address0(grp_compress_fu_200_m_V_address0);
    grp_compress_fu_200->m_V_ce0(grp_compress_fu_200_m_V_ce0);
    grp_compress_fu_200->m_V_q0(m_V_q0);
    grp_compress_fu_200->m_V_address1(grp_compress_fu_200_m_V_address1);
    grp_compress_fu_200->m_V_ce1(grp_compress_fu_200_m_V_ce1);
    grp_compress_fu_200->m_V_q1(m_V_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_IV_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln47_fu_252_p1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_IV_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_Lo_assign_fu_285_p3);
    sensitive << ( trunc_ln53_fu_281_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln58_fu_400_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln58_fu_400_p2 );

    SC_METHOD(thread_grp_compress_fu_200_ap_start);
    sensitive << ( grp_compress_fu_200_ap_start_reg );

    SC_METHOD(thread_h_V_addr_reg_435);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln46_fu_240_p2 );

    SC_METHOD(thread_h_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln47_reg_425 );
    sensitive << ( h_V_addr_reg_435 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln59_fu_412_p1 );
    sensitive << ( grp_compress_fu_200_h_V_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_h_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_compress_fu_200_h_V_ce0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_h_V_d0);
    sensitive << ( IV_V_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_compress_fu_200_h_V_d0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( xor_ln719_fu_257_p2 );

    SC_METHOD(thread_h_V_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_compress_fu_200_h_V_we0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_V_address0);
    sensitive << ( zext_ln59_reg_462 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_hash_V_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_hash_V_d0);
    sensitive << ( h_V_q0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_hash_V_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_i_3_fu_270_p2);
    sensitive << ( i2_0_reg_178 );

    SC_METHOD(thread_i_4_fu_406_p2);
    sensitive << ( i3_0_reg_189 );

    SC_METHOD(thread_i_fu_246_p2);
    sensitive << ( i_0_reg_167 );

    SC_METHOD(thread_icmp_ln46_fu_240_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_167 );

    SC_METHOD(thread_icmp_ln52_fu_264_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i2_0_reg_178 );

    SC_METHOD(thread_icmp_ln58_fu_400_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i3_0_reg_189 );

    SC_METHOD(thread_icmp_ln665_fu_299_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln52_fu_264_p2 );
    sensitive << ( Lo_assign_fu_285_p3 );
    sensitive << ( or_ln53_fu_293_p2 );

    SC_METHOD(thread_lshr_ln665_1_fu_383_p2);
    sensitive << ( zext_ln665_3_fu_373_p1 );

    SC_METHOD(thread_lshr_ln665_fu_377_p2);
    sensitive << ( select_ln665_1_fu_348_p3 );
    sensitive << ( zext_ln665_2_fu_369_p1 );

    SC_METHOD(thread_m_V_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_compress_fu_200_m_V_address0 );
    sensitive << ( icmp_ln52_fu_264_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln53_fu_276_p1 );

    SC_METHOD(thread_m_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_compress_fu_200_m_V_ce0 );
    sensitive << ( icmp_ln52_fu_264_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_m_V_ce1);
    sensitive << ( grp_compress_fu_200_m_V_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_m_V_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln52_fu_264_p2 );
    sensitive << ( p_Result_s_fu_389_p2 );

    SC_METHOD(thread_m_V_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln52_fu_264_p2 );

    SC_METHOD(thread_or_ln53_fu_293_p2);
    sensitive << ( Lo_assign_fu_285_p3 );

    SC_METHOD(thread_p_Result_s_fu_389_p2);
    sensitive << ( lshr_ln665_fu_377_p2 );
    sensitive << ( lshr_ln665_1_fu_383_p2 );

    SC_METHOD(thread_select_ln665_1_fu_348_p3);
    sensitive << ( data_V );
    sensitive << ( icmp_ln665_fu_299_p2 );
    sensitive << ( tmp_fu_313_p4 );

    SC_METHOD(thread_select_ln665_2_fu_355_p3);
    sensitive << ( zext_ln665_fu_305_p1 );
    sensitive << ( icmp_ln665_fu_299_p2 );
    sensitive << ( xor_ln665_fu_328_p2 );

    SC_METHOD(thread_select_ln665_fu_340_p3);
    sensitive << ( icmp_ln665_fu_299_p2 );
    sensitive << ( sub_ln665_fu_322_p2 );
    sensitive << ( sub_ln665_1_fu_334_p2 );

    SC_METHOD(thread_sub_ln665_1_fu_334_p2);
    sensitive << ( zext_ln665_fu_305_p1 );
    sensitive << ( zext_ln665_1_fu_309_p1 );

    SC_METHOD(thread_sub_ln665_2_fu_363_p2);
    sensitive << ( select_ln665_fu_340_p3 );

    SC_METHOD(thread_sub_ln665_fu_322_p2);
    sensitive << ( zext_ln665_fu_305_p1 );
    sensitive << ( zext_ln665_1_fu_309_p1 );

    SC_METHOD(thread_tmp_fu_313_p4);
    sensitive << ( data_V );

    SC_METHOD(thread_trunc_ln53_fu_281_p1);
    sensitive << ( i2_0_reg_178 );

    SC_METHOD(thread_xor_ln665_fu_328_p2);
    sensitive << ( zext_ln665_fu_305_p1 );

    SC_METHOD(thread_xor_ln719_fu_257_p2);
    sensitive << ( h_V_q0 );

    SC_METHOD(thread_zext_ln47_fu_252_p1);
    sensitive << ( i_0_reg_167 );

    SC_METHOD(thread_zext_ln53_fu_276_p1);
    sensitive << ( i2_0_reg_178 );

    SC_METHOD(thread_zext_ln59_fu_412_p1);
    sensitive << ( i3_0_reg_189 );

    SC_METHOD(thread_zext_ln665_1_fu_309_p1);
    sensitive << ( or_ln53_fu_293_p2 );

    SC_METHOD(thread_zext_ln665_2_fu_369_p1);
    sensitive << ( select_ln665_2_fu_355_p3 );

    SC_METHOD(thread_zext_ln665_3_fu_373_p1);
    sensitive << ( sub_ln665_2_fu_363_p2 );

    SC_METHOD(thread_zext_ln665_fu_305_p1);
    sensitive << ( Lo_assign_fu_285_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln46_fu_240_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln58_fu_400_p2 );
    sensitive << ( grp_compress_fu_200_ap_done );
    sensitive << ( icmp_ln52_fu_264_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000001";
    grp_compress_fu_200_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "blake2s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_V, "(port)data_V");
    sc_trace(mVcdFile, hash_V_address0, "(port)hash_V_address0");
    sc_trace(mVcdFile, hash_V_ce0, "(port)hash_V_ce0");
    sc_trace(mVcdFile, hash_V_we0, "(port)hash_V_we0");
    sc_trace(mVcdFile, hash_V_d0, "(port)hash_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, IV_V_address0, "IV_V_address0");
    sc_trace(mVcdFile, IV_V_ce0, "IV_V_ce0");
    sc_trace(mVcdFile, IV_V_q0, "IV_V_q0");
    sc_trace(mVcdFile, i_fu_246_p2, "i_fu_246_p2");
    sc_trace(mVcdFile, i_reg_420, "i_reg_420");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln47_fu_252_p1, "zext_ln47_fu_252_p1");
    sc_trace(mVcdFile, zext_ln47_reg_425, "zext_ln47_reg_425");
    sc_trace(mVcdFile, icmp_ln46_fu_240_p2, "icmp_ln46_fu_240_p2");
    sc_trace(mVcdFile, h_V_addr_reg_435, "h_V_addr_reg_435");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_3_fu_270_p2, "i_3_fu_270_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_4_fu_406_p2, "i_4_fu_406_p2");
    sc_trace(mVcdFile, i_4_reg_457, "i_4_reg_457");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, zext_ln59_fu_412_p1, "zext_ln59_fu_412_p1");
    sc_trace(mVcdFile, zext_ln59_reg_462, "zext_ln59_reg_462");
    sc_trace(mVcdFile, icmp_ln58_fu_400_p2, "icmp_ln58_fu_400_p2");
    sc_trace(mVcdFile, h_V_address0, "h_V_address0");
    sc_trace(mVcdFile, h_V_ce0, "h_V_ce0");
    sc_trace(mVcdFile, h_V_we0, "h_V_we0");
    sc_trace(mVcdFile, h_V_d0, "h_V_d0");
    sc_trace(mVcdFile, h_V_q0, "h_V_q0");
    sc_trace(mVcdFile, m_V_address0, "m_V_address0");
    sc_trace(mVcdFile, m_V_ce0, "m_V_ce0");
    sc_trace(mVcdFile, m_V_we0, "m_V_we0");
    sc_trace(mVcdFile, m_V_d0, "m_V_d0");
    sc_trace(mVcdFile, m_V_q0, "m_V_q0");
    sc_trace(mVcdFile, m_V_ce1, "m_V_ce1");
    sc_trace(mVcdFile, m_V_q1, "m_V_q1");
    sc_trace(mVcdFile, grp_compress_fu_200_ap_start, "grp_compress_fu_200_ap_start");
    sc_trace(mVcdFile, grp_compress_fu_200_ap_done, "grp_compress_fu_200_ap_done");
    sc_trace(mVcdFile, grp_compress_fu_200_ap_idle, "grp_compress_fu_200_ap_idle");
    sc_trace(mVcdFile, grp_compress_fu_200_ap_ready, "grp_compress_fu_200_ap_ready");
    sc_trace(mVcdFile, grp_compress_fu_200_h_V_address0, "grp_compress_fu_200_h_V_address0");
    sc_trace(mVcdFile, grp_compress_fu_200_h_V_ce0, "grp_compress_fu_200_h_V_ce0");
    sc_trace(mVcdFile, grp_compress_fu_200_h_V_we0, "grp_compress_fu_200_h_V_we0");
    sc_trace(mVcdFile, grp_compress_fu_200_h_V_d0, "grp_compress_fu_200_h_V_d0");
    sc_trace(mVcdFile, grp_compress_fu_200_m_V_address0, "grp_compress_fu_200_m_V_address0");
    sc_trace(mVcdFile, grp_compress_fu_200_m_V_ce0, "grp_compress_fu_200_m_V_ce0");
    sc_trace(mVcdFile, grp_compress_fu_200_m_V_address1, "grp_compress_fu_200_m_V_address1");
    sc_trace(mVcdFile, grp_compress_fu_200_m_V_ce1, "grp_compress_fu_200_m_V_ce1");
    sc_trace(mVcdFile, i_0_reg_167, "i_0_reg_167");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i2_0_reg_178, "i2_0_reg_178");
    sc_trace(mVcdFile, icmp_ln52_fu_264_p2, "icmp_ln52_fu_264_p2");
    sc_trace(mVcdFile, i3_0_reg_189, "i3_0_reg_189");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_compress_fu_200_ap_start_reg, "grp_compress_fu_200_ap_start_reg");
    sc_trace(mVcdFile, zext_ln53_fu_276_p1, "zext_ln53_fu_276_p1");
    sc_trace(mVcdFile, xor_ln719_fu_257_p2, "xor_ln719_fu_257_p2");
    sc_trace(mVcdFile, trunc_ln53_fu_281_p1, "trunc_ln53_fu_281_p1");
    sc_trace(mVcdFile, Lo_assign_fu_285_p3, "Lo_assign_fu_285_p3");
    sc_trace(mVcdFile, or_ln53_fu_293_p2, "or_ln53_fu_293_p2");
    sc_trace(mVcdFile, zext_ln665_fu_305_p1, "zext_ln665_fu_305_p1");
    sc_trace(mVcdFile, zext_ln665_1_fu_309_p1, "zext_ln665_1_fu_309_p1");
    sc_trace(mVcdFile, icmp_ln665_fu_299_p2, "icmp_ln665_fu_299_p2");
    sc_trace(mVcdFile, sub_ln665_fu_322_p2, "sub_ln665_fu_322_p2");
    sc_trace(mVcdFile, sub_ln665_1_fu_334_p2, "sub_ln665_1_fu_334_p2");
    sc_trace(mVcdFile, tmp_fu_313_p4, "tmp_fu_313_p4");
    sc_trace(mVcdFile, xor_ln665_fu_328_p2, "xor_ln665_fu_328_p2");
    sc_trace(mVcdFile, select_ln665_fu_340_p3, "select_ln665_fu_340_p3");
    sc_trace(mVcdFile, select_ln665_2_fu_355_p3, "select_ln665_2_fu_355_p3");
    sc_trace(mVcdFile, sub_ln665_2_fu_363_p2, "sub_ln665_2_fu_363_p2");
    sc_trace(mVcdFile, select_ln665_1_fu_348_p3, "select_ln665_1_fu_348_p3");
    sc_trace(mVcdFile, zext_ln665_2_fu_369_p1, "zext_ln665_2_fu_369_p1");
    sc_trace(mVcdFile, zext_ln665_3_fu_373_p1, "zext_ln665_3_fu_373_p1");
    sc_trace(mVcdFile, lshr_ln665_fu_377_p2, "lshr_ln665_fu_377_p2");
    sc_trace(mVcdFile, lshr_ln665_1_fu_383_p2, "lshr_ln665_1_fu_383_p2");
    sc_trace(mVcdFile, p_Result_s_fu_389_p2, "p_Result_s_fu_389_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("blake2s.hdltvin.dat");
    mHdltvoutHandle.open("blake2s.hdltvout.dat");
}

blake2s::~blake2s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete IV_V_U;
    delete h_V_U;
    delete m_V_U;
    delete grp_compress_fu_200;
}

void blake2s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_compress_fu_200_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln52_fu_264_p2.read()))) {
            grp_compress_fu_200_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_compress_fu_200_ap_ready.read())) {
            grp_compress_fu_200_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i2_0_reg_178 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln52_fu_264_p2.read()))) {
        i2_0_reg_178 = i_3_fu_270_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i3_0_reg_189 = i_4_reg_457.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(grp_compress_fu_200_ap_done.read(), ap_const_logic_1))) {
        i3_0_reg_189 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_167 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_167 = i_reg_420.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_4_reg_457 = i_4_fu_406_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_420 = i_fu_246_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln46_fu_240_p2.read(), ap_const_lv1_0))) {
        zext_ln47_reg_425 = zext_ln47_fu_252_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_fu_400_p2.read()))) {
        zext_ln59_reg_462 = zext_ln59_fu_412_p1.read();
    }
}

void blake2s::thread_IV_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        IV_V_address0 =  (sc_lv<3>) (zext_ln47_fu_252_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        IV_V_address0 = ap_const_lv3_0;
    } else {
        IV_V_address0 = "XXX";
    }
}

void blake2s::thread_IV_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        IV_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        IV_V_ce0 = ap_const_logic_0;
    } else {
        IV_V_ce0 = ap_const_logic_0;
    }
}

void blake2s::thread_Lo_assign_fu_285_p3() {
    Lo_assign_fu_285_p3 = esl_concat<4,5>(trunc_ln53_fu_281_p1.read(), ap_const_lv5_0);
}

void blake2s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void blake2s::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void blake2s::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void blake2s::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void blake2s::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void blake2s::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void blake2s::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void blake2s::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void blake2s::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_400_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void blake2s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void blake2s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_400_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void blake2s::thread_grp_compress_fu_200_ap_start() {
    grp_compress_fu_200_ap_start = grp_compress_fu_200_ap_start_reg.read();
}

void blake2s::thread_h_V_addr_reg_435() {
    h_V_addr_reg_435 =  (sc_lv<3>) (ap_const_lv64_0);
}

void blake2s::thread_h_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        h_V_address0 =  (sc_lv<3>) (zext_ln59_fu_412_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        h_V_address0 = h_V_addr_reg_435.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        h_V_address0 =  (sc_lv<3>) (zext_ln47_reg_425.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        h_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        h_V_address0 = grp_compress_fu_200_h_V_address0.read();
    } else {
        h_V_address0 = "XXX";
    }
}

void blake2s::thread_h_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        h_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        h_V_ce0 = grp_compress_fu_200_h_V_ce0.read();
    } else {
        h_V_ce0 = ap_const_logic_0;
    }
}

void blake2s::thread_h_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        h_V_d0 = xor_ln719_fu_257_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        h_V_d0 = IV_V_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        h_V_d0 = grp_compress_fu_200_h_V_d0.read();
    } else {
        h_V_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void blake2s::thread_h_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        h_V_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        h_V_we0 = grp_compress_fu_200_h_V_we0.read();
    } else {
        h_V_we0 = ap_const_logic_0;
    }
}

void blake2s::thread_hash_V_address0() {
    hash_V_address0 =  (sc_lv<3>) (zext_ln59_reg_462.read());
}

void blake2s::thread_hash_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        hash_V_ce0 = ap_const_logic_1;
    } else {
        hash_V_ce0 = ap_const_logic_0;
    }
}

void blake2s::thread_hash_V_d0() {
    hash_V_d0 = h_V_q0.read();
}

void blake2s::thread_hash_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        hash_V_we0 = ap_const_logic_1;
    } else {
        hash_V_we0 = ap_const_logic_0;
    }
}

void blake2s::thread_i_3_fu_270_p2() {
    i_3_fu_270_p2 = (!i2_0_reg_178.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i2_0_reg_178.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void blake2s::thread_i_4_fu_406_p2() {
    i_4_fu_406_p2 = (!i3_0_reg_189.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i3_0_reg_189.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void blake2s::thread_i_fu_246_p2() {
    i_fu_246_p2 = (!i_0_reg_167.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_167.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void blake2s::thread_icmp_ln46_fu_240_p2() {
    icmp_ln46_fu_240_p2 = (!i_0_reg_167.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_167.read() == ap_const_lv4_8);
}

void blake2s::thread_icmp_ln52_fu_264_p2() {
    icmp_ln52_fu_264_p2 = (!i2_0_reg_178.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i2_0_reg_178.read() == ap_const_lv5_10);
}

void blake2s::thread_icmp_ln58_fu_400_p2() {
    icmp_ln58_fu_400_p2 = (!i3_0_reg_189.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i3_0_reg_189.read() == ap_const_lv4_8);
}

void blake2s::thread_icmp_ln665_fu_299_p2() {
    icmp_ln665_fu_299_p2 = (!Lo_assign_fu_285_p3.read().is_01() || !or_ln53_fu_293_p2.read().is_01())? sc_lv<1>(): (sc_biguint<9>(Lo_assign_fu_285_p3.read()) > sc_biguint<9>(or_ln53_fu_293_p2.read()));
}

void blake2s::thread_lshr_ln665_1_fu_383_p2() {
    lshr_ln665_1_fu_383_p2 = (!zext_ln665_3_fu_373_p1.read().is_01())? sc_lv<512>(): ap_const_lv512_lc_1 >> (unsigned short)zext_ln665_3_fu_373_p1.read().to_uint();
}

void blake2s::thread_lshr_ln665_fu_377_p2() {
    lshr_ln665_fu_377_p2 = (!zext_ln665_2_fu_369_p1.read().is_01())? sc_lv<512>(): select_ln665_1_fu_348_p3.read() >> (unsigned short)zext_ln665_2_fu_369_p1.read().to_uint();
}

void blake2s::thread_m_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln52_fu_264_p2.read()))) {
        m_V_address0 =  (sc_lv<4>) (zext_ln53_fu_276_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_V_address0 = grp_compress_fu_200_m_V_address0.read();
    } else {
        m_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void blake2s::thread_m_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln52_fu_264_p2.read()))) {
        m_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_V_ce0 = grp_compress_fu_200_m_V_ce0.read();
    } else {
        m_V_ce0 = ap_const_logic_0;
    }
}

void blake2s::thread_m_V_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_V_ce1 = grp_compress_fu_200_m_V_ce1.read();
    } else {
        m_V_ce1 = ap_const_logic_0;
    }
}

void blake2s::thread_m_V_d0() {
    m_V_d0 = p_Result_s_fu_389_p2.read().range(32-1, 0);
}

void blake2s::thread_m_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln52_fu_264_p2.read()))) {
        m_V_we0 = ap_const_logic_1;
    } else {
        m_V_we0 = ap_const_logic_0;
    }
}

void blake2s::thread_or_ln53_fu_293_p2() {
    or_ln53_fu_293_p2 = (Lo_assign_fu_285_p3.read() | ap_const_lv9_1F);
}

void blake2s::thread_p_Result_s_fu_389_p2() {
    p_Result_s_fu_389_p2 = (lshr_ln665_fu_377_p2.read() & lshr_ln665_1_fu_383_p2.read());
}

void blake2s::thread_select_ln665_1_fu_348_p3() {
    select_ln665_1_fu_348_p3 = (!icmp_ln665_fu_299_p2.read()[0].is_01())? sc_lv<512>(): ((icmp_ln665_fu_299_p2.read()[0].to_bool())? tmp_fu_313_p4.read(): data_V.read());
}

void blake2s::thread_select_ln665_2_fu_355_p3() {
    select_ln665_2_fu_355_p3 = (!icmp_ln665_fu_299_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln665_fu_299_p2.read()[0].to_bool())? xor_ln665_fu_328_p2.read(): zext_ln665_fu_305_p1.read());
}

void blake2s::thread_select_ln665_fu_340_p3() {
    select_ln665_fu_340_p3 = (!icmp_ln665_fu_299_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln665_fu_299_p2.read()[0].to_bool())? sub_ln665_fu_322_p2.read(): sub_ln665_1_fu_334_p2.read());
}

void blake2s::thread_sub_ln665_1_fu_334_p2() {
    sub_ln665_1_fu_334_p2 = (!zext_ln665_1_fu_309_p1.read().is_01() || !zext_ln665_fu_305_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(zext_ln665_1_fu_309_p1.read()) - sc_biguint<10>(zext_ln665_fu_305_p1.read()));
}

void blake2s::thread_sub_ln665_2_fu_363_p2() {
    sub_ln665_2_fu_363_p2 = (!ap_const_lv10_1FF.is_01() || !select_ln665_fu_340_p3.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_1FF) - sc_biguint<10>(select_ln665_fu_340_p3.read()));
}

void blake2s::thread_sub_ln665_fu_322_p2() {
    sub_ln665_fu_322_p2 = (!zext_ln665_fu_305_p1.read().is_01() || !zext_ln665_1_fu_309_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(zext_ln665_fu_305_p1.read()) - sc_biguint<10>(zext_ln665_1_fu_309_p1.read()));
}

void blake2s::thread_tmp_fu_313_p4() {
    tmp_fu_313_p4 = data_V.read().range(0, 511);
}

void blake2s::thread_trunc_ln53_fu_281_p1() {
    trunc_ln53_fu_281_p1 = i2_0_reg_178.read().range(4-1, 0);
}

void blake2s::thread_xor_ln665_fu_328_p2() {
    xor_ln665_fu_328_p2 = (zext_ln665_fu_305_p1.read() ^ ap_const_lv10_1FF);
}

void blake2s::thread_xor_ln719_fu_257_p2() {
    xor_ln719_fu_257_p2 = (h_V_q0.read() ^ ap_const_lv32_1010020);
}

void blake2s::thread_zext_ln47_fu_252_p1() {
    zext_ln47_fu_252_p1 = esl_zext<64,4>(i_0_reg_167.read());
}

void blake2s::thread_zext_ln53_fu_276_p1() {
    zext_ln53_fu_276_p1 = esl_zext<64,5>(i2_0_reg_178.read());
}

void blake2s::thread_zext_ln59_fu_412_p1() {
    zext_ln59_fu_412_p1 = esl_zext<64,4>(i3_0_reg_189.read());
}

void blake2s::thread_zext_ln665_1_fu_309_p1() {
    zext_ln665_1_fu_309_p1 = esl_zext<10,9>(or_ln53_fu_293_p2.read());
}

void blake2s::thread_zext_ln665_2_fu_369_p1() {
    zext_ln665_2_fu_369_p1 = esl_zext<512,10>(select_ln665_2_fu_355_p3.read());
}

void blake2s::thread_zext_ln665_3_fu_373_p1() {
    zext_ln665_3_fu_373_p1 = esl_zext<512,10>(sub_ln665_2_fu_363_p2.read());
}

void blake2s::thread_zext_ln665_fu_305_p1() {
    zext_ln665_fu_305_p1 = esl_zext<10,9>(Lo_assign_fu_285_p3.read());
}

void blake2s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln46_fu_240_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln52_fu_264_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_compress_fu_200_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_400_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void blake2s::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_V\" :  \"" << data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_V_address0\" :  \"" << hash_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_V_ce0\" :  \"" << hash_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_V_we0\" :  \"" << hash_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_V_d0\" :  \"" << hash_V_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

