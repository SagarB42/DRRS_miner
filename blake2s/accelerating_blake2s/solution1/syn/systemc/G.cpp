// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "G.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic G::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic G::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> G::ap_ST_fsm_state1 = "1";
const sc_lv<16> G::ap_ST_fsm_state2 = "10";
const sc_lv<16> G::ap_ST_fsm_state3 = "100";
const sc_lv<16> G::ap_ST_fsm_state4 = "1000";
const sc_lv<16> G::ap_ST_fsm_state5 = "10000";
const sc_lv<16> G::ap_ST_fsm_state6 = "100000";
const sc_lv<16> G::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> G::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> G::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> G::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> G::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> G::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> G::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> G::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> G::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> G::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> G::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> G::ap_const_lv32_1 = "1";
const sc_lv<32> G::ap_const_lv32_2 = "10";
const sc_lv<32> G::ap_const_lv32_3 = "11";
const sc_lv<32> G::ap_const_lv32_4 = "100";
const sc_lv<32> G::ap_const_lv32_5 = "101";
const sc_lv<32> G::ap_const_lv32_7 = "111";
const sc_lv<32> G::ap_const_lv32_9 = "1001";
const sc_lv<32> G::ap_const_lv32_B = "1011";
const sc_lv<32> G::ap_const_lv32_D = "1101";
const sc_lv<32> G::ap_const_lv32_6 = "110";
const sc_lv<32> G::ap_const_lv32_8 = "1000";
const sc_lv<32> G::ap_const_lv32_A = "1010";
const sc_lv<32> G::ap_const_lv32_C = "1100";
const sc_lv<32> G::ap_const_lv32_E = "1110";
const sc_lv<32> G::ap_const_lv32_F = "1111";
const sc_lv<32> G::ap_const_lv32_10 = "10000";
const sc_lv<32> G::ap_const_lv32_1F = "11111";
const bool G::ap_const_boolean_1 = true;

G::G(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln209_3_fu_220_p2);
    sensitive << ( y_V );
    sensitive << ( ret_V_3_reg_333 );

    SC_METHOD(thread_add_ln209_fu_135_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( x_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_r_V_6_fu_197_p4);
    sensitive << ( ret_V_2_fu_192_p2 );

    SC_METHOD(thread_r_V_8_fu_237_p4);
    sensitive << ( ret_V_4_fu_232_p2 );

    SC_METHOD(thread_r_V_fu_158_p4);
    sensitive << ( ret_V_fu_153_p2 );

    SC_METHOD(thread_r_V_s_fu_271_p4);
    sensitive << ( ret_V_6_fu_266_p2 );

    SC_METHOD(thread_ret_V_1_fu_172_p3);
    sensitive << ( trunc_ln790_fu_168_p1 );
    sensitive << ( r_V_fu_158_p4 );

    SC_METHOD(thread_ret_V_2_fu_192_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( rhs_V_1_reg_328 );

    SC_METHOD(thread_ret_V_3_fu_211_p3);
    sensitive << ( trunc_ln790_1_fu_207_p1 );
    sensitive << ( r_V_6_fu_197_p4 );

    SC_METHOD(thread_ret_V_4_fu_232_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( rhs_V_2_reg_338 );

    SC_METHOD(thread_ret_V_5_fu_251_p3);
    sensitive << ( trunc_ln790_2_fu_247_p1 );
    sensitive << ( r_V_8_fu_237_p4 );

    SC_METHOD(thread_ret_V_6_fu_266_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( rhs_V_3_reg_348 );

    SC_METHOD(thread_ret_V_7_fu_285_p3);
    sensitive << ( trunc_ln790_3_fu_281_p1 );
    sensitive << ( r_V_s_fu_271_p4 );

    SC_METHOD(thread_ret_V_fu_153_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( rhs_V_reg_306 );

    SC_METHOD(thread_rhs_V_1_fu_186_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( ret_V_1_reg_317 );

    SC_METHOD(thread_rhs_V_2_fu_225_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( add_ln209_3_fu_220_p2 );

    SC_METHOD(thread_rhs_V_3_fu_260_p2);
    sensitive << ( v_V_q1 );
    sensitive << ( ret_V_5_reg_343 );

    SC_METHOD(thread_rhs_V_fu_141_p2);
    sensitive << ( v_V_q0 );
    sensitive << ( add_ln209_fu_135_p2 );

    SC_METHOD(thread_trunc_ln790_1_fu_207_p1);
    sensitive << ( ret_V_2_fu_192_p2 );

    SC_METHOD(thread_trunc_ln790_2_fu_247_p1);
    sensitive << ( ret_V_4_fu_232_p2 );

    SC_METHOD(thread_trunc_ln790_3_fu_281_p1);
    sensitive << ( ret_V_6_fu_266_p2 );

    SC_METHOD(thread_trunc_ln790_fu_168_p1);
    sensitive << ( ret_V_fu_153_p2 );

    SC_METHOD(thread_v_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( v_V_addr_reg_294 );
    sensitive << ( v_V_addr_5_reg_300 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( v_V_addr_6_reg_311 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( v_V_addr_7_reg_322 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln8_fu_125_p1 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_v_V_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( v_V_addr_reg_294 );
    sensitive << ( v_V_addr_5_reg_300 );
    sensitive << ( v_V_addr_6_reg_311 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( v_V_addr_7_reg_322 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln8_1_fu_130_p1 );
    sensitive << ( zext_ln9_fu_148_p1 );
    sensitive << ( zext_ln10_fu_181_p1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_v_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_v_V_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_v_V_d0);
    sensitive << ( rhs_V_fu_141_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ret_V_1_fu_172_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( rhs_V_1_fu_186_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ret_V_3_fu_211_p3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( rhs_V_2_fu_225_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ret_V_5_fu_251_p3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( rhs_V_3_fu_260_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ret_V_7_fu_285_p3 );

    SC_METHOD(thread_v_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_zext_ln10_fu_181_p1);
    sensitive << ( c );

    SC_METHOD(thread_zext_ln8_1_fu_130_p1);
    sensitive << ( b );

    SC_METHOD(thread_zext_ln8_fu_125_p1);
    sensitive << ( a );

    SC_METHOD(thread_zext_ln9_fu_148_p1);
    sensitive << ( d );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "G_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, v_V_address0, "(port)v_V_address0");
    sc_trace(mVcdFile, v_V_ce0, "(port)v_V_ce0");
    sc_trace(mVcdFile, v_V_we0, "(port)v_V_we0");
    sc_trace(mVcdFile, v_V_d0, "(port)v_V_d0");
    sc_trace(mVcdFile, v_V_q0, "(port)v_V_q0");
    sc_trace(mVcdFile, v_V_address1, "(port)v_V_address1");
    sc_trace(mVcdFile, v_V_ce1, "(port)v_V_ce1");
    sc_trace(mVcdFile, v_V_q1, "(port)v_V_q1");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, d, "(port)d");
    sc_trace(mVcdFile, x_V, "(port)x_V");
    sc_trace(mVcdFile, y_V, "(port)y_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, v_V_addr_reg_294, "v_V_addr_reg_294");
    sc_trace(mVcdFile, v_V_addr_5_reg_300, "v_V_addr_5_reg_300");
    sc_trace(mVcdFile, rhs_V_fu_141_p2, "rhs_V_fu_141_p2");
    sc_trace(mVcdFile, rhs_V_reg_306, "rhs_V_reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, v_V_addr_6_reg_311, "v_V_addr_6_reg_311");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ret_V_1_fu_172_p3, "ret_V_1_fu_172_p3");
    sc_trace(mVcdFile, ret_V_1_reg_317, "ret_V_1_reg_317");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, v_V_addr_7_reg_322, "v_V_addr_7_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, rhs_V_1_fu_186_p2, "rhs_V_1_fu_186_p2");
    sc_trace(mVcdFile, rhs_V_1_reg_328, "rhs_V_1_reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ret_V_3_fu_211_p3, "ret_V_3_fu_211_p3");
    sc_trace(mVcdFile, ret_V_3_reg_333, "ret_V_3_reg_333");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, rhs_V_2_fu_225_p2, "rhs_V_2_fu_225_p2");
    sc_trace(mVcdFile, rhs_V_2_reg_338, "rhs_V_2_reg_338");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ret_V_5_fu_251_p3, "ret_V_5_fu_251_p3");
    sc_trace(mVcdFile, ret_V_5_reg_343, "ret_V_5_reg_343");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, rhs_V_3_fu_260_p2, "rhs_V_3_fu_260_p2");
    sc_trace(mVcdFile, rhs_V_3_reg_348, "rhs_V_3_reg_348");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, zext_ln8_fu_125_p1, "zext_ln8_fu_125_p1");
    sc_trace(mVcdFile, zext_ln8_1_fu_130_p1, "zext_ln8_1_fu_130_p1");
    sc_trace(mVcdFile, zext_ln9_fu_148_p1, "zext_ln9_fu_148_p1");
    sc_trace(mVcdFile, zext_ln10_fu_181_p1, "zext_ln10_fu_181_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ret_V_7_fu_285_p3, "ret_V_7_fu_285_p3");
    sc_trace(mVcdFile, add_ln209_fu_135_p2, "add_ln209_fu_135_p2");
    sc_trace(mVcdFile, ret_V_fu_153_p2, "ret_V_fu_153_p2");
    sc_trace(mVcdFile, trunc_ln790_fu_168_p1, "trunc_ln790_fu_168_p1");
    sc_trace(mVcdFile, r_V_fu_158_p4, "r_V_fu_158_p4");
    sc_trace(mVcdFile, ret_V_2_fu_192_p2, "ret_V_2_fu_192_p2");
    sc_trace(mVcdFile, trunc_ln790_1_fu_207_p1, "trunc_ln790_1_fu_207_p1");
    sc_trace(mVcdFile, r_V_6_fu_197_p4, "r_V_6_fu_197_p4");
    sc_trace(mVcdFile, add_ln209_3_fu_220_p2, "add_ln209_3_fu_220_p2");
    sc_trace(mVcdFile, ret_V_4_fu_232_p2, "ret_V_4_fu_232_p2");
    sc_trace(mVcdFile, trunc_ln790_2_fu_247_p1, "trunc_ln790_2_fu_247_p1");
    sc_trace(mVcdFile, r_V_8_fu_237_p4, "r_V_8_fu_237_p4");
    sc_trace(mVcdFile, ret_V_6_fu_266_p2, "ret_V_6_fu_266_p2");
    sc_trace(mVcdFile, trunc_ln790_3_fu_281_p1, "trunc_ln790_3_fu_281_p1");
    sc_trace(mVcdFile, r_V_s_fu_271_p4, "r_V_s_fu_271_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

G::~G() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void G::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ret_V_1_reg_317 = ret_V_1_fu_172_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ret_V_3_reg_333 = ret_V_3_fu_211_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ret_V_5_reg_343 = ret_V_5_fu_251_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        rhs_V_1_reg_328 = rhs_V_1_fu_186_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        rhs_V_2_reg_338 = rhs_V_2_fu_225_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        rhs_V_3_reg_348 = rhs_V_3_fu_260_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rhs_V_reg_306 = rhs_V_fu_141_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        v_V_addr_5_reg_300 =  (sc_lv<4>) (zext_ln8_1_fu_130_p1.read());
        v_V_addr_reg_294 =  (sc_lv<4>) (zext_ln8_fu_125_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        v_V_addr_6_reg_311 =  (sc_lv<4>) (zext_ln9_fu_148_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        v_V_addr_7_reg_322 =  (sc_lv<4>) (zext_ln10_fu_181_p1.read());
    }
}

void G::thread_add_ln209_3_fu_220_p2() {
    add_ln209_3_fu_220_p2 = (!y_V.read().is_01() || !ret_V_3_reg_333.read().is_01())? sc_lv<32>(): (sc_biguint<32>(y_V.read()) + sc_biguint<32>(ret_V_3_reg_333.read()));
}

void G::thread_add_ln209_fu_135_p2() {
    add_ln209_fu_135_p2 = (!x_V.read().is_01() || !v_V_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(x_V.read()) + sc_biguint<32>(v_V_q1.read()));
}

void G::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void G::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void G::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void G::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void G::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void G::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void G::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void G::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void G::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void G::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void G::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void G::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void G::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void G::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void G::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void G::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void G::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void G::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void G::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void G::thread_r_V_6_fu_197_p4() {
    r_V_6_fu_197_p4 = ret_V_2_fu_192_p2.read().range(31, 12);
}

void G::thread_r_V_8_fu_237_p4() {
    r_V_8_fu_237_p4 = ret_V_4_fu_232_p2.read().range(31, 8);
}

void G::thread_r_V_fu_158_p4() {
    r_V_fu_158_p4 = ret_V_fu_153_p2.read().range(31, 16);
}

void G::thread_r_V_s_fu_271_p4() {
    r_V_s_fu_271_p4 = ret_V_6_fu_266_p2.read().range(31, 7);
}

void G::thread_ret_V_1_fu_172_p3() {
    ret_V_1_fu_172_p3 = esl_concat<16,16>(trunc_ln790_fu_168_p1.read(), r_V_fu_158_p4.read());
}

void G::thread_ret_V_2_fu_192_p2() {
    ret_V_2_fu_192_p2 = (v_V_q1.read() ^ rhs_V_1_reg_328.read());
}

void G::thread_ret_V_3_fu_211_p3() {
    ret_V_3_fu_211_p3 = esl_concat<12,20>(trunc_ln790_1_fu_207_p1.read(), r_V_6_fu_197_p4.read());
}

void G::thread_ret_V_4_fu_232_p2() {
    ret_V_4_fu_232_p2 = (v_V_q1.read() ^ rhs_V_2_reg_338.read());
}

void G::thread_ret_V_5_fu_251_p3() {
    ret_V_5_fu_251_p3 = esl_concat<8,24>(trunc_ln790_2_fu_247_p1.read(), r_V_8_fu_237_p4.read());
}

void G::thread_ret_V_6_fu_266_p2() {
    ret_V_6_fu_266_p2 = (v_V_q1.read() ^ rhs_V_3_reg_348.read());
}

void G::thread_ret_V_7_fu_285_p3() {
    ret_V_7_fu_285_p3 = esl_concat<7,25>(trunc_ln790_3_fu_281_p1.read(), r_V_s_fu_271_p4.read());
}

void G::thread_ret_V_fu_153_p2() {
    ret_V_fu_153_p2 = (v_V_q1.read() ^ rhs_V_reg_306.read());
}

void G::thread_rhs_V_1_fu_186_p2() {
    rhs_V_1_fu_186_p2 = (!v_V_q1.read().is_01() || !ret_V_1_reg_317.read().is_01())? sc_lv<32>(): (sc_biguint<32>(v_V_q1.read()) + sc_biguint<32>(ret_V_1_reg_317.read()));
}

void G::thread_rhs_V_2_fu_225_p2() {
    rhs_V_2_fu_225_p2 = (!add_ln209_3_fu_220_p2.read().is_01() || !v_V_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln209_3_fu_220_p2.read()) + sc_biguint<32>(v_V_q1.read()));
}

void G::thread_rhs_V_3_fu_260_p2() {
    rhs_V_3_fu_260_p2 = (!v_V_q1.read().is_01() || !ret_V_5_reg_343.read().is_01())? sc_lv<32>(): (sc_biguint<32>(v_V_q1.read()) + sc_biguint<32>(ret_V_5_reg_343.read()));
}

void G::thread_rhs_V_fu_141_p2() {
    rhs_V_fu_141_p2 = (!add_ln209_fu_135_p2.read().is_01() || !v_V_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln209_fu_135_p2.read()) + sc_biguint<32>(v_V_q0.read()));
}

void G::thread_trunc_ln790_1_fu_207_p1() {
    trunc_ln790_1_fu_207_p1 = ret_V_2_fu_192_p2.read().range(12-1, 0);
}

void G::thread_trunc_ln790_2_fu_247_p1() {
    trunc_ln790_2_fu_247_p1 = ret_V_4_fu_232_p2.read().range(8-1, 0);
}

void G::thread_trunc_ln790_3_fu_281_p1() {
    trunc_ln790_3_fu_281_p1 = ret_V_6_fu_266_p2.read().range(7-1, 0);
}

void G::thread_trunc_ln790_fu_168_p1() {
    trunc_ln790_fu_168_p1 = ret_V_fu_153_p2.read().range(16-1, 0);
}

void G::thread_v_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        v_V_address0 = v_V_addr_5_reg_300.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        v_V_address0 = v_V_addr_7_reg_322.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        v_V_address0 = v_V_addr_6_reg_311.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        v_V_address0 = v_V_addr_reg_294.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        v_V_address0 =  (sc_lv<4>) (zext_ln8_fu_125_p1.read());
    } else {
        v_V_address0 = "XXXX";
    }
}

void G::thread_v_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        v_V_address1 = v_V_addr_7_reg_322.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        v_V_address1 = v_V_addr_6_reg_311.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        v_V_address1 = v_V_addr_reg_294.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        v_V_address1 = v_V_addr_5_reg_300.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        v_V_address1 =  (sc_lv<4>) (zext_ln10_fu_181_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        v_V_address1 =  (sc_lv<4>) (zext_ln9_fu_148_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        v_V_address1 =  (sc_lv<4>) (zext_ln8_1_fu_130_p1.read());
    } else {
        v_V_address1 = "XXXX";
    }
}

void G::thread_v_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        v_V_ce0 = ap_const_logic_1;
    } else {
        v_V_ce0 = ap_const_logic_0;
    }
}

void G::thread_v_V_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        v_V_ce1 = ap_const_logic_1;
    } else {
        v_V_ce1 = ap_const_logic_0;
    }
}

void G::thread_v_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        v_V_d0 = ret_V_7_fu_285_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        v_V_d0 = rhs_V_3_fu_260_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        v_V_d0 = ret_V_5_fu_251_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        v_V_d0 = rhs_V_2_fu_225_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        v_V_d0 = ret_V_3_fu_211_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        v_V_d0 = rhs_V_1_fu_186_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_V_d0 = ret_V_1_fu_172_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        v_V_d0 = rhs_V_fu_141_p2.read();
    } else {
        v_V_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void G::thread_v_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        v_V_we0 = ap_const_logic_1;
    } else {
        v_V_we0 = ap_const_logic_0;
    }
}

void G::thread_zext_ln10_fu_181_p1() {
    zext_ln10_fu_181_p1 = esl_zext<64,5>(c.read());
}

void G::thread_zext_ln8_1_fu_130_p1() {
    zext_ln8_1_fu_130_p1 = esl_zext<64,4>(b.read());
}

void G::thread_zext_ln8_fu_125_p1() {
    zext_ln8_fu_125_p1 = esl_zext<64,4>(a.read());
}

void G::thread_zext_ln9_fu_148_p1() {
    zext_ln9_fu_148_p1 = esl_zext<64,5>(d.read());
}

void G::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

