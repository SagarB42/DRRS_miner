// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _G_HH_
#define _G_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct G : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > v_V_address0;
    sc_out< sc_logic > v_V_ce0;
    sc_out< sc_logic > v_V_we0;
    sc_out< sc_lv<32> > v_V_d0;
    sc_in< sc_lv<32> > v_V_q0;
    sc_out< sc_lv<4> > v_V_address1;
    sc_out< sc_logic > v_V_ce1;
    sc_in< sc_lv<32> > v_V_q1;
    sc_in< sc_lv<4> > a;
    sc_in< sc_lv<4> > b;
    sc_in< sc_lv<5> > c;
    sc_in< sc_lv<5> > d;
    sc_in< sc_lv<32> > x_V;
    sc_in< sc_lv<32> > y_V;


    // Module declarations
    G(sc_module_name name);
    SC_HAS_PROCESS(G);

    ~G();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > v_V_addr_reg_294;
    sc_signal< sc_lv<4> > v_V_addr_5_reg_300;
    sc_signal< sc_lv<32> > rhs_V_fu_141_p2;
    sc_signal< sc_lv<32> > rhs_V_reg_306;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > v_V_addr_6_reg_311;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > ret_V_1_fu_172_p3;
    sc_signal< sc_lv<32> > ret_V_1_reg_317;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > v_V_addr_7_reg_322;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > rhs_V_1_fu_186_p2;
    sc_signal< sc_lv<32> > rhs_V_1_reg_328;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > ret_V_3_fu_211_p3;
    sc_signal< sc_lv<32> > ret_V_3_reg_333;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > rhs_V_2_fu_225_p2;
    sc_signal< sc_lv<32> > rhs_V_2_reg_338;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > ret_V_5_fu_251_p3;
    sc_signal< sc_lv<32> > ret_V_5_reg_343;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<32> > rhs_V_3_fu_260_p2;
    sc_signal< sc_lv<32> > rhs_V_3_reg_348;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<64> > zext_ln8_fu_125_p1;
    sc_signal< sc_lv<64> > zext_ln8_1_fu_130_p1;
    sc_signal< sc_lv<64> > zext_ln9_fu_148_p1;
    sc_signal< sc_lv<64> > zext_ln10_fu_181_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<32> > ret_V_7_fu_285_p3;
    sc_signal< sc_lv<32> > add_ln209_fu_135_p2;
    sc_signal< sc_lv<32> > ret_V_fu_153_p2;
    sc_signal< sc_lv<16> > trunc_ln790_fu_168_p1;
    sc_signal< sc_lv<16> > r_V_fu_158_p4;
    sc_signal< sc_lv<32> > ret_V_2_fu_192_p2;
    sc_signal< sc_lv<12> > trunc_ln790_1_fu_207_p1;
    sc_signal< sc_lv<20> > r_V_6_fu_197_p4;
    sc_signal< sc_lv<32> > add_ln209_3_fu_220_p2;
    sc_signal< sc_lv<32> > ret_V_4_fu_232_p2;
    sc_signal< sc_lv<8> > trunc_ln790_2_fu_247_p1;
    sc_signal< sc_lv<24> > r_V_8_fu_237_p4;
    sc_signal< sc_lv<32> > ret_V_6_fu_266_p2;
    sc_signal< sc_lv<7> > trunc_ln790_3_fu_281_p1;
    sc_signal< sc_lv<25> > r_V_s_fu_271_p4;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_fsm_state1;
    static const sc_lv<16> ap_ST_fsm_state2;
    static const sc_lv<16> ap_ST_fsm_state3;
    static const sc_lv<16> ap_ST_fsm_state4;
    static const sc_lv<16> ap_ST_fsm_state5;
    static const sc_lv<16> ap_ST_fsm_state6;
    static const sc_lv<16> ap_ST_fsm_state7;
    static const sc_lv<16> ap_ST_fsm_state8;
    static const sc_lv<16> ap_ST_fsm_state9;
    static const sc_lv<16> ap_ST_fsm_state10;
    static const sc_lv<16> ap_ST_fsm_state11;
    static const sc_lv<16> ap_ST_fsm_state12;
    static const sc_lv<16> ap_ST_fsm_state13;
    static const sc_lv<16> ap_ST_fsm_state14;
    static const sc_lv<16> ap_ST_fsm_state15;
    static const sc_lv<16> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln209_3_fu_220_p2();
    void thread_add_ln209_fu_135_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_r_V_6_fu_197_p4();
    void thread_r_V_8_fu_237_p4();
    void thread_r_V_fu_158_p4();
    void thread_r_V_s_fu_271_p4();
    void thread_ret_V_1_fu_172_p3();
    void thread_ret_V_2_fu_192_p2();
    void thread_ret_V_3_fu_211_p3();
    void thread_ret_V_4_fu_232_p2();
    void thread_ret_V_5_fu_251_p3();
    void thread_ret_V_6_fu_266_p2();
    void thread_ret_V_7_fu_285_p3();
    void thread_ret_V_fu_153_p2();
    void thread_rhs_V_1_fu_186_p2();
    void thread_rhs_V_2_fu_225_p2();
    void thread_rhs_V_3_fu_260_p2();
    void thread_rhs_V_fu_141_p2();
    void thread_trunc_ln790_1_fu_207_p1();
    void thread_trunc_ln790_2_fu_247_p1();
    void thread_trunc_ln790_3_fu_281_p1();
    void thread_trunc_ln790_fu_168_p1();
    void thread_v_V_address0();
    void thread_v_V_address1();
    void thread_v_V_ce0();
    void thread_v_V_ce1();
    void thread_v_V_d0();
    void thread_v_V_we0();
    void thread_zext_ln10_fu_181_p1();
    void thread_zext_ln8_1_fu_130_p1();
    void thread_zext_ln8_fu_125_p1();
    void thread_zext_ln9_fu_148_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
