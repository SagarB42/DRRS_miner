-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity G is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v_V_ce0 : OUT STD_LOGIC;
    v_V_we0 : OUT STD_LOGIC;
    v_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v_V_ce1 : OUT STD_LOGIC;
    v_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (3 downto 0);
    b : IN STD_LOGIC_VECTOR (3 downto 0);
    c : IN STD_LOGIC_VECTOR (4 downto 0);
    d : IN STD_LOGIC_VECTOR (4 downto 0);
    x_V : IN STD_LOGIC_VECTOR (31 downto 0);
    y_V : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of G is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal v_V_addr_reg_294 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_V_addr_5_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal v_V_addr_6_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_V_1_fu_172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal v_V_addr_7_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal rhs_V_1_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ret_V_3_fu_211_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal rhs_V_2_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ret_V_5_fu_251_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal rhs_V_3_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_3_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln8_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_1_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ret_V_7_fu_285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln790_fu_168_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_158_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln790_1_fu_207_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_6_fu_197_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln209_3_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln790_2_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_8_fu_237_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_6_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln790_3_fu_281_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_s_fu_271_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_1_reg_317 <= ret_V_1_fu_172_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ret_V_3_reg_333 <= ret_V_3_fu_211_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ret_V_5_reg_343 <= ret_V_5_fu_251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                rhs_V_1_reg_328 <= rhs_V_1_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                rhs_V_2_reg_338 <= rhs_V_2_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                rhs_V_3_reg_348 <= rhs_V_3_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rhs_V_reg_306 <= rhs_V_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                v_V_addr_5_reg_300 <= zext_ln8_1_fu_130_p1(4 - 1 downto 0);
                v_V_addr_reg_294 <= zext_ln8_fu_125_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                v_V_addr_6_reg_311 <= zext_ln9_fu_148_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                v_V_addr_7_reg_322 <= zext_ln10_fu_181_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln209_3_fu_220_p2 <= std_logic_vector(unsigned(y_V) + unsigned(ret_V_3_reg_333));
    add_ln209_fu_135_p2 <= std_logic_vector(unsigned(x_V) + unsigned(v_V_q1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    r_V_6_fu_197_p4 <= ret_V_2_fu_192_p2(31 downto 12);
    r_V_8_fu_237_p4 <= ret_V_4_fu_232_p2(31 downto 8);
    r_V_fu_158_p4 <= ret_V_fu_153_p2(31 downto 16);
    r_V_s_fu_271_p4 <= ret_V_6_fu_266_p2(31 downto 7);
    ret_V_1_fu_172_p3 <= (trunc_ln790_fu_168_p1 & r_V_fu_158_p4);
    ret_V_2_fu_192_p2 <= (v_V_q1 xor rhs_V_1_reg_328);
    ret_V_3_fu_211_p3 <= (trunc_ln790_1_fu_207_p1 & r_V_6_fu_197_p4);
    ret_V_4_fu_232_p2 <= (v_V_q1 xor rhs_V_2_reg_338);
    ret_V_5_fu_251_p3 <= (trunc_ln790_2_fu_247_p1 & r_V_8_fu_237_p4);
    ret_V_6_fu_266_p2 <= (v_V_q1 xor rhs_V_3_reg_348);
    ret_V_7_fu_285_p3 <= (trunc_ln790_3_fu_281_p1 & r_V_s_fu_271_p4);
    ret_V_fu_153_p2 <= (v_V_q1 xor rhs_V_reg_306);
    rhs_V_1_fu_186_p2 <= std_logic_vector(unsigned(v_V_q1) + unsigned(ret_V_1_reg_317));
    rhs_V_2_fu_225_p2 <= std_logic_vector(unsigned(add_ln209_3_fu_220_p2) + unsigned(v_V_q1));
    rhs_V_3_fu_260_p2 <= std_logic_vector(unsigned(v_V_q1) + unsigned(ret_V_5_reg_343));
    rhs_V_fu_141_p2 <= std_logic_vector(unsigned(add_ln209_fu_135_p2) + unsigned(v_V_q0));
    trunc_ln790_1_fu_207_p1 <= ret_V_2_fu_192_p2(12 - 1 downto 0);
    trunc_ln790_2_fu_247_p1 <= ret_V_4_fu_232_p2(8 - 1 downto 0);
    trunc_ln790_3_fu_281_p1 <= ret_V_6_fu_266_p2(7 - 1 downto 0);
    trunc_ln790_fu_168_p1 <= ret_V_fu_153_p2(16 - 1 downto 0);

    v_V_address0_assign_proc : process(ap_CS_fsm_state1, v_V_addr_reg_294, v_V_addr_5_reg_300, ap_CS_fsm_state2, v_V_addr_6_reg_311, ap_CS_fsm_state4, v_V_addr_7_reg_322, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, zext_ln8_fu_125_p1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            v_V_address0 <= v_V_addr_5_reg_300;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            v_V_address0 <= v_V_addr_7_reg_322;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            v_V_address0 <= v_V_addr_6_reg_311;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            v_V_address0 <= v_V_addr_reg_294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            v_V_address0 <= zext_ln8_fu_125_p1(4 - 1 downto 0);
        else 
            v_V_address0 <= "XXXX";
        end if; 
    end process;


    v_V_address1_assign_proc : process(ap_CS_fsm_state1, v_V_addr_reg_294, v_V_addr_5_reg_300, v_V_addr_6_reg_311, ap_CS_fsm_state3, v_V_addr_7_reg_322, ap_CS_fsm_state5, zext_ln8_1_fu_130_p1, zext_ln9_fu_148_p1, zext_ln10_fu_181_p1, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v_V_address1 <= v_V_addr_7_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v_V_address1 <= v_V_addr_6_reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v_V_address1 <= v_V_addr_reg_294;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            v_V_address1 <= v_V_addr_5_reg_300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v_V_address1 <= zext_ln10_fu_181_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v_V_address1 <= zext_ln9_fu_148_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            v_V_address1 <= zext_ln8_1_fu_130_p1(4 - 1 downto 0);
        else 
            v_V_address1 <= "XXXX";
        end if; 
    end process;


    v_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            v_V_ce0 <= ap_const_logic_1;
        else 
            v_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            v_V_ce1 <= ap_const_logic_1;
        else 
            v_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_V_d0_assign_proc : process(rhs_V_fu_141_p2, ap_CS_fsm_state2, ret_V_1_fu_172_p3, ap_CS_fsm_state4, rhs_V_1_fu_186_p2, ap_CS_fsm_state6, ret_V_3_fu_211_p3, ap_CS_fsm_state8, rhs_V_2_fu_225_p2, ap_CS_fsm_state10, ret_V_5_fu_251_p3, ap_CS_fsm_state12, rhs_V_3_fu_260_p2, ap_CS_fsm_state14, ap_CS_fsm_state16, ret_V_7_fu_285_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            v_V_d0 <= ret_V_7_fu_285_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            v_V_d0 <= rhs_V_3_fu_260_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            v_V_d0 <= ret_V_5_fu_251_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_V_d0 <= rhs_V_2_fu_225_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v_V_d0 <= ret_V_3_fu_211_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v_V_d0 <= rhs_V_1_fu_186_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v_V_d0 <= ret_V_1_fu_172_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_V_d0 <= rhs_V_fu_141_p2;
        else 
            v_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            v_V_we0 <= ap_const_logic_1;
        else 
            v_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c),64));
    zext_ln8_1_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b),64));
    zext_ln8_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a),64));
    zext_ln9_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d),64));
end behav;
