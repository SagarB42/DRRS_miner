-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blake2s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V : IN STD_LOGIC_VECTOR (511 downto 0);
    hash_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    hash_V_ce0 : OUT STD_LOGIC;
    hash_V_we0 : OUT STD_LOGIC;
    hash_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of blake2s is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "blake2s,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.825806,HLS_SYN_LAT=1469,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=726,HLS_SYN_LUT=7015,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1010020 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000010000000000100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IV_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal IV_V_ce0 : STD_LOGIC;
    signal IV_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_246_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln47_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln46_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_V_addr_reg_435 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_3_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_fu_406_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_457 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln59_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_462 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln58_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_V_ce0 : STD_LOGIC;
    signal h_V_we0 : STD_LOGIC;
    signal h_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_V_ce0 : STD_LOGIC;
    signal m_V_we0 : STD_LOGIC;
    signal m_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_ce1 : STD_LOGIC;
    signal m_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compress_fu_200_ap_start : STD_LOGIC;
    signal grp_compress_fu_200_ap_done : STD_LOGIC;
    signal grp_compress_fu_200_ap_idle : STD_LOGIC;
    signal grp_compress_fu_200_ap_ready : STD_LOGIC;
    signal grp_compress_fu_200_h_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_compress_fu_200_h_V_ce0 : STD_LOGIC;
    signal grp_compress_fu_200_h_V_we0 : STD_LOGIC;
    signal grp_compress_fu_200_h_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compress_fu_200_m_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compress_fu_200_m_V_ce0 : STD_LOGIC;
    signal grp_compress_fu_200_m_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compress_fu_200_m_V_ce1 : STD_LOGIC;
    signal i_0_reg_167 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i2_0_reg_178 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln52_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_0_reg_189 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_compress_fu_200_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln53_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln719_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln53_fu_281_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Lo_assign_fu_285_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln53_fu_293_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln665_fu_305_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln665_1_fu_309_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln665_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln665_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln665_1_fu_334_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_313_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln665_fu_328_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln665_fu_340_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln665_2_fu_355_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln665_2_fu_363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln665_1_fu_348_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln665_2_fu_369_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln665_3_fu_373_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln665_fu_377_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln665_1_fu_383_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_389_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component compress IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        h_V_ce0 : OUT STD_LOGIC;
        h_V_we0 : OUT STD_LOGIC;
        h_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_V_ce0 : OUT STD_LOGIC;
        m_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_V_ce1 : OUT STD_LOGIC;
        m_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compress_IV_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blake2s_h_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blake2s_m_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    IV_V_U : component compress_IV_V
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IV_V_address0,
        ce0 => IV_V_ce0,
        q0 => IV_V_q0);

    h_V_U : component blake2s_h_V
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_V_address0,
        ce0 => h_V_ce0,
        we0 => h_V_we0,
        d0 => h_V_d0,
        q0 => h_V_q0);

    m_V_U : component blake2s_m_V
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_V_address0,
        ce0 => m_V_ce0,
        we0 => m_V_we0,
        d0 => m_V_d0,
        q0 => m_V_q0,
        address1 => grp_compress_fu_200_m_V_address1,
        ce1 => m_V_ce1,
        q1 => m_V_q1);

    grp_compress_fu_200 : component compress
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compress_fu_200_ap_start,
        ap_done => grp_compress_fu_200_ap_done,
        ap_idle => grp_compress_fu_200_ap_idle,
        ap_ready => grp_compress_fu_200_ap_ready,
        h_V_address0 => grp_compress_fu_200_h_V_address0,
        h_V_ce0 => grp_compress_fu_200_h_V_ce0,
        h_V_we0 => grp_compress_fu_200_h_V_we0,
        h_V_d0 => grp_compress_fu_200_h_V_d0,
        h_V_q0 => h_V_q0,
        m_V_address0 => grp_compress_fu_200_m_V_address0,
        m_V_ce0 => grp_compress_fu_200_m_V_ce0,
        m_V_q0 => m_V_q0,
        m_V_address1 => grp_compress_fu_200_m_V_address1,
        m_V_ce1 => grp_compress_fu_200_m_V_ce1,
        m_V_q1 => m_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compress_fu_200_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compress_fu_200_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln52_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_compress_fu_200_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compress_fu_200_ap_ready = ap_const_logic_1)) then 
                    grp_compress_fu_200_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i2_0_reg_178 <= ap_const_lv5_0;
            elsif (((icmp_ln52_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_178 <= i_3_fu_270_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i3_0_reg_189 <= i_4_reg_457;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_compress_fu_200_ap_done = ap_const_logic_1))) then 
                i3_0_reg_189 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_167 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_167 <= i_reg_420;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_4_reg_457 <= i_4_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_420 <= i_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln47_reg_425(3 downto 0) <= zext_ln47_fu_252_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln59_reg_462(3 downto 0) <= zext_ln59_fu_412_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln47_reg_425(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln59_reg_462(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln46_fu_240_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln58_fu_400_p2, grp_compress_fu_200_ap_done, icmp_ln52_fu_264_p2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln46_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln52_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_compress_fu_200_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln58_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    IV_V_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln47_fu_252_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IV_V_address0 <= zext_ln47_fu_252_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IV_V_address0 <= ap_const_lv3_0;
        else 
            IV_V_address0 <= "XXX";
        end if; 
    end process;


    IV_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IV_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            IV_V_ce0 <= ap_const_logic_0;
        else 
            IV_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Lo_assign_fu_285_p3 <= (trunc_ln53_fu_281_p1 & ap_const_lv5_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state7, icmp_ln58_fu_400_p2)
    begin
        if (((icmp_ln58_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln58_fu_400_p2)
    begin
        if (((icmp_ln58_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_compress_fu_200_ap_start <= grp_compress_fu_200_ap_start_reg;
    h_V_addr_reg_435 <= ap_const_lv64_0(3 - 1 downto 0);

    h_V_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln47_reg_425, h_V_addr_reg_435, ap_CS_fsm_state4, ap_CS_fsm_state7, zext_ln59_fu_412_p1, grp_compress_fu_200_h_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_V_address0 <= zext_ln59_fu_412_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            h_V_address0 <= h_V_addr_reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_V_address0 <= zext_ln47_reg_425(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            h_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_V_address0 <= grp_compress_fu_200_h_V_address0;
        else 
            h_V_address0 <= "XXX";
        end if; 
    end process;


    h_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, grp_compress_fu_200_h_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            h_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_V_ce0 <= grp_compress_fu_200_h_V_ce0;
        else 
            h_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_V_d0_assign_proc : process(IV_V_q0, ap_CS_fsm_state4, grp_compress_fu_200_h_V_d0, ap_CS_fsm_state3, ap_CS_fsm_state6, xor_ln719_fu_257_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            h_V_d0 <= xor_ln719_fu_257_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_V_d0 <= IV_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_V_d0 <= grp_compress_fu_200_h_V_d0;
        else 
            h_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_V_we0_assign_proc : process(ap_CS_fsm_state4, grp_compress_fu_200_h_V_we0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            h_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_V_we0 <= grp_compress_fu_200_h_V_we0;
        else 
            h_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    hash_V_address0 <= zext_ln59_reg_462(3 - 1 downto 0);

    hash_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hash_V_ce0 <= ap_const_logic_1;
        else 
            hash_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hash_V_d0 <= h_V_q0;

    hash_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hash_V_we0 <= ap_const_logic_1;
        else 
            hash_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_270_p2 <= std_logic_vector(unsigned(i2_0_reg_178) + unsigned(ap_const_lv5_1));
    i_4_fu_406_p2 <= std_logic_vector(unsigned(i3_0_reg_189) + unsigned(ap_const_lv4_1));
    i_fu_246_p2 <= std_logic_vector(unsigned(i_0_reg_167) + unsigned(ap_const_lv4_1));
    icmp_ln46_fu_240_p2 <= "1" when (i_0_reg_167 = ap_const_lv4_8) else "0";
    icmp_ln52_fu_264_p2 <= "1" when (i2_0_reg_178 = ap_const_lv5_10) else "0";
    icmp_ln58_fu_400_p2 <= "1" when (i3_0_reg_189 = ap_const_lv4_8) else "0";
    icmp_ln665_fu_299_p2 <= "1" when (unsigned(Lo_assign_fu_285_p3) > unsigned(or_ln53_fu_293_p2)) else "0";
    lshr_ln665_1_fu_383_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln665_3_fu_373_p1(31-1 downto 0)))));
    lshr_ln665_fu_377_p2 <= std_logic_vector(shift_right(unsigned(select_ln665_1_fu_348_p3),to_integer(unsigned('0' & zext_ln665_2_fu_369_p1(31-1 downto 0)))));

    m_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_compress_fu_200_m_V_address0, icmp_ln52_fu_264_p2, ap_CS_fsm_state6, zext_ln53_fu_276_p1)
    begin
        if (((icmp_ln52_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_V_address0 <= zext_ln53_fu_276_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_V_address0 <= grp_compress_fu_200_m_V_address0;
        else 
            m_V_address0 <= "XXXX";
        end if; 
    end process;


    m_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_compress_fu_200_m_V_ce0, icmp_ln52_fu_264_p2, ap_CS_fsm_state6)
    begin
        if (((icmp_ln52_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_V_ce0 <= grp_compress_fu_200_m_V_ce0;
        else 
            m_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_V_ce1_assign_proc : process(grp_compress_fu_200_m_V_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_V_ce1 <= grp_compress_fu_200_m_V_ce1;
        else 
            m_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_V_d0 <= p_Result_s_fu_389_p2(32 - 1 downto 0);

    m_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln52_fu_264_p2)
    begin
        if (((icmp_ln52_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_V_we0 <= ap_const_logic_1;
        else 
            m_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln53_fu_293_p2 <= (ap_const_lv9_1F or Lo_assign_fu_285_p3);
    p_Result_s_fu_389_p2 <= (lshr_ln665_fu_377_p2 and lshr_ln665_1_fu_383_p2);
    select_ln665_1_fu_348_p3 <= 
        tmp_fu_313_p4 when (icmp_ln665_fu_299_p2(0) = '1') else 
        data_V;
    select_ln665_2_fu_355_p3 <= 
        xor_ln665_fu_328_p2 when (icmp_ln665_fu_299_p2(0) = '1') else 
        zext_ln665_fu_305_p1;
    select_ln665_fu_340_p3 <= 
        sub_ln665_fu_322_p2 when (icmp_ln665_fu_299_p2(0) = '1') else 
        sub_ln665_1_fu_334_p2;
    sub_ln665_1_fu_334_p2 <= std_logic_vector(unsigned(zext_ln665_1_fu_309_p1) - unsigned(zext_ln665_fu_305_p1));
    sub_ln665_2_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln665_fu_340_p3));
    sub_ln665_fu_322_p2 <= std_logic_vector(unsigned(zext_ln665_fu_305_p1) - unsigned(zext_ln665_1_fu_309_p1));
    
    tmp_fu_313_p4_proc : process(data_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_fu_313_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := data_V;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_fu_313_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_fu_313_p4_i) := data_V(512-1-tmp_fu_313_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_313_p4 <= resvalue(512-1 downto 0);
    end process;

    trunc_ln53_fu_281_p1 <= i2_0_reg_178(4 - 1 downto 0);
    xor_ln665_fu_328_p2 <= (zext_ln665_fu_305_p1 xor ap_const_lv10_1FF);
    xor_ln719_fu_257_p2 <= (h_V_q0 xor ap_const_lv32_1010020);
    zext_ln47_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_167),64));
    zext_ln53_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_178),64));
    zext_ln59_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_189),64));
    zext_ln665_1_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln53_fu_293_p2),10));
    zext_ln665_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln665_2_fu_355_p3),512));
    zext_ln665_3_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln665_2_fu_363_p2),512));
    zext_ln665_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_285_p3),10));
end behav;
