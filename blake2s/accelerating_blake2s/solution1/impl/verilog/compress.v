// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compress (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        h_V_address0,
        h_V_ce0,
        h_V_we0,
        h_V_d0,
        h_V_q0,
        m_V_address0,
        m_V_ce0,
        m_V_q0,
        m_V_address1,
        m_V_ce1,
        m_V_q1
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] h_V_address0;
output   h_V_ce0;
output   h_V_we0;
output  [31:0] h_V_d0;
input  [31:0] h_V_q0;
output  [3:0] m_V_address0;
output   m_V_ce0;
input  [31:0] m_V_q0;
output  [3:0] m_V_address1;
output   m_V_ce1;
input  [31:0] m_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] h_V_address0;
reg h_V_ce0;
reg h_V_we0;
reg[3:0] m_V_address0;
reg m_V_ce0;
reg[3:0] m_V_address1;
reg m_V_ce1;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] IV_V_address0;
reg    IV_V_ce0;
wire   [31:0] IV_V_q0;
wire   [3:0] SIGMA_V_0_address0;
reg    SIGMA_V_0_ce0;
wire   [3:0] SIGMA_V_0_q0;
wire   [3:0] SIGMA_V_1_address0;
reg    SIGMA_V_1_ce0;
wire   [3:0] SIGMA_V_1_q0;
wire   [3:0] SIGMA_V_2_address0;
reg    SIGMA_V_2_ce0;
wire   [3:0] SIGMA_V_2_q0;
wire   [3:0] SIGMA_V_3_address0;
reg    SIGMA_V_3_ce0;
wire   [3:0] SIGMA_V_3_q0;
wire   [3:0] SIGMA_V_4_address0;
reg    SIGMA_V_4_ce0;
wire   [3:0] SIGMA_V_4_q0;
wire   [3:0] SIGMA_V_5_address0;
reg    SIGMA_V_5_ce0;
wire   [3:0] SIGMA_V_5_q0;
wire   [3:0] SIGMA_V_6_address0;
reg    SIGMA_V_6_ce0;
wire   [3:0] SIGMA_V_6_q0;
wire   [3:0] SIGMA_V_7_address0;
reg    SIGMA_V_7_ce0;
wire   [3:0] SIGMA_V_7_q0;
wire   [3:0] SIGMA_V_8_address0;
reg    SIGMA_V_8_ce0;
wire   [3:0] SIGMA_V_8_q0;
wire   [3:0] SIGMA_V_9_address0;
reg    SIGMA_V_9_ce0;
wire   [3:0] SIGMA_V_9_q0;
wire   [3:0] SIGMA_V_10_address0;
reg    SIGMA_V_10_ce0;
wire   [3:0] SIGMA_V_10_q0;
wire   [3:0] SIGMA_V_11_address0;
reg    SIGMA_V_11_ce0;
wire   [3:0] SIGMA_V_11_q0;
wire   [3:0] SIGMA_V_12_address0;
reg    SIGMA_V_12_ce0;
wire   [3:0] SIGMA_V_12_q0;
wire   [3:0] SIGMA_V_13_address0;
reg    SIGMA_V_13_ce0;
wire   [3:0] SIGMA_V_13_q0;
wire   [3:0] SIGMA_V_14_address0;
reg    SIGMA_V_14_ce0;
wire   [3:0] SIGMA_V_14_q0;
wire   [3:0] SIGMA_V_15_address0;
reg    SIGMA_V_15_ce0;
wire   [3:0] SIGMA_V_15_q0;
reg   [31:0] reg_583;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
reg   [31:0] reg_588;
wire   [3:0] i_fu_599_p2;
reg   [3:0] i_reg_772;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln21_fu_605_p1;
reg   [63:0] zext_ln21_reg_777;
wire   [0:0] icmp_ln20_fu_593_p2;
wire   [3:0] i_1_fu_635_p2;
reg   [3:0] i_1_reg_801;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln28_fu_629_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] SIGMA_V_2_load_reg_896;
reg   [3:0] SIGMA_V_3_load_reg_901;
reg   [3:0] SIGMA_V_4_load_reg_906;
reg   [3:0] SIGMA_V_5_load_reg_911;
reg   [3:0] SIGMA_V_6_load_reg_916;
reg   [3:0] SIGMA_V_7_load_reg_921;
reg   [3:0] SIGMA_V_8_load_reg_926;
reg   [3:0] SIGMA_V_9_load_reg_931;
reg   [3:0] SIGMA_V_10_load_reg_936;
reg   [3:0] SIGMA_V_11_load_reg_941;
reg   [3:0] SIGMA_V_12_load_reg_946;
reg   [3:0] SIGMA_V_13_load_reg_951;
reg   [3:0] SIGMA_V_14_load_reg_956;
reg   [3:0] SIGMA_V_15_load_reg_961;
wire    ap_CS_fsm_state8;
wire    grp_G_fu_554_ap_ready;
wire    grp_G_fu_554_ap_done;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire   [3:0] i_2_fu_733_p2;
reg   [3:0] i_2_reg_1039;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln39_fu_727_p2;
reg   [2:0] h_V_addr_1_reg_1054;
reg   [3:0] v_V_address0;
reg    v_V_ce0;
reg    v_V_we0;
reg   [31:0] v_V_d0;
wire   [31:0] v_V_q0;
reg   [3:0] v_V_address1;
reg    v_V_ce1;
reg    v_V_we1;
reg   [31:0] v_V_d1;
wire   [31:0] v_V_q1;
wire    grp_G_fu_554_ap_start;
wire    grp_G_fu_554_ap_idle;
wire   [3:0] grp_G_fu_554_v_V_address0;
wire    grp_G_fu_554_v_V_ce0;
wire    grp_G_fu_554_v_V_we0;
wire   [31:0] grp_G_fu_554_v_V_d0;
wire   [3:0] grp_G_fu_554_v_V_address1;
wire    grp_G_fu_554_v_V_ce1;
reg   [3:0] grp_G_fu_554_a;
reg   [3:0] grp_G_fu_554_b;
reg   [4:0] grp_G_fu_554_c;
reg   [4:0] grp_G_fu_554_d;
reg   [3:0] i_0_reg_520;
wire    ap_CS_fsm_state3;
reg   [3:0] i1_0_reg_532;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state22;
reg   [3:0] i2_0_reg_543;
wire    ap_CS_fsm_state24;
reg    grp_G_fu_554_ap_start_reg;
wire   [63:0] zext_ln22_fu_617_p1;
wire   [63:0] zext_ln29_fu_641_p1;
wire   [63:0] zext_ln544_fu_661_p1;
wire   [63:0] zext_ln544_1_fu_666_p1;
wire   [63:0] zext_ln544_2_fu_671_p1;
wire   [63:0] zext_ln544_3_fu_675_p1;
wire   [63:0] zext_ln544_4_fu_679_p1;
wire   [63:0] zext_ln544_5_fu_683_p1;
wire   [63:0] zext_ln544_6_fu_687_p1;
wire   [63:0] zext_ln544_7_fu_691_p1;
wire   [63:0] zext_ln544_8_fu_695_p1;
wire   [63:0] zext_ln544_9_fu_699_p1;
wire   [63:0] zext_ln544_10_fu_703_p1;
wire   [63:0] zext_ln544_11_fu_707_p1;
wire   [63:0] zext_ln544_12_fu_711_p1;
wire   [63:0] zext_ln544_13_fu_715_p1;
wire   [63:0] zext_ln544_14_fu_719_p1;
wire   [63:0] zext_ln544_15_fu_723_p1;
wire   [63:0] zext_ln40_fu_739_p1;
wire   [63:0] zext_ln40_1_fu_751_p1;
wire   [31:0] xor_ln719_fu_622_p2;
wire   [3:0] xor_ln22_fu_611_p2;
wire   [3:0] xor_ln40_fu_745_p2;
wire   [31:0] xor_ln719_2_fu_756_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 grp_G_fu_554_ap_start_reg = 1'b0;
end

compress_IV_V #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
IV_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IV_V_address0),
    .ce0(IV_V_ce0),
    .q0(IV_V_q0)
);

compress_SIGMA_V_0 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_0_address0),
    .ce0(SIGMA_V_0_ce0),
    .q0(SIGMA_V_0_q0)
);

compress_SIGMA_V_1 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_1_address0),
    .ce0(SIGMA_V_1_ce0),
    .q0(SIGMA_V_1_q0)
);

compress_SIGMA_V_2 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_2_address0),
    .ce0(SIGMA_V_2_ce0),
    .q0(SIGMA_V_2_q0)
);

compress_SIGMA_V_3 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_3_address0),
    .ce0(SIGMA_V_3_ce0),
    .q0(SIGMA_V_3_q0)
);

compress_SIGMA_V_4 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_4_address0),
    .ce0(SIGMA_V_4_ce0),
    .q0(SIGMA_V_4_q0)
);

compress_SIGMA_V_5 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_5_address0),
    .ce0(SIGMA_V_5_ce0),
    .q0(SIGMA_V_5_q0)
);

compress_SIGMA_V_6 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_6_address0),
    .ce0(SIGMA_V_6_ce0),
    .q0(SIGMA_V_6_q0)
);

compress_SIGMA_V_7 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_7_address0),
    .ce0(SIGMA_V_7_ce0),
    .q0(SIGMA_V_7_q0)
);

compress_SIGMA_V_8 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_8_address0),
    .ce0(SIGMA_V_8_ce0),
    .q0(SIGMA_V_8_q0)
);

compress_SIGMA_V_9 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_9_address0),
    .ce0(SIGMA_V_9_ce0),
    .q0(SIGMA_V_9_q0)
);

compress_SIGMA_V_10 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_10_address0),
    .ce0(SIGMA_V_10_ce0),
    .q0(SIGMA_V_10_q0)
);

compress_SIGMA_V_11 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_11_address0),
    .ce0(SIGMA_V_11_ce0),
    .q0(SIGMA_V_11_q0)
);

compress_SIGMA_V_12 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_12_address0),
    .ce0(SIGMA_V_12_ce0),
    .q0(SIGMA_V_12_q0)
);

compress_SIGMA_V_13 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_13_address0),
    .ce0(SIGMA_V_13_ce0),
    .q0(SIGMA_V_13_q0)
);

compress_SIGMA_V_14 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_14_address0),
    .ce0(SIGMA_V_14_ce0),
    .q0(SIGMA_V_14_q0)
);

compress_SIGMA_V_15 #(
    .DataWidth( 4 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
SIGMA_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SIGMA_V_15_address0),
    .ce0(SIGMA_V_15_ce0),
    .q0(SIGMA_V_15_q0)
);

compress_v_V #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
v_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(v_V_address0),
    .ce0(v_V_ce0),
    .we0(v_V_we0),
    .d0(v_V_d0),
    .q0(v_V_q0),
    .address1(v_V_address1),
    .ce1(v_V_ce1),
    .we1(v_V_we1),
    .d1(v_V_d1),
    .q1(v_V_q1)
);

G grp_G_fu_554(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_G_fu_554_ap_start),
    .ap_done(grp_G_fu_554_ap_done),
    .ap_idle(grp_G_fu_554_ap_idle),
    .ap_ready(grp_G_fu_554_ap_ready),
    .v_V_address0(grp_G_fu_554_v_V_address0),
    .v_V_ce0(grp_G_fu_554_v_V_ce0),
    .v_V_we0(grp_G_fu_554_v_V_we0),
    .v_V_d0(grp_G_fu_554_v_V_d0),
    .v_V_q0(v_V_q0),
    .v_V_address1(grp_G_fu_554_v_V_address1),
    .v_V_ce1(grp_G_fu_554_v_V_ce1),
    .v_V_q1(v_V_q1),
    .a(grp_G_fu_554_a),
    .b(grp_G_fu_554_b),
    .c(grp_G_fu_554_c),
    .d(grp_G_fu_554_d),
    .x_V(reg_583),
    .y_V(reg_588)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_G_fu_554_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
            grp_G_fu_554_ap_start_reg <= 1'b1;
        end else if ((grp_G_fu_554_ap_ready == 1'b1)) begin
            grp_G_fu_554_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        i1_0_reg_532 <= i_1_reg_801;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_532 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_0_reg_543 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i2_0_reg_543 <= i_2_reg_1039;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_520 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_520 <= i_reg_772;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SIGMA_V_10_load_reg_936 <= SIGMA_V_10_q0;
        SIGMA_V_11_load_reg_941 <= SIGMA_V_11_q0;
        SIGMA_V_12_load_reg_946 <= SIGMA_V_12_q0;
        SIGMA_V_13_load_reg_951 <= SIGMA_V_13_q0;
        SIGMA_V_14_load_reg_956 <= SIGMA_V_14_q0;
        SIGMA_V_15_load_reg_961 <= SIGMA_V_15_q0;
        SIGMA_V_2_load_reg_896 <= SIGMA_V_2_q0;
        SIGMA_V_3_load_reg_901 <= SIGMA_V_3_q0;
        SIGMA_V_4_load_reg_906 <= SIGMA_V_4_q0;
        SIGMA_V_5_load_reg_911 <= SIGMA_V_5_q0;
        SIGMA_V_6_load_reg_916 <= SIGMA_V_6_q0;
        SIGMA_V_7_load_reg_921 <= SIGMA_V_7_q0;
        SIGMA_V_8_load_reg_926 <= SIGMA_V_8_q0;
        SIGMA_V_9_load_reg_931 <= SIGMA_V_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_727_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        h_V_addr_1_reg_1054 <= zext_ln40_fu_739_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_801 <= i_1_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_2_reg_1039 <= i_2_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_772 <= i_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_583 <= m_V_q0;
        reg_588 <= m_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln21_reg_777[3 : 0] <= zext_ln21_fu_605_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IV_V_ce0 = 1'b1;
    end else begin
        IV_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_0_ce0 = 1'b1;
    end else begin
        SIGMA_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_10_ce0 = 1'b1;
    end else begin
        SIGMA_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_11_ce0 = 1'b1;
    end else begin
        SIGMA_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_12_ce0 = 1'b1;
    end else begin
        SIGMA_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_13_ce0 = 1'b1;
    end else begin
        SIGMA_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_14_ce0 = 1'b1;
    end else begin
        SIGMA_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_15_ce0 = 1'b1;
    end else begin
        SIGMA_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_1_ce0 = 1'b1;
    end else begin
        SIGMA_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_2_ce0 = 1'b1;
    end else begin
        SIGMA_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_3_ce0 = 1'b1;
    end else begin
        SIGMA_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_4_ce0 = 1'b1;
    end else begin
        SIGMA_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_5_ce0 = 1'b1;
    end else begin
        SIGMA_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_6_ce0 = 1'b1;
    end else begin
        SIGMA_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_7_ce0 = 1'b1;
    end else begin
        SIGMA_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_8_ce0 = 1'b1;
    end else begin
        SIGMA_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SIGMA_V_9_ce0 = 1'b1;
    end else begin
        SIGMA_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln39_fu_727_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_727_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_G_fu_554_a = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_G_fu_554_a = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_G_fu_554_a = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_G_fu_554_a = 4'd0;
    end else begin
        grp_G_fu_554_a = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_G_fu_554_b = 4'd7;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_G_fu_554_b = 4'd6;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_G_fu_554_b = 4'd5;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_G_fu_554_b = 4'd4;
    end else begin
        grp_G_fu_554_b = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_G_fu_554_c = 5'd11;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_G_fu_554_c = 5'd10;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_G_fu_554_c = 5'd9;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_G_fu_554_c = 5'd8;
    end else begin
        grp_G_fu_554_c = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_G_fu_554_d = 5'd15;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_G_fu_554_d = 5'd14;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_G_fu_554_d = 5'd13;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_G_fu_554_d = 5'd12;
    end else begin
        grp_G_fu_554_d = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        h_V_address0 = h_V_addr_1_reg_1054;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        h_V_address0 = zext_ln40_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        h_V_address0 = zext_ln21_fu_605_p1;
    end else begin
        h_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        h_V_ce0 = 1'b1;
    end else begin
        h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        h_V_we0 = 1'b1;
    end else begin
        h_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        m_V_address0 = zext_ln544_14_fu_719_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        m_V_address0 = zext_ln544_12_fu_711_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        m_V_address0 = zext_ln544_10_fu_703_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        m_V_address0 = zext_ln544_8_fu_695_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        m_V_address0 = zext_ln544_6_fu_687_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        m_V_address0 = zext_ln544_4_fu_679_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        m_V_address0 = zext_ln544_2_fu_671_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_address0 = zext_ln544_fu_661_p1;
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        m_V_address1 = zext_ln544_15_fu_723_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        m_V_address1 = zext_ln544_13_fu_715_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        m_V_address1 = zext_ln544_11_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        m_V_address1 = zext_ln544_9_fu_699_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        m_V_address1 = zext_ln544_7_fu_691_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        m_V_address1 = zext_ln544_5_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        m_V_address1 = zext_ln544_3_fu_675_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_address1 = zext_ln544_1_fu_666_p1;
    end else begin
        m_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        m_V_ce1 = 1'b1;
    end else begin
        m_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        v_V_address0 = zext_ln40_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_V_address0 = zext_ln21_reg_777;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v_V_address0 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        v_V_address0 = grp_G_fu_554_v_V_address0;
    end else begin
        v_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        v_V_address1 = zext_ln40_1_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_V_address1 = zext_ln22_fu_617_p1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        v_V_address1 = grp_G_fu_554_v_V_address1;
    end else begin
        v_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        v_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        v_V_ce0 = grp_G_fu_554_v_V_ce0;
    end else begin
        v_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state23))) begin
        v_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        v_V_ce1 = grp_G_fu_554_v_V_ce1;
    end else begin
        v_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_V_d0 = h_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        v_V_d0 = grp_G_fu_554_v_V_d0;
    end else begin
        v_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_V_d1 = xor_ln719_fu_622_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_V_d1 = IV_V_q0;
    end else begin
        v_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_V_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        v_V_we0 = grp_G_fu_554_v_V_we0;
    end else begin
        v_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        v_V_we1 = 1'b1;
    end else begin
        v_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln20_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln28_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_G_fu_554_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln39_fu_727_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IV_V_address0 = zext_ln21_fu_605_p1;

assign SIGMA_V_0_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_10_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_11_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_12_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_13_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_14_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_15_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_1_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_2_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_3_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_4_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_5_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_6_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_7_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_8_address0 = zext_ln29_fu_641_p1;

assign SIGMA_V_9_address0 = zext_ln29_fu_641_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_G_fu_554_ap_start = grp_G_fu_554_ap_start_reg;

assign h_V_d0 = (xor_ln719_2_fu_756_p2 ^ v_V_q1);

assign i_1_fu_635_p2 = (i1_0_reg_532 + 4'd1);

assign i_2_fu_733_p2 = (i2_0_reg_543 + 4'd1);

assign i_fu_599_p2 = (i_0_reg_520 + 4'd1);

assign icmp_ln20_fu_593_p2 = ((i_0_reg_520 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_629_p2 = ((i1_0_reg_532 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_727_p2 = ((i2_0_reg_543 == 4'd8) ? 1'b1 : 1'b0);

assign xor_ln22_fu_611_p2 = (i_0_reg_520 ^ 4'd8);

assign xor_ln40_fu_745_p2 = (i2_0_reg_543 ^ 4'd8);

assign xor_ln719_2_fu_756_p2 = (v_V_q0 ^ h_V_q0);

assign xor_ln719_fu_622_p2 = (v_V_q0 ^ 32'd64);

assign zext_ln21_fu_605_p1 = i_0_reg_520;

assign zext_ln22_fu_617_p1 = xor_ln22_fu_611_p2;

assign zext_ln29_fu_641_p1 = i1_0_reg_532;

assign zext_ln40_1_fu_751_p1 = xor_ln40_fu_745_p2;

assign zext_ln40_fu_739_p1 = i2_0_reg_543;

assign zext_ln544_10_fu_703_p1 = SIGMA_V_10_load_reg_936;

assign zext_ln544_11_fu_707_p1 = SIGMA_V_11_load_reg_941;

assign zext_ln544_12_fu_711_p1 = SIGMA_V_12_load_reg_946;

assign zext_ln544_13_fu_715_p1 = SIGMA_V_13_load_reg_951;

assign zext_ln544_14_fu_719_p1 = SIGMA_V_14_load_reg_956;

assign zext_ln544_15_fu_723_p1 = SIGMA_V_15_load_reg_961;

assign zext_ln544_1_fu_666_p1 = SIGMA_V_1_q0;

assign zext_ln544_2_fu_671_p1 = SIGMA_V_2_load_reg_896;

assign zext_ln544_3_fu_675_p1 = SIGMA_V_3_load_reg_901;

assign zext_ln544_4_fu_679_p1 = SIGMA_V_4_load_reg_906;

assign zext_ln544_5_fu_683_p1 = SIGMA_V_5_load_reg_911;

assign zext_ln544_6_fu_687_p1 = SIGMA_V_6_load_reg_916;

assign zext_ln544_7_fu_691_p1 = SIGMA_V_7_load_reg_921;

assign zext_ln544_8_fu_695_p1 = SIGMA_V_8_load_reg_926;

assign zext_ln544_9_fu_699_p1 = SIGMA_V_9_load_reg_931;

assign zext_ln544_fu_661_p1 = SIGMA_V_0_q0;

always @ (posedge ap_clk) begin
    zext_ln21_reg_777[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //compress
