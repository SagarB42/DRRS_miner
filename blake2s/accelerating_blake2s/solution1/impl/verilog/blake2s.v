// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="blake2s,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.825806,HLS_SYN_LAT=1469,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=726,HLS_SYN_LUT=7015,HLS_VERSION=2020_1}" *)

module blake2s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V,
        hash_V_address0,
        hash_V_ce0,
        hash_V_we0,
        hash_V_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] data_V;
output  [2:0] hash_V_address0;
output   hash_V_ce0;
output   hash_V_we0;
output  [31:0] hash_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hash_V_ce0;
reg hash_V_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] IV_V_address0;
reg    IV_V_ce0;
wire   [31:0] IV_V_q0;
wire   [3:0] i_fu_246_p2;
reg   [3:0] i_reg_420;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln47_fu_252_p1;
reg   [63:0] zext_ln47_reg_425;
wire   [0:0] icmp_ln46_fu_240_p2;
wire   [2:0] h_V_addr_reg_435;
wire    ap_CS_fsm_state4;
wire   [4:0] i_3_fu_270_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] i_4_fu_406_p2;
reg   [3:0] i_4_reg_457;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln59_fu_412_p1;
reg   [63:0] zext_ln59_reg_462;
wire   [0:0] icmp_ln58_fu_400_p2;
reg   [2:0] h_V_address0;
reg    h_V_ce0;
reg    h_V_we0;
reg   [31:0] h_V_d0;
wire   [31:0] h_V_q0;
reg   [3:0] m_V_address0;
reg    m_V_ce0;
reg    m_V_we0;
wire   [31:0] m_V_d0;
wire   [31:0] m_V_q0;
reg    m_V_ce1;
wire   [31:0] m_V_q1;
wire    grp_compress_fu_200_ap_start;
wire    grp_compress_fu_200_ap_done;
wire    grp_compress_fu_200_ap_idle;
wire    grp_compress_fu_200_ap_ready;
wire   [2:0] grp_compress_fu_200_h_V_address0;
wire    grp_compress_fu_200_h_V_ce0;
wire    grp_compress_fu_200_h_V_we0;
wire   [31:0] grp_compress_fu_200_h_V_d0;
wire   [3:0] grp_compress_fu_200_m_V_address0;
wire    grp_compress_fu_200_m_V_ce0;
wire   [3:0] grp_compress_fu_200_m_V_address1;
wire    grp_compress_fu_200_m_V_ce1;
reg   [3:0] i_0_reg_167;
wire    ap_CS_fsm_state3;
reg   [4:0] i2_0_reg_178;
wire   [0:0] icmp_ln52_fu_264_p2;
reg   [3:0] i3_0_reg_189;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
reg    grp_compress_fu_200_ap_start_reg;
wire   [63:0] zext_ln53_fu_276_p1;
wire   [31:0] xor_ln719_fu_257_p2;
wire   [3:0] trunc_ln53_fu_281_p1;
wire   [8:0] Lo_assign_fu_285_p3;
wire   [8:0] or_ln53_fu_293_p2;
wire   [9:0] zext_ln665_fu_305_p1;
wire   [9:0] zext_ln665_1_fu_309_p1;
wire   [0:0] icmp_ln665_fu_299_p2;
wire   [9:0] sub_ln665_fu_322_p2;
wire   [9:0] sub_ln665_1_fu_334_p2;
reg   [511:0] tmp_fu_313_p4;
wire   [9:0] xor_ln665_fu_328_p2;
wire   [9:0] select_ln665_fu_340_p3;
wire   [9:0] select_ln665_2_fu_355_p3;
wire   [9:0] sub_ln665_2_fu_363_p2;
wire   [511:0] select_ln665_1_fu_348_p3;
wire   [511:0] zext_ln665_2_fu_369_p1;
wire   [511:0] zext_ln665_3_fu_373_p1;
wire   [511:0] lshr_ln665_fu_377_p2;
wire   [511:0] lshr_ln665_1_fu_383_p2;
wire   [511:0] p_Result_s_fu_389_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_compress_fu_200_ap_start_reg = 1'b0;
end

compress_IV_V #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
IV_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IV_V_address0),
    .ce0(IV_V_ce0),
    .q0(IV_V_q0)
);

blake2s_h_V #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
h_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(h_V_address0),
    .ce0(h_V_ce0),
    .we0(h_V_we0),
    .d0(h_V_d0),
    .q0(h_V_q0)
);

blake2s_m_V #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
m_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_V_address0),
    .ce0(m_V_ce0),
    .we0(m_V_we0),
    .d0(m_V_d0),
    .q0(m_V_q0),
    .address1(grp_compress_fu_200_m_V_address1),
    .ce1(m_V_ce1),
    .q1(m_V_q1)
);

compress grp_compress_fu_200(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compress_fu_200_ap_start),
    .ap_done(grp_compress_fu_200_ap_done),
    .ap_idle(grp_compress_fu_200_ap_idle),
    .ap_ready(grp_compress_fu_200_ap_ready),
    .h_V_address0(grp_compress_fu_200_h_V_address0),
    .h_V_ce0(grp_compress_fu_200_h_V_ce0),
    .h_V_we0(grp_compress_fu_200_h_V_we0),
    .h_V_d0(grp_compress_fu_200_h_V_d0),
    .h_V_q0(h_V_q0),
    .m_V_address0(grp_compress_fu_200_m_V_address0),
    .m_V_ce0(grp_compress_fu_200_m_V_ce0),
    .m_V_q0(m_V_q0),
    .m_V_address1(grp_compress_fu_200_m_V_address1),
    .m_V_ce1(grp_compress_fu_200_m_V_ce1),
    .m_V_q1(m_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compress_fu_200_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln52_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_compress_fu_200_ap_start_reg <= 1'b1;
        end else if ((grp_compress_fu_200_ap_ready == 1'b1)) begin
            grp_compress_fu_200_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i2_0_reg_178 <= 5'd0;
    end else if (((icmp_ln52_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_0_reg_178 <= i_3_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i3_0_reg_189 <= i_4_reg_457;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_compress_fu_200_ap_done == 1'b1))) begin
        i3_0_reg_189 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_167 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_167 <= i_reg_420;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_4_reg_457 <= i_4_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_420 <= i_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln47_reg_425[3 : 0] <= zext_ln47_fu_252_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln59_reg_462[3 : 0] <= zext_ln59_fu_412_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IV_V_address0 = zext_ln47_fu_252_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        IV_V_address0 = 3'd0;
    end else begin
        IV_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IV_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        IV_V_ce0 = 1'b0;
    end else begin
        IV_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h_V_address0 = zext_ln59_fu_412_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        h_V_address0 = h_V_addr_reg_435;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        h_V_address0 = zext_ln47_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        h_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        h_V_address0 = grp_compress_fu_200_h_V_address0;
    end else begin
        h_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        h_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        h_V_ce0 = grp_compress_fu_200_h_V_ce0;
    end else begin
        h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        h_V_d0 = xor_ln719_fu_257_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        h_V_d0 = IV_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        h_V_d0 = grp_compress_fu_200_h_V_d0;
    end else begin
        h_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        h_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        h_V_we0 = grp_compress_fu_200_h_V_we0;
    end else begin
        h_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        hash_V_ce0 = 1'b1;
    end else begin
        hash_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        hash_V_we0 = 1'b1;
    end else begin
        hash_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_V_address0 = zext_ln53_fu_276_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_address0 = grp_compress_fu_200_m_V_address0;
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_ce0 = grp_compress_fu_200_m_V_ce0;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_ce1 = grp_compress_fu_200_m_V_ce1;
    end else begin
        m_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_V_we0 = 1'b1;
    end else begin
        m_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln46_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln52_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_compress_fu_200_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln58_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_285_p3 = {{trunc_ln53_fu_281_p1}, {5'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_compress_fu_200_ap_start = grp_compress_fu_200_ap_start_reg;

assign h_V_addr_reg_435 = 64'd0;

assign hash_V_address0 = zext_ln59_reg_462;

assign hash_V_d0 = h_V_q0;

assign i_3_fu_270_p2 = (i2_0_reg_178 + 5'd1);

assign i_4_fu_406_p2 = (i3_0_reg_189 + 4'd1);

assign i_fu_246_p2 = (i_0_reg_167 + 4'd1);

assign icmp_ln46_fu_240_p2 = ((i_0_reg_167 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_264_p2 = ((i2_0_reg_178 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_400_p2 = ((i3_0_reg_189 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln665_fu_299_p2 = ((Lo_assign_fu_285_p3 > or_ln53_fu_293_p2) ? 1'b1 : 1'b0);

assign lshr_ln665_1_fu_383_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln665_3_fu_373_p1;

assign lshr_ln665_fu_377_p2 = select_ln665_1_fu_348_p3 >> zext_ln665_2_fu_369_p1;

assign m_V_d0 = p_Result_s_fu_389_p2[31:0];

assign or_ln53_fu_293_p2 = (9'd31 | Lo_assign_fu_285_p3);

assign p_Result_s_fu_389_p2 = (lshr_ln665_fu_377_p2 & lshr_ln665_1_fu_383_p2);

assign select_ln665_1_fu_348_p3 = ((icmp_ln665_fu_299_p2[0:0] === 1'b1) ? tmp_fu_313_p4 : data_V);

assign select_ln665_2_fu_355_p3 = ((icmp_ln665_fu_299_p2[0:0] === 1'b1) ? xor_ln665_fu_328_p2 : zext_ln665_fu_305_p1);

assign select_ln665_fu_340_p3 = ((icmp_ln665_fu_299_p2[0:0] === 1'b1) ? sub_ln665_fu_322_p2 : sub_ln665_1_fu_334_p2);

assign sub_ln665_1_fu_334_p2 = (zext_ln665_1_fu_309_p1 - zext_ln665_fu_305_p1);

assign sub_ln665_2_fu_363_p2 = (10'd511 - select_ln665_fu_340_p3);

assign sub_ln665_fu_322_p2 = (zext_ln665_fu_305_p1 - zext_ln665_1_fu_309_p1);

integer ap_tvar_int_0;

always @ (data_V) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_fu_313_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_313_p4[ap_tvar_int_0] = data_V[511 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln53_fu_281_p1 = i2_0_reg_178[3:0];

assign xor_ln665_fu_328_p2 = (zext_ln665_fu_305_p1 ^ 10'd511);

assign xor_ln719_fu_257_p2 = (h_V_q0 ^ 32'd16842784);

assign zext_ln47_fu_252_p1 = i_0_reg_167;

assign zext_ln53_fu_276_p1 = i2_0_reg_178;

assign zext_ln59_fu_412_p1 = i3_0_reg_189;

assign zext_ln665_1_fu_309_p1 = or_ln53_fu_293_p2;

assign zext_ln665_2_fu_369_p1 = select_ln665_2_fu_355_p3;

assign zext_ln665_3_fu_373_p1 = sub_ln665_2_fu_363_p2;

assign zext_ln665_fu_305_p1 = Lo_assign_fu_285_p3;

always @ (posedge ap_clk) begin
    zext_ln47_reg_425[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln59_reg_462[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //blake2s
