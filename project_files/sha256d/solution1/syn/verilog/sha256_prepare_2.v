// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_prepare_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        data_V_address0,
        data_V_ce0,
        data_V_we0,
        data_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] input_V_address0;
output   input_V_ce0;
input  [31:0] input_V_q0;
output  [5:0] data_V_address0;
output   data_V_ce0;
output   data_V_we0;
output  [7:0] data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg data_V_ce0;
reg data_V_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_2_fu_187_p2;
reg   [5:0] i_2_reg_337;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln134_fu_181_p2;
wire   [5:0] i_fu_257_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln140_fu_246_p2;
wire   [3:0] i_3_fu_269_p2;
wire    ap_CS_fsm_state5;
wire   [6:0] i_4_fu_323_p2;
reg   [6:0] i_4_reg_366;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln151_fu_329_p1;
reg   [63:0] zext_ln151_reg_371;
wire   [0:0] icmp_ln150_fu_317_p2;
reg   [5:0] data1_V_address0;
reg    data1_V_ce0;
reg    data1_V_we0;
reg   [7:0] data1_V_d0;
wire   [7:0] data1_V_q0;
reg   [5:0] i_0_reg_136;
wire    ap_CS_fsm_state3;
reg   [5:0] i1_0_reg_148;
reg   [3:0] i2_0_reg_159;
wire   [0:0] icmp_ln146_fu_263_p2;
reg   [6:0] i3_0_reg_170;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln135_1_fu_203_p1;
wire   [63:0] zext_ln135_fu_208_p1;
wire   [63:0] zext_ln141_fu_252_p1;
wire   [63:0] zext_ln147_fu_285_p1;
wire   [7:0] trunc_ln1503_fu_241_p1;
wire   [7:0] trunc_ln1503_19_fu_312_p1;
wire   [2:0] trunc_ln135_1_fu_193_p4;
wire   [1:0] trunc_ln135_fu_213_p1;
wire   [4:0] shl_ln_fu_217_p3;
wire   [4:0] sub_ln135_fu_225_p2;
wire   [31:0] zext_ln135_2_fu_231_p1;
wire   [31:0] lshr_ln1503_fu_235_p2;
wire   [3:0] xor_ln147_fu_275_p2;
wire  signed [5:0] sext_ln147_fu_281_p1;
wire   [2:0] trunc_ln147_fu_290_p1;
wire   [5:0] op2_assign_1_fu_294_p3;
wire   [8:0] zext_ln1503_fu_302_p1;
wire   [8:0] lshr_ln1503_1_fu_306_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

sha256_prepare_2_eOg #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
data1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data1_V_address0),
    .ce0(data1_V_ce0),
    .we0(data1_V_we0),
    .d0(data1_V_d0),
    .q0(data1_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln140_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i1_0_reg_148 <= i_fu_257_p2;
    end else if (((icmp_ln134_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_148 <= 6'd33;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln140_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_0_reg_159 <= 4'd0;
    end else if (((icmp_ln146_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_0_reg_159 <= i_3_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln146_fu_263_p2 == 1'd1))) begin
        i3_0_reg_170 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i3_0_reg_170 <= i_4_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_136 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_136 <= i_2_reg_337;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_337 <= i_2_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_4_reg_366 <= i_4_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln151_reg_371[6 : 0] <= zext_ln151_fu_329_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln150_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data1_V_address0 = zext_ln151_fu_329_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        data1_V_address0 = zext_ln147_fu_285_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data1_V_address0 = zext_ln141_fu_252_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data1_V_address0 = zext_ln135_fu_208_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data1_V_address0 = 64'd32;
    end else begin
        data1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        data1_V_ce0 = 1'b1;
    end else begin
        data1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data1_V_d0 = trunc_ln1503_19_fu_312_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data1_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data1_V_d0 = trunc_ln1503_fu_241_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data1_V_d0 = 8'd128;
    end else begin
        data1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln146_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln140_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln134_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        data1_V_we0 = 1'b1;
    end else begin
        data1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln134_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln140_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln146_fu_263_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln150_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign data_V_address0 = zext_ln151_reg_371;

assign data_V_d0 = data1_V_q0;

assign i_2_fu_187_p2 = (i_0_reg_136 + 6'd1);

assign i_3_fu_269_p2 = (i2_0_reg_159 + 4'd1);

assign i_4_fu_323_p2 = (i3_0_reg_170 + 7'd1);

assign i_fu_257_p2 = (i1_0_reg_148 + 6'd1);

assign icmp_ln134_fu_181_p2 = ((i_0_reg_136 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_246_p2 = ((i1_0_reg_148 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln146_fu_263_p2 = ((i2_0_reg_159 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_317_p2 = ((i3_0_reg_170 == 7'd64) ? 1'b1 : 1'b0);

assign input_V_address0 = zext_ln135_1_fu_203_p1;

assign lshr_ln1503_1_fu_306_p2 = 9'd256 >> zext_ln1503_fu_302_p1;

assign lshr_ln1503_fu_235_p2 = input_V_q0 >> zext_ln135_2_fu_231_p1;

assign op2_assign_1_fu_294_p3 = {{trunc_ln147_fu_290_p1}, {3'd0}};

assign sext_ln147_fu_281_p1 = $signed(xor_ln147_fu_275_p2);

assign shl_ln_fu_217_p3 = {{trunc_ln135_fu_213_p1}, {3'd0}};

assign sub_ln135_fu_225_p2 = ($signed(5'd24) - $signed(shl_ln_fu_217_p3));

assign trunc_ln135_1_fu_193_p4 = {{i_0_reg_136[4:2]}};

assign trunc_ln135_fu_213_p1 = i_0_reg_136[1:0];

assign trunc_ln147_fu_290_p1 = i2_0_reg_159[2:0];

assign trunc_ln1503_19_fu_312_p1 = lshr_ln1503_1_fu_306_p2[7:0];

assign trunc_ln1503_fu_241_p1 = lshr_ln1503_fu_235_p2[7:0];

assign xor_ln147_fu_275_p2 = (i2_0_reg_159 ^ 4'd15);

assign zext_ln135_1_fu_203_p1 = trunc_ln135_1_fu_193_p4;

assign zext_ln135_2_fu_231_p1 = sub_ln135_fu_225_p2;

assign zext_ln135_fu_208_p1 = i_0_reg_136;

assign zext_ln141_fu_252_p1 = i1_0_reg_148;

assign zext_ln147_fu_285_p1 = $unsigned(sext_ln147_fu_281_p1);

assign zext_ln1503_fu_302_p1 = op2_assign_1_fu_294_p3;

assign zext_ln151_fu_329_p1 = i3_0_reg_170;

always @ (posedge ap_clk) begin
    zext_ln151_reg_371[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha256_prepare_2
