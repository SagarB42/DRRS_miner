// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_V_address0,
        state_V_ce0,
        state_V_we0,
        state_V_d0,
        state_V_q0,
        state_V_address1,
        state_V_ce1,
        state_V_we1,
        state_V_d1,
        state_V_q1,
        data_V_address0,
        data_V_ce0,
        data_V_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] state_V_address0;
output   state_V_ce0;
output   state_V_we0;
output  [31:0] state_V_d0;
input  [31:0] state_V_q0;
output  [2:0] state_V_address1;
output   state_V_ce1;
output   state_V_we1;
output  [31:0] state_V_d1;
input  [31:0] state_V_q1;
output  [5:0] data_V_address0;
output   data_V_ce0;
input  [7:0] data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] state_V_address0;
reg state_V_ce0;
reg state_V_we0;
reg[31:0] state_V_d0;
reg[2:0] state_V_address1;
reg state_V_ce1;
reg state_V_we1;
reg[31:0] state_V_d1;
reg data_V_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] K_V_address0;
reg    K_V_ce0;
wire   [31:0] K_V_q0;
wire   [4:0] add_ln700_fu_433_p2;
reg   [4:0] add_ln700_reg_999;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_427_p2;
wire   [6:0] j_V_fu_454_p2;
reg   [6:0] j_V_reg_1009;
wire   [5:0] trunc_ln215_1_fu_476_p1;
reg   [5:0] trunc_ln215_1_reg_1017;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln38_fu_470_p2;
wire   [2:0] state_V_addr_1_reg_1033;
wire   [31:0] m_V_q0;
reg   [31:0] m_V_load_reg_1038;
wire    ap_CS_fsm_state5;
wire   [31:0] m_V_q1;
reg   [31:0] m_V_load_1_reg_1047;
wire   [6:0] i_V_fu_680_p2;
wire    ap_CS_fsm_state6;
reg   [31:0] a_V_reg_1067;
wire    ap_CS_fsm_state7;
reg   [31:0] b_V_reg_1073;
wire   [2:0] state_V_addr_2_reg_1079;
wire   [2:0] state_V_addr_3_reg_1084;
reg   [31:0] c_V_reg_1089;
wire    ap_CS_fsm_state8;
reg   [31:0] d_V_reg_1095;
wire   [2:0] state_V_addr_4_reg_1101;
wire   [2:0] state_V_addr_5_reg_1106;
reg   [31:0] e_V_reg_1111;
wire    ap_CS_fsm_state9;
reg   [31:0] f_V_reg_1117;
wire   [2:0] state_V_addr_6_reg_1123;
wire   [2:0] state_V_addr_7_reg_1128;
reg   [31:0] g_V_reg_1133;
wire    ap_CS_fsm_state10;
reg   [31:0] h_V_reg_1139;
wire   [6:0] i_V_1_fu_692_p2;
reg   [6:0] i_V_1_reg_1148;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln887_1_fu_686_p2;
wire   [31:0] add_ln209_5_fu_812_p2;
reg   [31:0] add_ln209_5_reg_1163;
wire   [31:0] ret_V_25_fu_836_p2;
reg   [31:0] ret_V_25_reg_1168;
wire   [31:0] add_ln700_5_fu_854_p2;
reg   [31:0] add_ln700_5_reg_1173;
wire   [31:0] add_ln700_7_fu_859_p2;
reg   [31:0] add_ln700_7_reg_1178;
wire   [31:0] add_ln700_8_fu_864_p2;
reg   [31:0] add_ln700_8_reg_1183;
wire   [31:0] add_ln700_9_fu_869_p2;
reg   [31:0] add_ln700_9_reg_1188;
wire   [31:0] add_ln700_10_fu_874_p2;
reg   [31:0] add_ln700_10_reg_1193;
wire   [31:0] e_V_1_fu_968_p2;
wire    ap_CS_fsm_state12;
wire   [31:0] a_V_1_fu_980_p2;
reg   [5:0] m_V_address0;
reg    m_V_ce0;
reg    m_V_we0;
wire   [31:0] m_V_d0;
reg   [5:0] m_V_address1;
reg    m_V_ce1;
reg    m_V_we1;
wire   [31:0] m_V_d1;
reg   [6:0] p_0262_0_reg_296;
wire    ap_CS_fsm_state3;
reg   [4:0] p_01115_0_reg_307;
reg   [6:0] p_01115_1_reg_319;
reg   [6:0] p_01115_2_reg_331;
reg   [31:0] lhs_V_10_reg_342;
reg   [31:0] rhs_V_16_reg_352;
reg   [31:0] rhs_V_17_reg_363;
reg   [31:0] p_01587_0_reg_374;
reg   [31:0] lhs_V_reg_385;
reg   [31:0] rhs_V_reg_395;
reg   [31:0] rhs_V_15_reg_406;
reg   [31:0] p_01439_0_reg_417;
wire   [63:0] zext_ln544_1_fu_449_p1;
wire   [63:0] zext_ln544_fu_460_p1;
wire   [63:0] zext_ln544_3_fu_486_p1;
wire   [63:0] zext_ln544_4_fu_497_p1;
wire   [63:0] zext_ln544_5_fu_507_p1;
wire   [63:0] zext_ln544_7_fu_517_p1;
wire   [63:0] zext_ln544_2_fu_522_p1;
wire   [63:0] zext_ln544_6_fu_800_p1;
wire   [31:0] add_ln700_3_fu_842_p2;
wire   [31:0] add_ln700_4_fu_848_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln700_6_fu_985_p2;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [5:0] trunc_ln215_fu_439_p1;
wire   [5:0] ret_V_fu_443_p2;
wire   [5:0] ret_V_2_fu_480_p2;
wire   [5:0] ret_V_6_fu_491_p2;
wire   [5:0] ret_V_7_fu_502_p2;
wire   [5:0] ret_V_11_fu_512_p2;
wire   [16:0] trunc_ln1503_fu_536_p1;
wire   [14:0] r_V_fu_527_p4;
wire   [18:0] trunc_ln1503_1_fu_556_p1;
wire   [12:0] r_V_s_fu_547_p4;
wire   [21:0] r_V_1_fu_567_p4;
wire   [31:0] r_V_14_fu_576_p1;
wire   [31:0] ret_V_27_fu_559_p3;
wire   [31:0] xor_ln1357_fu_580_p2;
wire   [31:0] ret_V_26_fu_539_p3;
wire   [6:0] trunc_ln1503_2_fu_602_p1;
wire   [24:0] r_V_2_fu_592_p4;
wire   [17:0] trunc_ln1503_3_fu_624_p1;
wire   [13:0] r_V_3_fu_614_p4;
wire   [28:0] r_V_4_fu_636_p4;
wire   [31:0] r_V_15_fu_646_p1;
wire   [31:0] ret_V_29_fu_628_p3;
wire   [31:0] xor_ln1357_2_fu_650_p2;
wire   [31:0] ret_V_28_fu_606_p3;
wire   [31:0] ret_V_5_fu_586_p2;
wire   [31:0] ret_V_10_fu_656_p2;
wire   [31:0] add_ln209_1_fu_667_p2;
wire   [31:0] add_ln209_fu_662_p2;
wire   [5:0] trunc_ln1503_4_fu_708_p1;
wire   [25:0] r_V_5_fu_698_p4;
wire   [10:0] trunc_ln1503_5_fu_730_p1;
wire   [20:0] r_V_6_fu_720_p4;
wire   [24:0] trunc_ln1503_6_fu_752_p1;
wire   [6:0] r_V_7_fu_742_p4;
wire   [31:0] ret_V_30_fu_712_p3;
wire   [31:0] ret_V_31_fu_734_p3;
wire   [31:0] xor_ln1357_4_fu_764_p2;
wire   [31:0] ret_V_32_fu_756_p3;
wire   [31:0] r_V_16_fu_782_p2;
wire   [31:0] ret_V_34_fu_788_p2;
wire   [31:0] ret_V_33_fu_776_p2;
wire   [31:0] ret_V_18_fu_794_p2;
wire   [31:0] ret_V_15_fu_770_p2;
wire   [31:0] add_ln209_4_fu_806_p2;
wire   [31:0] xor_ln1357_9_fu_818_p2;
wire   [31:0] ret_V_38_fu_824_p2;
wire   [31:0] ret_V_39_fu_830_p2;
wire   [31:0] add_ln209_3_fu_879_p2;
wire   [1:0] trunc_ln1503_7_fu_900_p1;
wire   [29:0] r_V_8_fu_890_p4;
wire   [12:0] trunc_ln1503_8_fu_922_p1;
wire   [18:0] r_V_9_fu_912_p4;
wire   [21:0] trunc_ln1503_9_fu_944_p1;
wire   [9:0] r_V_10_fu_934_p4;
wire   [31:0] ret_V_35_fu_904_p3;
wire   [31:0] ret_V_36_fu_926_p3;
wire   [31:0] xor_ln1357_7_fu_956_p2;
wire   [31:0] ret_V_37_fu_948_p3;
wire   [31:0] t1_V_fu_885_p2;
wire   [31:0] ret_V_22_fu_962_p2;
wire   [31:0] add_ln209_8_fu_974_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

sha256_transform_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
K_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K_V_address0),
    .ce0(K_V_ce0),
    .q0(K_V_q0)
);

sha256_transform_cud #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
m_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_V_address0),
    .ce0(m_V_ce0),
    .we0(m_V_we0),
    .d0(m_V_d0),
    .q0(m_V_q0),
    .address1(m_V_address1),
    .ce1(m_V_ce1),
    .we1(m_V_we1),
    .d1(m_V_d1),
    .q1(m_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        lhs_V_10_reg_342 <= a_V_1_fu_980_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lhs_V_10_reg_342 <= a_V_reg_1067;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        lhs_V_reg_385 <= e_V_1_fu_968_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lhs_V_reg_385 <= e_V_reg_1111;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_01115_0_reg_307 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_01115_0_reg_307 <= add_ln700_reg_999;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_01115_1_reg_319 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_01115_1_reg_319 <= i_V_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_01115_2_reg_331 <= i_V_1_reg_1148;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_01115_2_reg_331 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_01439_0_reg_417 <= rhs_V_15_reg_406;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_01439_0_reg_417 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_01587_0_reg_374 <= rhs_V_17_reg_363;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_01587_0_reg_374 <= d_V_reg_1095;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0262_0_reg_296 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_0262_0_reg_296 <= j_V_reg_1009;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_15_reg_406 <= rhs_V_reg_395;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_15_reg_406 <= state_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_16_reg_352 <= lhs_V_10_reg_342;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_16_reg_352 <= b_V_reg_1073;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_17_reg_363 <= rhs_V_16_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_17_reg_363 <= c_V_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_reg_395 <= lhs_V_reg_385;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_reg_395 <= f_V_reg_1117;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_V_reg_1067 <= state_V_q0;
        b_V_reg_1073 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_686_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln209_5_reg_1163 <= add_ln209_5_fu_812_p2;
        ret_V_25_reg_1168 <= ret_V_25_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_686_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln700_10_reg_1193 <= add_ln700_10_fu_874_p2;
        add_ln700_5_reg_1173 <= add_ln700_5_fu_854_p2;
        add_ln700_7_reg_1178 <= add_ln700_7_fu_859_p2;
        add_ln700_8_reg_1183 <= add_ln700_8_fu_864_p2;
        add_ln700_9_reg_1188 <= add_ln700_9_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln700_reg_999 <= add_ln700_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_V_reg_1089 <= state_V_q0;
        d_V_reg_1095 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        e_V_reg_1111 <= state_V_q0;
        f_V_reg_1117 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        g_V_reg_1133 <= state_V_q0;
        h_V_reg_1139 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_V_1_reg_1148 <= i_V_1_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_V_reg_1009 <= j_V_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_V_load_1_reg_1047 <= m_V_q1;
        m_V_load_reg_1038 <= m_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_470_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        trunc_ln215_1_reg_1017 <= trunc_ln215_1_fu_476_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        K_V_ce0 = 1'b1;
    end else begin
        K_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        m_V_address0 = zext_ln544_6_fu_800_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_V_address0 = zext_ln544_7_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_V_address0 = zext_ln544_3_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_V_address0 = zext_ln544_fu_460_p1;
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_address1 = zext_ln544_2_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_V_address1 = zext_ln544_5_fu_507_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_V_address1 = zext_ln544_4_fu_497_p1;
    end else begin
        m_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        m_V_ce1 = 1'b1;
    end else begin
        m_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_V_we0 = 1'b1;
    end else begin
        m_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_we1 = 1'b1;
    end else begin
        m_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_address0 = state_V_addr_6_reg_1123;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_address0 = state_V_addr_4_reg_1101;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_address0 = state_V_addr_2_reg_1079;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_V_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11))) begin
        state_V_address0 = 64'd0;
    end else begin
        state_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_address1 = state_V_addr_7_reg_1128;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_address1 = state_V_addr_5_reg_1106;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_address1 = state_V_addr_3_reg_1084;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_V_address1 = state_V_addr_1_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_V_address1 = 64'd1;
    end else begin
        state_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        state_V_ce0 = 1'b1;
    end else begin
        state_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        state_V_ce1 = 1'b1;
    end else begin
        state_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_d0 = add_ln700_9_reg_1188;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_d0 = add_ln700_7_reg_1178;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_d0 = add_ln700_5_reg_1173;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_V_d0 = add_ln700_3_fu_842_p2;
    end else begin
        state_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_d1 = add_ln700_10_reg_1193;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_d1 = add_ln700_8_reg_1183;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_d1 = add_ln700_6_fu_985_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_V_d1 = add_ln700_4_fu_848_p2;
    end else begin
        state_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln887_1_fu_686_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        state_V_we0 = 1'b1;
    end else begin
        state_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln887_1_fu_686_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        state_V_we1 = 1'b1;
    end else begin
        state_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln38_fu_470_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln887_1_fu_686_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_V_address0 = zext_ln544_6_fu_800_p1;

assign a_V_1_fu_980_p2 = (add_ln209_8_fu_974_p2 + ret_V_25_reg_1168);

assign add_ln209_1_fu_667_p2 = (ret_V_5_fu_586_p2 + ret_V_10_fu_656_p2);

assign add_ln209_3_fu_879_p2 = (K_V_q0 + m_V_q0);

assign add_ln209_4_fu_806_p2 = (ret_V_18_fu_794_p2 + ret_V_15_fu_770_p2);

assign add_ln209_5_fu_812_p2 = (add_ln209_4_fu_806_p2 + p_01439_0_reg_417);

assign add_ln209_8_fu_974_p2 = (ret_V_22_fu_962_p2 + t1_V_fu_885_p2);

assign add_ln209_fu_662_p2 = (m_V_load_1_reg_1047 + m_V_q0);

assign add_ln700_10_fu_874_p2 = (h_V_reg_1139 + p_01439_0_reg_417);

assign add_ln700_3_fu_842_p2 = (a_V_reg_1067 + lhs_V_10_reg_342);

assign add_ln700_4_fu_848_p2 = (b_V_reg_1073 + rhs_V_16_reg_352);

assign add_ln700_5_fu_854_p2 = (c_V_reg_1089 + rhs_V_17_reg_363);

assign add_ln700_6_fu_985_p2 = (d_V_reg_1095 + p_01587_0_reg_374);

assign add_ln700_7_fu_859_p2 = (e_V_reg_1111 + lhs_V_reg_385);

assign add_ln700_8_fu_864_p2 = (f_V_reg_1117 + rhs_V_reg_395);

assign add_ln700_9_fu_869_p2 = (g_V_reg_1133 + rhs_V_15_reg_406);

assign add_ln700_fu_433_p2 = (p_01115_0_reg_307 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_V_address0 = zext_ln544_1_fu_449_p1;

assign e_V_1_fu_968_p2 = (t1_V_fu_885_p2 + p_01587_0_reg_374);

assign i_V_1_fu_692_p2 = (p_01115_2_reg_331 + 7'd1);

assign i_V_fu_680_p2 = (7'd1 + p_01115_1_reg_319);

assign icmp_ln38_fu_470_p2 = ((p_01115_1_reg_319 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_686_p2 = ((p_01115_2_reg_331 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_427_p2 = ((p_01115_0_reg_307 == 5'd16) ? 1'b1 : 1'b0);

assign j_V_fu_454_p2 = (7'd4 + p_0262_0_reg_296);

assign m_V_d0 = data_V_q0;

assign m_V_d1 = (add_ln209_1_fu_667_p2 + add_ln209_fu_662_p2);

assign r_V_10_fu_934_p4 = {{lhs_V_10_reg_342[31:22]}};

assign r_V_14_fu_576_p1 = r_V_1_fu_567_p4;

assign r_V_15_fu_646_p1 = r_V_4_fu_636_p4;

assign r_V_16_fu_782_p2 = (lhs_V_reg_385 ^ 32'd4294967295);

assign r_V_1_fu_567_p4 = {{m_V_load_reg_1038[31:10]}};

assign r_V_2_fu_592_p4 = {{m_V_q1[31:7]}};

assign r_V_3_fu_614_p4 = {{m_V_q1[31:18]}};

assign r_V_4_fu_636_p4 = {{m_V_q1[31:3]}};

assign r_V_5_fu_698_p4 = {{lhs_V_reg_385[31:6]}};

assign r_V_6_fu_720_p4 = {{lhs_V_reg_385[31:11]}};

assign r_V_7_fu_742_p4 = {{lhs_V_reg_385[31:25]}};

assign r_V_8_fu_890_p4 = {{lhs_V_10_reg_342[31:2]}};

assign r_V_9_fu_912_p4 = {{lhs_V_10_reg_342[31:13]}};

assign r_V_fu_527_p4 = {{m_V_load_reg_1038[31:17]}};

assign r_V_s_fu_547_p4 = {{m_V_load_reg_1038[31:19]}};

assign ret_V_10_fu_656_p2 = (xor_ln1357_2_fu_650_p2 ^ ret_V_28_fu_606_p3);

assign ret_V_11_fu_512_p2 = ($signed(6'd48) + $signed(trunc_ln215_1_reg_1017));

assign ret_V_15_fu_770_p2 = (xor_ln1357_4_fu_764_p2 ^ ret_V_32_fu_756_p3);

assign ret_V_18_fu_794_p2 = (ret_V_34_fu_788_p2 ^ ret_V_33_fu_776_p2);

assign ret_V_22_fu_962_p2 = (xor_ln1357_7_fu_956_p2 ^ ret_V_37_fu_948_p3);

assign ret_V_25_fu_836_p2 = (ret_V_39_fu_830_p2 ^ ret_V_38_fu_824_p2);

assign ret_V_26_fu_539_p3 = {{trunc_ln1503_fu_536_p1}, {r_V_fu_527_p4}};

assign ret_V_27_fu_559_p3 = {{trunc_ln1503_1_fu_556_p1}, {r_V_s_fu_547_p4}};

assign ret_V_28_fu_606_p3 = {{trunc_ln1503_2_fu_602_p1}, {r_V_2_fu_592_p4}};

assign ret_V_29_fu_628_p3 = {{trunc_ln1503_3_fu_624_p1}, {r_V_3_fu_614_p4}};

assign ret_V_2_fu_480_p2 = ($signed(6'd62) + $signed(trunc_ln215_1_fu_476_p1));

assign ret_V_30_fu_712_p3 = {{trunc_ln1503_4_fu_708_p1}, {r_V_5_fu_698_p4}};

assign ret_V_31_fu_734_p3 = {{trunc_ln1503_5_fu_730_p1}, {r_V_6_fu_720_p4}};

assign ret_V_32_fu_756_p3 = {{trunc_ln1503_6_fu_752_p1}, {r_V_7_fu_742_p4}};

assign ret_V_33_fu_776_p2 = (rhs_V_reg_395 & lhs_V_reg_385);

assign ret_V_34_fu_788_p2 = (rhs_V_15_reg_406 & r_V_16_fu_782_p2);

assign ret_V_35_fu_904_p3 = {{trunc_ln1503_7_fu_900_p1}, {r_V_8_fu_890_p4}};

assign ret_V_36_fu_926_p3 = {{trunc_ln1503_8_fu_922_p1}, {r_V_9_fu_912_p4}};

assign ret_V_37_fu_948_p3 = {{trunc_ln1503_9_fu_944_p1}, {r_V_10_fu_934_p4}};

assign ret_V_38_fu_824_p2 = (xor_ln1357_9_fu_818_p2 & lhs_V_10_reg_342);

assign ret_V_39_fu_830_p2 = (rhs_V_17_reg_363 & rhs_V_16_reg_352);

assign ret_V_5_fu_586_p2 = (xor_ln1357_fu_580_p2 ^ ret_V_26_fu_539_p3);

assign ret_V_6_fu_491_p2 = ($signed(6'd57) + $signed(trunc_ln215_1_fu_476_p1));

assign ret_V_7_fu_502_p2 = ($signed(6'd49) + $signed(trunc_ln215_1_reg_1017));

assign ret_V_fu_443_p2 = (trunc_ln215_fu_439_p1 | 6'd3);

assign state_V_addr_1_reg_1033 = 64'd1;

assign state_V_addr_2_reg_1079 = 64'd2;

assign state_V_addr_3_reg_1084 = 64'd3;

assign state_V_addr_4_reg_1101 = 64'd4;

assign state_V_addr_5_reg_1106 = 64'd5;

assign state_V_addr_6_reg_1123 = 64'd6;

assign state_V_addr_7_reg_1128 = 64'd7;

assign t1_V_fu_885_p2 = (add_ln209_5_reg_1163 + add_ln209_3_fu_879_p2);

assign trunc_ln1503_1_fu_556_p1 = m_V_load_reg_1038[18:0];

assign trunc_ln1503_2_fu_602_p1 = m_V_q1[6:0];

assign trunc_ln1503_3_fu_624_p1 = m_V_q1[17:0];

assign trunc_ln1503_4_fu_708_p1 = lhs_V_reg_385[5:0];

assign trunc_ln1503_5_fu_730_p1 = lhs_V_reg_385[10:0];

assign trunc_ln1503_6_fu_752_p1 = lhs_V_reg_385[24:0];

assign trunc_ln1503_7_fu_900_p1 = lhs_V_10_reg_342[1:0];

assign trunc_ln1503_8_fu_922_p1 = lhs_V_10_reg_342[12:0];

assign trunc_ln1503_9_fu_944_p1 = lhs_V_10_reg_342[21:0];

assign trunc_ln1503_fu_536_p1 = m_V_load_reg_1038[16:0];

assign trunc_ln215_1_fu_476_p1 = p_01115_1_reg_319[5:0];

assign trunc_ln215_fu_439_p1 = p_0262_0_reg_296[5:0];

assign xor_ln1357_2_fu_650_p2 = (ret_V_29_fu_628_p3 ^ r_V_15_fu_646_p1);

assign xor_ln1357_4_fu_764_p2 = (ret_V_31_fu_734_p3 ^ ret_V_30_fu_712_p3);

assign xor_ln1357_7_fu_956_p2 = (ret_V_36_fu_926_p3 ^ ret_V_35_fu_904_p3);

assign xor_ln1357_9_fu_818_p2 = (rhs_V_17_reg_363 ^ rhs_V_16_reg_352);

assign xor_ln1357_fu_580_p2 = (ret_V_27_fu_559_p3 ^ r_V_14_fu_576_p1);

assign zext_ln544_1_fu_449_p1 = ret_V_fu_443_p2;

assign zext_ln544_2_fu_522_p1 = p_01115_1_reg_319;

assign zext_ln544_3_fu_486_p1 = ret_V_2_fu_480_p2;

assign zext_ln544_4_fu_497_p1 = ret_V_6_fu_491_p2;

assign zext_ln544_5_fu_507_p1 = ret_V_7_fu_502_p2;

assign zext_ln544_6_fu_800_p1 = p_01115_2_reg_331;

assign zext_ln544_7_fu_517_p1 = ret_V_11_fu_512_p2;

assign zext_ln544_fu_460_p1 = p_01115_0_reg_307;

endmodule //sha256_transform
