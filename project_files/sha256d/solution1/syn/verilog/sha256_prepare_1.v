// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_prepare_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        data_V_address0,
        data_V_ce0,
        data_V_we0,
        data_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [6:0] data_V_address0;
output   data_V_ce0;
output   data_V_we0;
output  [7:0] data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg[6:0] data_V_address0;
reg data_V_ce0;
reg data_V_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_207_p2;
reg   [6:0] i_reg_331;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln92_fu_213_p1;
reg   [63:0] zext_ln92_reg_336;
wire   [0:0] icmp_ln91_fu_201_p2;
wire   [7:0] i_5_fu_229_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln97_fu_218_p2;
wire   [3:0] i_6_fu_241_p2;
wire    ap_CS_fsm_state5;
wire   [6:0] i_7_fu_295_p2;
reg   [6:0] i_7_reg_365;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln109_fu_301_p1;
reg   [63:0] zext_ln109_reg_370;
wire   [0:0] icmp_ln108_fu_289_p2;
wire   [6:0] i_8_fu_312_p2;
reg   [6:0] i_8_reg_383;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln111_fu_306_p2;
reg   [6:0] data1_V_address0;
reg    data1_V_ce0;
reg    data1_V_we0;
reg   [7:0] data1_V_d0;
wire   [7:0] data1_V_q0;
reg   [6:0] i_0_reg_138;
wire    ap_CS_fsm_state3;
reg   [7:0] i1_0_reg_149;
reg   [3:0] i2_0_reg_160;
wire   [0:0] icmp_ln103_fu_235_p2;
reg   [6:0] i3_0_reg_171;
wire    ap_CS_fsm_state7;
wire   [6:0] ap_phi_mux_i4_0_phi_fu_186_p4;
reg   [6:0] i4_0_reg_182;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln98_fu_224_p1;
wire   [63:0] zext_ln104_fu_257_p1;
wire   [63:0] zext_ln112_fu_318_p1;
wire   [63:0] zext_ln321_fu_323_p1;
wire   [7:0] trunc_ln1503_fu_284_p1;
reg   [6:0] grp_fu_194_p0;
wire   [3:0] xor_ln104_fu_247_p2;
wire  signed [6:0] sext_ln104_fu_253_p1;
wire   [2:0] trunc_ln104_fu_262_p1;
wire   [5:0] op2_assign_fu_266_p3;
wire   [9:0] zext_ln1503_fu_274_p1;
wire   [9:0] lshr_ln1503_fu_278_p2;
wire   [6:0] grp_fu_194_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

sha256_prepare_1_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data1_V_address0),
    .ce0(data1_V_ce0),
    .we0(data1_V_we0),
    .d0(data1_V_d0),
    .q0(data1_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i1_0_reg_149 <= i_5_fu_229_p2;
    end else if (((icmp_ln91_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_149 <= 8'd81;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_0_reg_160 <= 4'd0;
    end else if (((icmp_ln103_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_0_reg_160 <= i_6_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln103_fu_235_p2 == 1'd1))) begin
        i3_0_reg_171 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i3_0_reg_171 <= i_7_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i4_0_reg_182 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i4_0_reg_182 <= i_8_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_138 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_138 <= i_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_7_reg_365 <= i_7_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_8_reg_383 <= i_8_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_331 <= i_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln109_reg_370[6 : 0] <= zext_ln109_fu_301_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln92_reg_336[6 : 0] <= zext_ln92_fu_213_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln111_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data1_V_address0 = zext_ln112_fu_318_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data1_V_address0 = zext_ln109_fu_301_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        data1_V_address0 = zext_ln104_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data1_V_address0 = zext_ln98_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data1_V_address0 = zext_ln92_reg_336;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data1_V_address0 = 64'd80;
    end else begin
        data1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        data1_V_ce0 = 1'b1;
    end else begin
        data1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data1_V_d0 = trunc_ln1503_fu_284_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data1_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        data1_V_d0 = input_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data1_V_d0 = 8'd128;
    end else begin
        data1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln103_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln97_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln91_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        data1_V_we0 = 1'b1;
    end else begin
        data1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_V_address0 = zext_ln321_fu_323_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_V_address0 = zext_ln109_reg_370;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_194_p0 = i4_0_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_194_p0 = ap_phi_mux_i4_0_phi_fu_186_p4;
    end else begin
        grp_fu_194_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln91_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln97_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln103_fu_235_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln108_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln111_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_i4_0_phi_fu_186_p4 = i4_0_reg_182;

assign data_V_d0 = data1_V_q0;

assign grp_fu_194_p2 = (grp_fu_194_p0 ^ 7'd64);

assign i_5_fu_229_p2 = (i1_0_reg_149 + 8'd1);

assign i_6_fu_241_p2 = (i2_0_reg_160 + 4'd1);

assign i_7_fu_295_p2 = (i3_0_reg_171 + 7'd1);

assign i_8_fu_312_p2 = (i4_0_reg_182 + 7'd1);

assign i_fu_207_p2 = (i_0_reg_138 + 7'd1);

assign icmp_ln103_fu_235_p2 = ((i2_0_reg_160 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_289_p2 = ((i3_0_reg_171 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_306_p2 = ((i4_0_reg_182 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_201_p2 = ((i_0_reg_138 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_218_p2 = ((i1_0_reg_149 == 8'd128) ? 1'b1 : 1'b0);

assign input_V_address0 = zext_ln92_fu_213_p1;

assign lshr_ln1503_fu_278_p2 = 10'd640 >> zext_ln1503_fu_274_p1;

assign op2_assign_fu_266_p3 = {{trunc_ln104_fu_262_p1}, {3'd0}};

assign sext_ln104_fu_253_p1 = $signed(xor_ln104_fu_247_p2);

assign trunc_ln104_fu_262_p1 = i2_0_reg_160[2:0];

assign trunc_ln1503_fu_284_p1 = lshr_ln1503_fu_278_p2[7:0];

assign xor_ln104_fu_247_p2 = (i2_0_reg_160 ^ 4'd15);

assign zext_ln104_fu_257_p1 = $unsigned(sext_ln104_fu_253_p1);

assign zext_ln109_fu_301_p1 = i3_0_reg_171;

assign zext_ln112_fu_318_p1 = grp_fu_194_p2;

assign zext_ln1503_fu_274_p1 = op2_assign_fu_266_p3;

assign zext_ln321_fu_323_p1 = grp_fu_194_p2;

assign zext_ln92_fu_213_p1 = i_0_reg_138;

assign zext_ln98_fu_224_p1 = i1_0_reg_149;

always @ (posedge ap_clk) begin
    zext_ln92_reg_336[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_370[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha256_prepare_1
