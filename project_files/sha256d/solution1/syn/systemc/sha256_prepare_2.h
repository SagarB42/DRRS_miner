// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha256_prepare_2_HH_
#define _sha256_prepare_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sha256_prepare_2_eOg.h"

namespace ap_rtl {

struct sha256_prepare_2 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > input_V_address0;
    sc_out< sc_logic > input_V_ce0;
    sc_in< sc_lv<32> > input_V_q0;
    sc_out< sc_lv<6> > data_V_address0;
    sc_out< sc_logic > data_V_ce0;
    sc_out< sc_logic > data_V_we0;
    sc_out< sc_lv<8> > data_V_d0;


    // Module declarations
    sha256_prepare_2(sc_module_name name);
    SC_HAS_PROCESS(sha256_prepare_2);

    ~sha256_prepare_2();

    sc_trace_file* mVcdFile;

    sha256_prepare_2_eOg* data1_V_U;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > i_2_fu_187_p2;
    sc_signal< sc_lv<6> > i_2_reg_337;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln134_fu_181_p2;
    sc_signal< sc_lv<6> > i_fu_257_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln140_fu_246_p2;
    sc_signal< sc_lv<4> > i_3_fu_269_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > i_4_fu_323_p2;
    sc_signal< sc_lv<7> > i_4_reg_366;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln151_fu_329_p1;
    sc_signal< sc_lv<64> > zext_ln151_reg_371;
    sc_signal< sc_lv<1> > icmp_ln150_fu_317_p2;
    sc_signal< sc_lv<6> > data1_V_address0;
    sc_signal< sc_logic > data1_V_ce0;
    sc_signal< sc_logic > data1_V_we0;
    sc_signal< sc_lv<8> > data1_V_d0;
    sc_signal< sc_lv<8> > data1_V_q0;
    sc_signal< sc_lv<6> > i_0_reg_136;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<6> > i1_0_reg_148;
    sc_signal< sc_lv<4> > i2_0_reg_159;
    sc_signal< sc_lv<1> > icmp_ln146_fu_263_p2;
    sc_signal< sc_lv<7> > i3_0_reg_170;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > zext_ln135_1_fu_203_p1;
    sc_signal< sc_lv<64> > zext_ln135_fu_208_p1;
    sc_signal< sc_lv<64> > zext_ln141_fu_252_p1;
    sc_signal< sc_lv<64> > zext_ln147_fu_285_p1;
    sc_signal< sc_lv<8> > trunc_ln1503_fu_241_p1;
    sc_signal< sc_lv<8> > trunc_ln1503_19_fu_312_p1;
    sc_signal< sc_lv<3> > trunc_ln135_1_fu_193_p4;
    sc_signal< sc_lv<2> > trunc_ln135_fu_213_p1;
    sc_signal< sc_lv<5> > shl_ln_fu_217_p3;
    sc_signal< sc_lv<5> > sub_ln135_fu_225_p2;
    sc_signal< sc_lv<32> > zext_ln135_2_fu_231_p1;
    sc_signal< sc_lv<32> > lshr_ln1503_fu_235_p2;
    sc_signal< sc_lv<4> > xor_ln147_fu_275_p2;
    sc_signal< sc_lv<6> > sext_ln147_fu_281_p1;
    sc_signal< sc_lv<3> > trunc_ln147_fu_290_p1;
    sc_signal< sc_lv<6> > op2_assign_1_fu_294_p3;
    sc_signal< sc_lv<9> > zext_ln1503_fu_302_p1;
    sc_signal< sc_lv<9> > lshr_ln1503_1_fu_306_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_21;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<64> ap_const_lv64_20;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_18;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_data1_V_address0();
    void thread_data1_V_ce0();
    void thread_data1_V_d0();
    void thread_data1_V_we0();
    void thread_data_V_address0();
    void thread_data_V_ce0();
    void thread_data_V_d0();
    void thread_data_V_we0();
    void thread_i_2_fu_187_p2();
    void thread_i_3_fu_269_p2();
    void thread_i_4_fu_323_p2();
    void thread_i_fu_257_p2();
    void thread_icmp_ln134_fu_181_p2();
    void thread_icmp_ln140_fu_246_p2();
    void thread_icmp_ln146_fu_263_p2();
    void thread_icmp_ln150_fu_317_p2();
    void thread_input_V_address0();
    void thread_input_V_ce0();
    void thread_lshr_ln1503_1_fu_306_p2();
    void thread_lshr_ln1503_fu_235_p2();
    void thread_op2_assign_1_fu_294_p3();
    void thread_sext_ln147_fu_281_p1();
    void thread_shl_ln_fu_217_p3();
    void thread_sub_ln135_fu_225_p2();
    void thread_trunc_ln135_1_fu_193_p4();
    void thread_trunc_ln135_fu_213_p1();
    void thread_trunc_ln147_fu_290_p1();
    void thread_trunc_ln1503_19_fu_312_p1();
    void thread_trunc_ln1503_fu_241_p1();
    void thread_xor_ln147_fu_275_p2();
    void thread_zext_ln135_1_fu_203_p1();
    void thread_zext_ln135_2_fu_231_p1();
    void thread_zext_ln135_fu_208_p1();
    void thread_zext_ln141_fu_252_p1();
    void thread_zext_ln147_fu_285_p1();
    void thread_zext_ln1503_fu_302_p1();
    void thread_zext_ln151_fu_329_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
