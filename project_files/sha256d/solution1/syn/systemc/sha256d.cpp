// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256d.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256d::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256d::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> sha256d::ap_ST_fsm_state1 = "1";
const sc_lv<17> sha256d::ap_ST_fsm_state2 = "10";
const sc_lv<17> sha256d::ap_ST_fsm_state3 = "100";
const sc_lv<17> sha256d::ap_ST_fsm_state4 = "1000";
const sc_lv<17> sha256d::ap_ST_fsm_state5 = "10000";
const sc_lv<17> sha256d::ap_ST_fsm_state6 = "100000";
const sc_lv<17> sha256d::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> sha256d::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> sha256d::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> sha256d::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> sha256d::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> sha256d::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> sha256d::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> sha256d::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> sha256d::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> sha256d::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> sha256d::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> sha256d::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256d::ap_const_lv32_6 = "110";
const sc_lv<1> sha256d::ap_const_lv1_0 = "0";
const sc_lv<32> sha256d::ap_const_lv32_7 = "111";
const sc_lv<32> sha256d::ap_const_lv32_E = "1110";
const sc_lv<32> sha256d::ap_const_lv32_F = "1111";
const sc_lv<4> sha256d::ap_const_lv4_0 = "0000";
const sc_lv<32> sha256d::ap_const_lv32_5 = "101";
const sc_lv<32> sha256d::ap_const_lv32_8 = "1000";
const sc_lv<32> sha256d::ap_const_lv32_D = "1101";
const sc_lv<32> sha256d::ap_const_lv32_10 = "10000";
const sc_lv<32> sha256d::ap_const_lv32_4 = "100";
const sc_lv<32> sha256d::ap_const_lv32_C = "1100";
const sc_lv<64> sha256d::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> sha256d::ap_const_lv64_1 = "1";
const sc_lv<64> sha256d::ap_const_lv64_2 = "10";
const sc_lv<32> sha256d::ap_const_lv32_1 = "1";
const sc_lv<64> sha256d::ap_const_lv64_3 = "11";
const sc_lv<64> sha256d::ap_const_lv64_4 = "100";
const sc_lv<32> sha256d::ap_const_lv32_2 = "10";
const sc_lv<64> sha256d::ap_const_lv64_5 = "101";
const sc_lv<64> sha256d::ap_const_lv64_6 = "110";
const sc_lv<32> sha256d::ap_const_lv32_3 = "11";
const sc_lv<64> sha256d::ap_const_lv64_7 = "111";
const sc_lv<1> sha256d::ap_const_lv1_1 = "1";
const sc_lv<32> sha256d::ap_const_lv32_9 = "1001";
const sc_lv<32> sha256d::ap_const_lv32_A = "1010";
const sc_lv<32> sha256d::ap_const_lv32_B = "1011";
const sc_lv<32> sha256d::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256d::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256d::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256d::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256d::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256d::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256d::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256d::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<4> sha256d::ap_const_lv4_8 = "1000";
const sc_lv<4> sha256d::ap_const_lv4_1 = "1";
const sc_lv<2> sha256d::ap_const_lv2_0 = "00";
const sc_lv<32> sha256d::ap_const_lv32_18 = "11000";
const sc_lv<32> sha256d::ap_const_lv32_1F = "11111";
const sc_lv<5> sha256d::ap_const_lv5_1 = "1";
const sc_lv<32> sha256d::ap_const_lv32_17 = "10111";
const sc_lv<5> sha256d::ap_const_lv5_2 = "10";
const sc_lv<5> sha256d::ap_const_lv5_3 = "11";
const bool sha256d::ap_const_boolean_1 = true;

sha256d::sha256d(sc_module_name name) : sc_module(name), mVcdFile(0) {
    state_V_1_U = new sha256d_state_V_1("state_V_1_U");
    state_V_1_U->clk(ap_clk);
    state_V_1_U->reset(ap_rst);
    state_V_1_U->address0(state_V_1_address0);
    state_V_1_U->ce0(state_V_1_ce0);
    state_V_1_U->we0(state_V_1_we0);
    state_V_1_U->d0(state_V_1_d0);
    state_V_1_U->q0(state_V_1_q0);
    state_V_1_U->address1(state_V_1_address1);
    state_V_1_U->ce1(state_V_1_ce1);
    state_V_1_U->we1(state_V_1_we1);
    state_V_1_U->d1(state_V_1_d1);
    state_V_1_U->q1(state_V_1_q1);
    state_V_U = new sha256d_state_V_1("state_V_U");
    state_V_U->clk(ap_clk);
    state_V_U->reset(ap_rst);
    state_V_U->address0(state_V_address0);
    state_V_U->ce0(state_V_ce0);
    state_V_U->we0(state_V_we0);
    state_V_U->d0(state_V_d0);
    state_V_U->q0(state_V_q0);
    state_V_U->address1(state_V_address1);
    state_V_U->ce1(state_V_ce1);
    state_V_U->we1(state_V_we1);
    state_V_U->d1(state_V_d1);
    state_V_U->q1(state_V_q1);
    hash1_V_U = new sha256d_hash1_V("hash1_V_U");
    hash1_V_U->clk(ap_clk);
    hash1_V_U->reset(ap_rst);
    hash1_V_U->address0(hash1_V_address0);
    hash1_V_U->ce0(hash1_V_ce0);
    hash1_V_U->we0(hash1_V_we0);
    hash1_V_U->d0(hash1_V_d0);
    hash1_V_U->q0(hash1_V_q0);
    hash1_V_U->address1(hash1_V_address1);
    hash1_V_U->ce1(hash1_V_ce1);
    hash1_V_U->we1(hash1_V_we1);
    hash1_V_U->d1(hash1_V_d1);
    grp_sha256_update_fu_372 = new sha256_update("grp_sha256_update_fu_372");
    grp_sha256_update_fu_372->ap_clk(ap_clk);
    grp_sha256_update_fu_372->ap_rst(ap_rst);
    grp_sha256_update_fu_372->ap_start(grp_sha256_update_fu_372_ap_start);
    grp_sha256_update_fu_372->ap_done(grp_sha256_update_fu_372_ap_done);
    grp_sha256_update_fu_372->ap_idle(grp_sha256_update_fu_372_ap_idle);
    grp_sha256_update_fu_372->ap_ready(grp_sha256_update_fu_372_ap_ready);
    grp_sha256_update_fu_372->state_V_address0(grp_sha256_update_fu_372_state_V_address0);
    grp_sha256_update_fu_372->state_V_ce0(grp_sha256_update_fu_372_state_V_ce0);
    grp_sha256_update_fu_372->state_V_we0(grp_sha256_update_fu_372_state_V_we0);
    grp_sha256_update_fu_372->state_V_d0(grp_sha256_update_fu_372_state_V_d0);
    grp_sha256_update_fu_372->state_V_q0(state_V_q0);
    grp_sha256_update_fu_372->state_V_address1(grp_sha256_update_fu_372_state_V_address1);
    grp_sha256_update_fu_372->state_V_ce1(grp_sha256_update_fu_372_state_V_ce1);
    grp_sha256_update_fu_372->state_V_we1(grp_sha256_update_fu_372_state_V_we1);
    grp_sha256_update_fu_372->state_V_d1(grp_sha256_update_fu_372_state_V_d1);
    grp_sha256_update_fu_372->state_V_q1(state_V_q1);
    grp_sha256_update_fu_372->data_V_address0(grp_sha256_update_fu_372_data_V_address0);
    grp_sha256_update_fu_372->data_V_ce0(grp_sha256_update_fu_372_data_V_ce0);
    grp_sha256_update_fu_372->data_V_q0(input_V_q0);
    grp_sha256_update_1_fu_381 = new sha256_update_1("grp_sha256_update_1_fu_381");
    grp_sha256_update_1_fu_381->ap_clk(ap_clk);
    grp_sha256_update_1_fu_381->ap_rst(ap_rst);
    grp_sha256_update_1_fu_381->ap_start(grp_sha256_update_1_fu_381_ap_start);
    grp_sha256_update_1_fu_381->ap_done(grp_sha256_update_1_fu_381_ap_done);
    grp_sha256_update_1_fu_381->ap_idle(grp_sha256_update_1_fu_381_ap_idle);
    grp_sha256_update_1_fu_381->ap_ready(grp_sha256_update_1_fu_381_ap_ready);
    grp_sha256_update_1_fu_381->state_V_address0(grp_sha256_update_1_fu_381_state_V_address0);
    grp_sha256_update_1_fu_381->state_V_ce0(grp_sha256_update_1_fu_381_state_V_ce0);
    grp_sha256_update_1_fu_381->state_V_we0(grp_sha256_update_1_fu_381_state_V_we0);
    grp_sha256_update_1_fu_381->state_V_d0(grp_sha256_update_1_fu_381_state_V_d0);
    grp_sha256_update_1_fu_381->state_V_q0(state_V_1_q0);
    grp_sha256_update_1_fu_381->state_V_address1(grp_sha256_update_1_fu_381_state_V_address1);
    grp_sha256_update_1_fu_381->state_V_ce1(grp_sha256_update_1_fu_381_state_V_ce1);
    grp_sha256_update_1_fu_381->state_V_we1(grp_sha256_update_1_fu_381_state_V_we1);
    grp_sha256_update_1_fu_381->state_V_d1(grp_sha256_update_1_fu_381_state_V_d1);
    grp_sha256_update_1_fu_381->state_V_q1(state_V_1_q1);
    grp_sha256_update_1_fu_381->data_V_address0(grp_sha256_update_1_fu_381_data_V_address0);
    grp_sha256_update_1_fu_381->data_V_ce0(grp_sha256_update_1_fu_381_data_V_ce0);
    grp_sha256_update_1_fu_381->data_V_q0(hash1_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln117_1_fu_489_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln117_1_fu_489_p2 );

    SC_METHOD(thread_grp_sha256_update_1_fu_381_ap_start);
    sensitive << ( grp_sha256_update_1_fu_381_ap_start_reg );

    SC_METHOD(thread_grp_sha256_update_fu_372_ap_start);
    sensitive << ( grp_sha256_update_fu_372_ap_start_reg );

    SC_METHOD(thread_hash1_V_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_sha256_update_1_fu_381_data_V_address0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln118_fu_417_p1 );
    sensitive << ( zext_ln120_fu_474_p1 );

    SC_METHOD(thread_hash1_V_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln119_fu_439_p1 );
    sensitive << ( zext_ln121_fu_484_p1 );

    SC_METHOD(thread_hash1_V_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_sha256_update_1_fu_381_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_hash1_V_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_hash1_V_d0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( trunc_ln1503_2_reg_613 );
    sensitive << ( state_V_q0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_hash1_V_d1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( trunc_ln214_reg_618 );
    sensitive << ( state_V_q0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_hash1_V_we0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_hash1_V_we1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_i_1_fu_495_p2);
    sensitive << ( i_0_i_i11_reg_361 );

    SC_METHOD(thread_i_fu_395_p2);
    sensitive << ( i_0_i_i_reg_350 );

    SC_METHOD(thread_icmp_ln117_1_fu_489_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( i_0_i_i11_reg_361 );

    SC_METHOD(thread_icmp_ln117_fu_389_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i_0_i_i_reg_350 );

    SC_METHOD(thread_input_V_address0);
    sensitive << ( grp_sha256_update_fu_372_data_V_address0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_input_V_ce0);
    sensitive << ( grp_sha256_update_fu_372_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_or_ln119_1_fu_533_p2);
    sensitive << ( shl_ln118_1_fu_510_p3 );

    SC_METHOD(thread_or_ln119_fu_433_p2);
    sensitive << ( shl_ln_fu_410_p3 );

    SC_METHOD(thread_or_ln120_1_fu_569_p2);
    sensitive << ( shl_ln118_1_reg_641 );

    SC_METHOD(thread_or_ln120_fu_469_p2);
    sensitive << ( shl_ln_reg_607 );

    SC_METHOD(thread_or_ln121_1_fu_579_p2);
    sensitive << ( shl_ln118_1_reg_641 );

    SC_METHOD(thread_or_ln121_fu_479_p2);
    sensitive << ( shl_ln_reg_607 );

    SC_METHOD(thread_output_V_address0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln118_2_fu_517_p1 );
    sensitive << ( zext_ln120_1_fu_574_p1 );

    SC_METHOD(thread_output_V_address1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln119_1_fu_539_p1 );
    sensitive << ( zext_ln121_1_fu_584_p1 );

    SC_METHOD(thread_output_V_ce0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_output_V_ce1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_output_V_d0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( trunc_ln1503_5_reg_647 );
    sensitive << ( state_V_1_q0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_output_V_d1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( trunc_ln214_1_reg_652 );
    sensitive << ( state_V_1_q0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_output_V_we0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_output_V_we1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_shl_ln118_1_fu_510_p3);
    sensitive << ( trunc_ln118_1_reg_631 );

    SC_METHOD(thread_shl_ln_fu_410_p3);
    sensitive << ( trunc_ln118_reg_597 );

    SC_METHOD(thread_state_V_1_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_address0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( zext_ln118_3_fu_505_p1 );

    SC_METHOD(thread_state_V_1_address1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_address1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_state_V_1_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_ce0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_state_V_1_ce1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_ce1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_state_V_1_d0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_d0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_state_V_1_d1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_d1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_state_V_1_we0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln117_fu_389_p2 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_we0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_state_V_1_we1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln117_fu_389_p2 );
    sensitive << ( grp_sha256_update_1_fu_381_state_V_we1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_state_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_sha256_update_fu_372_state_V_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln118_1_fu_405_p1 );

    SC_METHOD(thread_state_V_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha256_update_fu_372_state_V_address1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_sha256_update_fu_372_state_V_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_V_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha256_update_fu_372_state_V_ce1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_V_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha256_update_fu_372_state_V_d0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_V_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha256_update_fu_372_state_V_d1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha256_update_fu_372_state_V_we0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_V_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha256_update_fu_372_state_V_we1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_trunc_ln118_1_fu_501_p1);
    sensitive << ( i_0_i_i11_reg_361 );

    SC_METHOD(thread_trunc_ln118_fu_401_p1);
    sensitive << ( i_0_i_i_reg_350 );

    SC_METHOD(thread_trunc_ln214_1_fu_565_p1);
    sensitive << ( state_V_1_q0 );

    SC_METHOD(thread_trunc_ln214_fu_465_p1);
    sensitive << ( state_V_q0 );

    SC_METHOD(thread_zext_ln118_1_fu_405_p1);
    sensitive << ( i_0_i_i_reg_350 );

    SC_METHOD(thread_zext_ln118_2_fu_517_p1);
    sensitive << ( shl_ln118_1_fu_510_p3 );

    SC_METHOD(thread_zext_ln118_3_fu_505_p1);
    sensitive << ( i_0_i_i11_reg_361 );

    SC_METHOD(thread_zext_ln118_fu_417_p1);
    sensitive << ( shl_ln_fu_410_p3 );

    SC_METHOD(thread_zext_ln119_1_fu_539_p1);
    sensitive << ( or_ln119_1_fu_533_p2 );

    SC_METHOD(thread_zext_ln119_fu_439_p1);
    sensitive << ( or_ln119_fu_433_p2 );

    SC_METHOD(thread_zext_ln120_1_fu_574_p1);
    sensitive << ( or_ln120_1_fu_569_p2 );

    SC_METHOD(thread_zext_ln120_fu_474_p1);
    sensitive << ( or_ln120_fu_469_p2 );

    SC_METHOD(thread_zext_ln121_1_fu_584_p1);
    sensitive << ( or_ln121_1_fu_579_p2 );

    SC_METHOD(thread_zext_ln121_fu_484_p1);
    sensitive << ( or_ln121_fu_479_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln117_fu_389_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln117_1_fu_489_p2 );
    sensitive << ( grp_sha256_update_fu_372_ap_done );
    sensitive << ( grp_sha256_update_1_fu_381_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000000001";
    grp_sha256_update_fu_372_ap_start_reg = SC_LOGIC_0;
    grp_sha256_update_1_fu_381_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256d_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_address0, "(port)input_V_address0");
    sc_trace(mVcdFile, input_V_ce0, "(port)input_V_ce0");
    sc_trace(mVcdFile, input_V_q0, "(port)input_V_q0");
    sc_trace(mVcdFile, output_V_address0, "(port)output_V_address0");
    sc_trace(mVcdFile, output_V_ce0, "(port)output_V_ce0");
    sc_trace(mVcdFile, output_V_we0, "(port)output_V_we0");
    sc_trace(mVcdFile, output_V_d0, "(port)output_V_d0");
    sc_trace(mVcdFile, output_V_address1, "(port)output_V_address1");
    sc_trace(mVcdFile, output_V_ce1, "(port)output_V_ce1");
    sc_trace(mVcdFile, output_V_we1, "(port)output_V_we1");
    sc_trace(mVcdFile, output_V_d1, "(port)output_V_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_395_p2, "i_fu_395_p2");
    sc_trace(mVcdFile, i_reg_592, "i_reg_592");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, trunc_ln118_fu_401_p1, "trunc_ln118_fu_401_p1");
    sc_trace(mVcdFile, trunc_ln118_reg_597, "trunc_ln118_reg_597");
    sc_trace(mVcdFile, icmp_ln117_fu_389_p2, "icmp_ln117_fu_389_p2");
    sc_trace(mVcdFile, shl_ln_fu_410_p3, "shl_ln_fu_410_p3");
    sc_trace(mVcdFile, shl_ln_reg_607, "shl_ln_reg_607");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, trunc_ln1503_2_reg_613, "trunc_ln1503_2_reg_613");
    sc_trace(mVcdFile, trunc_ln214_fu_465_p1, "trunc_ln214_fu_465_p1");
    sc_trace(mVcdFile, trunc_ln214_reg_618, "trunc_ln214_reg_618");
    sc_trace(mVcdFile, i_1_fu_495_p2, "i_1_fu_495_p2");
    sc_trace(mVcdFile, i_1_reg_626, "i_1_reg_626");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, trunc_ln118_1_fu_501_p1, "trunc_ln118_1_fu_501_p1");
    sc_trace(mVcdFile, trunc_ln118_1_reg_631, "trunc_ln118_1_reg_631");
    sc_trace(mVcdFile, icmp_ln117_1_fu_489_p2, "icmp_ln117_1_fu_489_p2");
    sc_trace(mVcdFile, shl_ln118_1_fu_510_p3, "shl_ln118_1_fu_510_p3");
    sc_trace(mVcdFile, shl_ln118_1_reg_641, "shl_ln118_1_reg_641");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, trunc_ln1503_5_reg_647, "trunc_ln1503_5_reg_647");
    sc_trace(mVcdFile, trunc_ln214_1_fu_565_p1, "trunc_ln214_1_fu_565_p1");
    sc_trace(mVcdFile, trunc_ln214_1_reg_652, "trunc_ln214_1_reg_652");
    sc_trace(mVcdFile, state_V_1_address0, "state_V_1_address0");
    sc_trace(mVcdFile, state_V_1_ce0, "state_V_1_ce0");
    sc_trace(mVcdFile, state_V_1_we0, "state_V_1_we0");
    sc_trace(mVcdFile, state_V_1_d0, "state_V_1_d0");
    sc_trace(mVcdFile, state_V_1_q0, "state_V_1_q0");
    sc_trace(mVcdFile, state_V_1_address1, "state_V_1_address1");
    sc_trace(mVcdFile, state_V_1_ce1, "state_V_1_ce1");
    sc_trace(mVcdFile, state_V_1_we1, "state_V_1_we1");
    sc_trace(mVcdFile, state_V_1_d1, "state_V_1_d1");
    sc_trace(mVcdFile, state_V_1_q1, "state_V_1_q1");
    sc_trace(mVcdFile, state_V_address0, "state_V_address0");
    sc_trace(mVcdFile, state_V_ce0, "state_V_ce0");
    sc_trace(mVcdFile, state_V_we0, "state_V_we0");
    sc_trace(mVcdFile, state_V_d0, "state_V_d0");
    sc_trace(mVcdFile, state_V_q0, "state_V_q0");
    sc_trace(mVcdFile, state_V_address1, "state_V_address1");
    sc_trace(mVcdFile, state_V_ce1, "state_V_ce1");
    sc_trace(mVcdFile, state_V_we1, "state_V_we1");
    sc_trace(mVcdFile, state_V_d1, "state_V_d1");
    sc_trace(mVcdFile, state_V_q1, "state_V_q1");
    sc_trace(mVcdFile, hash1_V_address0, "hash1_V_address0");
    sc_trace(mVcdFile, hash1_V_ce0, "hash1_V_ce0");
    sc_trace(mVcdFile, hash1_V_we0, "hash1_V_we0");
    sc_trace(mVcdFile, hash1_V_d0, "hash1_V_d0");
    sc_trace(mVcdFile, hash1_V_q0, "hash1_V_q0");
    sc_trace(mVcdFile, hash1_V_address1, "hash1_V_address1");
    sc_trace(mVcdFile, hash1_V_ce1, "hash1_V_ce1");
    sc_trace(mVcdFile, hash1_V_we1, "hash1_V_we1");
    sc_trace(mVcdFile, hash1_V_d1, "hash1_V_d1");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_ap_start, "grp_sha256_update_fu_372_ap_start");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_ap_done, "grp_sha256_update_fu_372_ap_done");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_ap_idle, "grp_sha256_update_fu_372_ap_idle");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_ap_ready, "grp_sha256_update_fu_372_ap_ready");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_address0, "grp_sha256_update_fu_372_state_V_address0");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_ce0, "grp_sha256_update_fu_372_state_V_ce0");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_we0, "grp_sha256_update_fu_372_state_V_we0");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_d0, "grp_sha256_update_fu_372_state_V_d0");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_address1, "grp_sha256_update_fu_372_state_V_address1");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_ce1, "grp_sha256_update_fu_372_state_V_ce1");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_we1, "grp_sha256_update_fu_372_state_V_we1");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_state_V_d1, "grp_sha256_update_fu_372_state_V_d1");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_data_V_address0, "grp_sha256_update_fu_372_data_V_address0");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_data_V_ce0, "grp_sha256_update_fu_372_data_V_ce0");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_ap_start, "grp_sha256_update_1_fu_381_ap_start");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_ap_done, "grp_sha256_update_1_fu_381_ap_done");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_ap_idle, "grp_sha256_update_1_fu_381_ap_idle");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_ap_ready, "grp_sha256_update_1_fu_381_ap_ready");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_address0, "grp_sha256_update_1_fu_381_state_V_address0");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_ce0, "grp_sha256_update_1_fu_381_state_V_ce0");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_we0, "grp_sha256_update_1_fu_381_state_V_we0");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_d0, "grp_sha256_update_1_fu_381_state_V_d0");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_address1, "grp_sha256_update_1_fu_381_state_V_address1");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_ce1, "grp_sha256_update_1_fu_381_state_V_ce1");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_we1, "grp_sha256_update_1_fu_381_state_V_we1");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_state_V_d1, "grp_sha256_update_1_fu_381_state_V_d1");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_data_V_address0, "grp_sha256_update_1_fu_381_data_V_address0");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_data_V_ce0, "grp_sha256_update_1_fu_381_data_V_ce0");
    sc_trace(mVcdFile, i_0_i_i_reg_350, "i_0_i_i_reg_350");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_0_i_i11_reg_361, "i_0_i_i11_reg_361");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_sha256_update_fu_372_ap_start_reg, "grp_sha256_update_fu_372_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_sha256_update_1_fu_381_ap_start_reg, "grp_sha256_update_1_fu_381_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln118_1_fu_405_p1, "zext_ln118_1_fu_405_p1");
    sc_trace(mVcdFile, zext_ln118_fu_417_p1, "zext_ln118_fu_417_p1");
    sc_trace(mVcdFile, zext_ln119_fu_439_p1, "zext_ln119_fu_439_p1");
    sc_trace(mVcdFile, zext_ln120_fu_474_p1, "zext_ln120_fu_474_p1");
    sc_trace(mVcdFile, zext_ln121_fu_484_p1, "zext_ln121_fu_484_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, zext_ln118_3_fu_505_p1, "zext_ln118_3_fu_505_p1");
    sc_trace(mVcdFile, zext_ln118_2_fu_517_p1, "zext_ln118_2_fu_517_p1");
    sc_trace(mVcdFile, zext_ln119_1_fu_539_p1, "zext_ln119_1_fu_539_p1");
    sc_trace(mVcdFile, zext_ln120_1_fu_574_p1, "zext_ln120_1_fu_574_p1");
    sc_trace(mVcdFile, zext_ln121_1_fu_584_p1, "zext_ln121_1_fu_584_p1");
    sc_trace(mVcdFile, or_ln119_fu_433_p2, "or_ln119_fu_433_p2");
    sc_trace(mVcdFile, or_ln120_fu_469_p2, "or_ln120_fu_469_p2");
    sc_trace(mVcdFile, or_ln121_fu_479_p2, "or_ln121_fu_479_p2");
    sc_trace(mVcdFile, or_ln119_1_fu_533_p2, "or_ln119_1_fu_533_p2");
    sc_trace(mVcdFile, or_ln120_1_fu_569_p2, "or_ln120_1_fu_569_p2");
    sc_trace(mVcdFile, or_ln121_1_fu_579_p2, "or_ln121_1_fu_579_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha256d.hdltvin.dat");
    mHdltvoutHandle.open("sha256d.hdltvout.dat");
}

sha256d::~sha256d() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete state_V_1_U;
    delete state_V_U;
    delete hash1_V_U;
    delete grp_sha256_update_fu_372;
    delete grp_sha256_update_1_fu_381;
}

void sha256d::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha256_update_1_fu_381_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            grp_sha256_update_1_fu_381_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_update_1_fu_381_ap_ready.read())) {
            grp_sha256_update_1_fu_381_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha256_update_fu_372_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_sha256_update_fu_372_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_update_fu_372_ap_ready.read())) {
            grp_sha256_update_fu_372_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        i_0_i_i11_reg_361 = i_1_reg_626.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(grp_sha256_update_1_fu_381_ap_done.read(), ap_const_logic_1))) {
        i_0_i_i11_reg_361 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_i_i_reg_350 = i_reg_592.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(grp_sha256_update_fu_372_ap_done.read(), ap_const_logic_1))) {
        i_0_i_i_reg_350 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        i_1_reg_626 = i_1_fu_495_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_reg_592 = i_fu_395_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        shl_ln118_1_reg_641 = shl_ln118_1_fu_510_p3.read();
        trunc_ln1503_5_reg_647 = state_V_1_q0.read().range(15, 8);
        trunc_ln214_1_reg_652 = trunc_ln214_1_fu_565_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        shl_ln_reg_607 = shl_ln_fu_410_p3.read();
        trunc_ln1503_2_reg_613 = state_V_q0.read().range(15, 8);
        trunc_ln214_reg_618 = trunc_ln214_fu_465_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln117_1_fu_489_p2.read()))) {
        trunc_ln118_1_reg_631 = trunc_ln118_1_fu_501_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln117_fu_389_p2.read(), ap_const_lv1_0))) {
        trunc_ln118_reg_597 = trunc_ln118_fu_401_p1.read();
    }
}

void sha256d::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256d::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256d::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sha256d::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sha256d::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void sha256d::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void sha256d::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void sha256d::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void sha256d::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void sha256d::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256d::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256d::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256d::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256d::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256d::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256d::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256d::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256d::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(icmp_ln117_1_fu_489_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256d::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256d::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(icmp_ln117_1_fu_489_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256d::thread_grp_sha256_update_1_fu_381_ap_start() {
    grp_sha256_update_1_fu_381_ap_start = grp_sha256_update_1_fu_381_ap_start_reg.read();
}

void sha256d::thread_grp_sha256_update_fu_372_ap_start() {
    grp_sha256_update_fu_372_ap_start = grp_sha256_update_fu_372_ap_start_reg.read();
}

void sha256d::thread_hash1_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        hash1_V_address0 =  (sc_lv<5>) (zext_ln120_fu_474_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        hash1_V_address0 =  (sc_lv<5>) (zext_ln118_fu_417_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        hash1_V_address0 = grp_sha256_update_1_fu_381_data_V_address0.read();
    } else {
        hash1_V_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void sha256d::thread_hash1_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        hash1_V_address1 =  (sc_lv<5>) (zext_ln121_fu_484_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        hash1_V_address1 =  (sc_lv<5>) (zext_ln119_fu_439_p1.read());
    } else {
        hash1_V_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void sha256d::thread_hash1_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        hash1_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        hash1_V_ce0 = grp_sha256_update_1_fu_381_data_V_ce0.read();
    } else {
        hash1_V_ce0 = ap_const_logic_0;
    }
}

void sha256d::thread_hash1_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        hash1_V_ce1 = ap_const_logic_1;
    } else {
        hash1_V_ce1 = ap_const_logic_0;
    }
}

void sha256d::thread_hash1_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        hash1_V_d0 = trunc_ln1503_2_reg_613.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        hash1_V_d0 = state_V_q0.read().range(31, 24);
    } else {
        hash1_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256d::thread_hash1_V_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        hash1_V_d1 = trunc_ln214_reg_618.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        hash1_V_d1 = state_V_q0.read().range(23, 16);
    } else {
        hash1_V_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256d::thread_hash1_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        hash1_V_we0 = ap_const_logic_1;
    } else {
        hash1_V_we0 = ap_const_logic_0;
    }
}

void sha256d::thread_hash1_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        hash1_V_we1 = ap_const_logic_1;
    } else {
        hash1_V_we1 = ap_const_logic_0;
    }
}

void sha256d::thread_i_1_fu_495_p2() {
    i_1_fu_495_p2 = (!i_0_i_i11_reg_361.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_i_i11_reg_361.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void sha256d::thread_i_fu_395_p2() {
    i_fu_395_p2 = (!i_0_i_i_reg_350.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_i_i_reg_350.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void sha256d::thread_icmp_ln117_1_fu_489_p2() {
    icmp_ln117_1_fu_489_p2 = (!i_0_i_i11_reg_361.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i11_reg_361.read() == ap_const_lv4_8);
}

void sha256d::thread_icmp_ln117_fu_389_p2() {
    icmp_ln117_fu_389_p2 = (!i_0_i_i_reg_350.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_350.read() == ap_const_lv4_8);
}

void sha256d::thread_input_V_address0() {
    input_V_address0 = grp_sha256_update_fu_372_data_V_address0.read();
}

void sha256d::thread_input_V_ce0() {
    input_V_ce0 = grp_sha256_update_fu_372_data_V_ce0.read();
}

void sha256d::thread_or_ln119_1_fu_533_p2() {
    or_ln119_1_fu_533_p2 = (shl_ln118_1_fu_510_p3.read() | ap_const_lv5_1);
}

void sha256d::thread_or_ln119_fu_433_p2() {
    or_ln119_fu_433_p2 = (shl_ln_fu_410_p3.read() | ap_const_lv5_1);
}

void sha256d::thread_or_ln120_1_fu_569_p2() {
    or_ln120_1_fu_569_p2 = (shl_ln118_1_reg_641.read() | ap_const_lv5_2);
}

void sha256d::thread_or_ln120_fu_469_p2() {
    or_ln120_fu_469_p2 = (shl_ln_reg_607.read() | ap_const_lv5_2);
}

void sha256d::thread_or_ln121_1_fu_579_p2() {
    or_ln121_1_fu_579_p2 = (shl_ln118_1_reg_641.read() | ap_const_lv5_3);
}

void sha256d::thread_or_ln121_fu_479_p2() {
    or_ln121_fu_479_p2 = (shl_ln_reg_607.read() | ap_const_lv5_3);
}

void sha256d::thread_output_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        output_V_address0 =  (sc_lv<5>) (zext_ln120_1_fu_574_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        output_V_address0 =  (sc_lv<5>) (zext_ln118_2_fu_517_p1.read());
    } else {
        output_V_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void sha256d::thread_output_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        output_V_address1 =  (sc_lv<5>) (zext_ln121_1_fu_584_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        output_V_address1 =  (sc_lv<5>) (zext_ln119_1_fu_539_p1.read());
    } else {
        output_V_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void sha256d::thread_output_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        output_V_ce0 = ap_const_logic_1;
    } else {
        output_V_ce0 = ap_const_logic_0;
    }
}

void sha256d::thread_output_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        output_V_ce1 = ap_const_logic_1;
    } else {
        output_V_ce1 = ap_const_logic_0;
    }
}

void sha256d::thread_output_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        output_V_d0 = trunc_ln1503_5_reg_647.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        output_V_d0 = state_V_1_q0.read().range(31, 24);
    } else {
        output_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256d::thread_output_V_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        output_V_d1 = trunc_ln214_1_reg_652.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        output_V_d1 = state_V_1_q0.read().range(23, 16);
    } else {
        output_V_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256d::thread_output_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        output_V_we0 = ap_const_logic_1;
    } else {
        output_V_we0 = ap_const_logic_0;
    }
}

void sha256d::thread_output_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        output_V_we1 = ap_const_logic_1;
    } else {
        output_V_we1 = ap_const_logic_0;
    }
}

void sha256d::thread_shl_ln118_1_fu_510_p3() {
    shl_ln118_1_fu_510_p3 = esl_concat<3,2>(trunc_ln118_1_reg_631.read(), ap_const_lv2_0);
}

void sha256d::thread_shl_ln_fu_410_p3() {
    shl_ln_fu_410_p3 = esl_concat<3,2>(trunc_ln118_reg_597.read(), ap_const_lv2_0);
}

void sha256d::thread_state_V_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_V_1_address0 =  (sc_lv<3>) (zext_ln118_3_fu_505_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_V_1_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_V_1_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_1_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_V_1_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_address0 = grp_sha256_update_1_fu_381_state_V_address0.read();
    } else {
        state_V_1_address0 =  (sc_lv<3>) ("XXX");
    }
}

void sha256d::thread_state_V_1_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_V_1_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_V_1_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_1_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_V_1_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_address1 = grp_sha256_update_1_fu_381_state_V_address1.read();
    } else {
        state_V_1_address1 =  (sc_lv<3>) ("XXX");
    }
}

void sha256d::thread_state_V_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        state_V_1_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_ce0 = grp_sha256_update_1_fu_381_state_V_ce0.read();
    } else {
        state_V_1_ce0 = ap_const_logic_0;
    }
}

void sha256d::thread_state_V_1_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        state_V_1_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_ce1 = grp_sha256_update_1_fu_381_state_V_ce1.read();
    } else {
        state_V_1_ce1 = ap_const_logic_0;
    }
}

void sha256d::thread_state_V_1_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_V_1_d0 = ap_const_lv32_1F83D9AB;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_V_1_d0 = ap_const_lv32_510E527F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_1_d0 = ap_const_lv32_3C6EF372;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_V_1_d0 = ap_const_lv32_6A09E667;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_d0 = grp_sha256_update_1_fu_381_state_V_d0.read();
    } else {
        state_V_1_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256d::thread_state_V_1_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_V_1_d1 = ap_const_lv32_5BE0CD19;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_V_1_d1 = ap_const_lv32_9B05688C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_V_1_d1 = ap_const_lv32_A54FF53A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_V_1_d1 = ap_const_lv32_BB67AE85;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_d1 = grp_sha256_update_1_fu_381_state_V_d1.read();
    } else {
        state_V_1_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256d::thread_state_V_1_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(icmp_ln117_fu_389_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        state_V_1_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_we0 = grp_sha256_update_1_fu_381_state_V_we0.read();
    } else {
        state_V_1_we0 = ap_const_logic_0;
    }
}

void sha256d::thread_state_V_1_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(icmp_ln117_fu_389_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        state_V_1_we1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_V_1_we1 = grp_sha256_update_1_fu_381_state_V_we1.read();
    } else {
        state_V_1_we1 = ap_const_logic_0;
    }
}

void sha256d::thread_state_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_V_address0 =  (sc_lv<3>) (zext_ln118_1_fu_405_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_V_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_V_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_V_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_address0 = grp_sha256_update_fu_372_state_V_address0.read();
    } else {
        state_V_address0 =  (sc_lv<3>) ("XXX");
    }
}

void sha256d::thread_state_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_V_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_V_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_V_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_V_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_address1 = grp_sha256_update_fu_372_state_V_address1.read();
    } else {
        state_V_address1 =  (sc_lv<3>) ("XXX");
    }
}

void sha256d::thread_state_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        state_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_ce0 = grp_sha256_update_fu_372_state_V_ce0.read();
    } else {
        state_V_ce0 = ap_const_logic_0;
    }
}

void sha256d::thread_state_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        state_V_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_ce1 = grp_sha256_update_fu_372_state_V_ce1.read();
    } else {
        state_V_ce1 = ap_const_logic_0;
    }
}

void sha256d::thread_state_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_V_d0 = ap_const_lv32_1F83D9AB;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_V_d0 = ap_const_lv32_510E527F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_V_d0 = ap_const_lv32_3C6EF372;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_V_d0 = ap_const_lv32_6A09E667;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_d0 = grp_sha256_update_fu_372_state_V_d0.read();
    } else {
        state_V_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256d::thread_state_V_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_V_d1 = ap_const_lv32_5BE0CD19;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_V_d1 = ap_const_lv32_9B05688C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_V_d1 = ap_const_lv32_A54FF53A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_V_d1 = ap_const_lv32_BB67AE85;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_d1 = grp_sha256_update_fu_372_state_V_d1.read();
    } else {
        state_V_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256d::thread_state_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        state_V_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_we0 = grp_sha256_update_fu_372_state_V_we0.read();
    } else {
        state_V_we0 = ap_const_logic_0;
    }
}

void sha256d::thread_state_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        state_V_we1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_V_we1 = grp_sha256_update_fu_372_state_V_we1.read();
    } else {
        state_V_we1 = ap_const_logic_0;
    }
}

void sha256d::thread_trunc_ln118_1_fu_501_p1() {
    trunc_ln118_1_fu_501_p1 = i_0_i_i11_reg_361.read().range(3-1, 0);
}

void sha256d::thread_trunc_ln118_fu_401_p1() {
    trunc_ln118_fu_401_p1 = i_0_i_i_reg_350.read().range(3-1, 0);
}

void sha256d::thread_trunc_ln214_1_fu_565_p1() {
    trunc_ln214_1_fu_565_p1 = state_V_1_q0.read().range(8-1, 0);
}

void sha256d::thread_trunc_ln214_fu_465_p1() {
    trunc_ln214_fu_465_p1 = state_V_q0.read().range(8-1, 0);
}

void sha256d::thread_zext_ln118_1_fu_405_p1() {
    zext_ln118_1_fu_405_p1 = esl_zext<64,4>(i_0_i_i_reg_350.read());
}

void sha256d::thread_zext_ln118_2_fu_517_p1() {
    zext_ln118_2_fu_517_p1 = esl_zext<64,5>(shl_ln118_1_fu_510_p3.read());
}

void sha256d::thread_zext_ln118_3_fu_505_p1() {
    zext_ln118_3_fu_505_p1 = esl_zext<64,4>(i_0_i_i11_reg_361.read());
}

void sha256d::thread_zext_ln118_fu_417_p1() {
    zext_ln118_fu_417_p1 = esl_zext<64,5>(shl_ln_fu_410_p3.read());
}

void sha256d::thread_zext_ln119_1_fu_539_p1() {
    zext_ln119_1_fu_539_p1 = esl_zext<64,5>(or_ln119_1_fu_533_p2.read());
}

void sha256d::thread_zext_ln119_fu_439_p1() {
    zext_ln119_fu_439_p1 = esl_zext<64,5>(or_ln119_fu_433_p2.read());
}

void sha256d::thread_zext_ln120_1_fu_574_p1() {
    zext_ln120_1_fu_574_p1 = esl_zext<64,5>(or_ln120_1_fu_569_p2.read());
}

void sha256d::thread_zext_ln120_fu_474_p1() {
    zext_ln120_fu_474_p1 = esl_zext<64,5>(or_ln120_fu_469_p2.read());
}

void sha256d::thread_zext_ln121_1_fu_584_p1() {
    zext_ln121_1_fu_584_p1 = esl_zext<64,5>(or_ln121_1_fu_579_p2.read());
}

void sha256d::thread_zext_ln121_fu_484_p1() {
    zext_ln121_fu_484_p1 = esl_zext<64,5>(or_ln121_fu_479_p2.read());
}

void sha256d::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_sha256_update_fu_372_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln117_fu_389_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(grp_sha256_update_1_fu_381_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(icmp_ln117_1_fu_489_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

void sha256d::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_address0\" :  \"" << input_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_ce0\" :  \"" << input_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_q0\" :  \"" << input_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_address0\" :  \"" << output_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_ce0\" :  \"" << output_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_we0\" :  \"" << output_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_d0\" :  \"" << output_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_address1\" :  \"" << output_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_ce1\" :  \"" << output_V_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_we1\" :  \"" << output_V_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_d1\" :  \"" << output_V_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

