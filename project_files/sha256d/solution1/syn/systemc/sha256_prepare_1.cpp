// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_prepare_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_prepare_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_prepare_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state1 = "1";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state2 = "10";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state3 = "100";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state4 = "1000";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state5 = "10000";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state6 = "100000";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> sha256_prepare_1::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_1 = "1";
const sc_lv<1> sha256_prepare_1::ap_const_lv1_0 = "0";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_3 = "11";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_4 = "100";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_5 = "101";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_7 = "111";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_2 = "10";
const sc_lv<7> sha256_prepare_1::ap_const_lv7_0 = "0000000";
const sc_lv<8> sha256_prepare_1::ap_const_lv8_51 = "1010001";
const sc_lv<1> sha256_prepare_1::ap_const_lv1_1 = "1";
const sc_lv<4> sha256_prepare_1::ap_const_lv4_0 = "0000";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_6 = "110";
const sc_lv<32> sha256_prepare_1::ap_const_lv32_8 = "1000";
const sc_lv<64> sha256_prepare_1::ap_const_lv64_50 = "1010000";
const sc_lv<8> sha256_prepare_1::ap_const_lv8_80 = "10000000";
const sc_lv<8> sha256_prepare_1::ap_const_lv8_0 = "00000000";
const sc_lv<7> sha256_prepare_1::ap_const_lv7_40 = "1000000";
const sc_lv<7> sha256_prepare_1::ap_const_lv7_50 = "1010000";
const sc_lv<7> sha256_prepare_1::ap_const_lv7_1 = "1";
const sc_lv<8> sha256_prepare_1::ap_const_lv8_1 = "1";
const sc_lv<4> sha256_prepare_1::ap_const_lv4_8 = "1000";
const sc_lv<4> sha256_prepare_1::ap_const_lv4_1 = "1";
const sc_lv<4> sha256_prepare_1::ap_const_lv4_F = "1111";
const sc_lv<3> sha256_prepare_1::ap_const_lv3_0 = "000";
const sc_lv<10> sha256_prepare_1::ap_const_lv10_280 = "1010000000";
const bool sha256_prepare_1::ap_const_boolean_1 = true;

sha256_prepare_1::sha256_prepare_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    data1_V_U = new sha256_prepare_1_bkb("data1_V_U");
    data1_V_U->clk(ap_clk);
    data1_V_U->reset(ap_rst);
    data1_V_U->address0(data1_V_address0);
    data1_V_U->ce0(data1_V_ce0);
    data1_V_U->we0(data1_V_we0);
    data1_V_U->d0(data1_V_d0);
    data1_V_U->q0(data1_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln111_fu_306_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_i4_0_phi_fu_186_p4);
    sensitive << ( i4_0_reg_182 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln111_fu_306_p2 );

    SC_METHOD(thread_data1_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln92_reg_336 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln109_fu_301_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln98_fu_224_p1 );
    sensitive << ( zext_ln104_fu_257_p1 );
    sensitive << ( zext_ln112_fu_318_p1 );

    SC_METHOD(thread_data1_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data1_V_d0);
    sensitive << ( input_V_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln1503_fu_284_p1 );

    SC_METHOD(thread_data1_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln91_fu_201_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln97_fu_218_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln103_fu_235_p2 );

    SC_METHOD(thread_data_V_address0);
    sensitive << ( zext_ln109_reg_370 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln321_fu_323_p1 );

    SC_METHOD(thread_data_V_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_data_V_d0);
    sensitive << ( data1_V_q0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_data_V_we0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_194_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_phi_mux_i4_0_phi_fu_186_p4 );
    sensitive << ( i4_0_reg_182 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_194_p2);
    sensitive << ( grp_fu_194_p0 );

    SC_METHOD(thread_i_5_fu_229_p2);
    sensitive << ( i1_0_reg_149 );

    SC_METHOD(thread_i_6_fu_241_p2);
    sensitive << ( i2_0_reg_160 );

    SC_METHOD(thread_i_7_fu_295_p2);
    sensitive << ( i3_0_reg_171 );

    SC_METHOD(thread_i_8_fu_312_p2);
    sensitive << ( i4_0_reg_182 );

    SC_METHOD(thread_i_fu_207_p2);
    sensitive << ( i_0_reg_138 );

    SC_METHOD(thread_icmp_ln103_fu_235_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i2_0_reg_160 );

    SC_METHOD(thread_icmp_ln108_fu_289_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i3_0_reg_171 );

    SC_METHOD(thread_icmp_ln111_fu_306_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i4_0_reg_182 );

    SC_METHOD(thread_icmp_ln91_fu_201_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_138 );

    SC_METHOD(thread_icmp_ln97_fu_218_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i1_0_reg_149 );

    SC_METHOD(thread_input_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln92_fu_213_p1 );

    SC_METHOD(thread_input_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_lshr_ln1503_fu_278_p2);
    sensitive << ( zext_ln1503_fu_274_p1 );

    SC_METHOD(thread_op2_assign_fu_266_p3);
    sensitive << ( trunc_ln104_fu_262_p1 );

    SC_METHOD(thread_sext_ln104_fu_253_p1);
    sensitive << ( xor_ln104_fu_247_p2 );

    SC_METHOD(thread_trunc_ln104_fu_262_p1);
    sensitive << ( i2_0_reg_160 );

    SC_METHOD(thread_trunc_ln1503_fu_284_p1);
    sensitive << ( lshr_ln1503_fu_278_p2 );

    SC_METHOD(thread_xor_ln104_fu_247_p2);
    sensitive << ( i2_0_reg_160 );

    SC_METHOD(thread_zext_ln104_fu_257_p1);
    sensitive << ( sext_ln104_fu_253_p1 );

    SC_METHOD(thread_zext_ln109_fu_301_p1);
    sensitive << ( i3_0_reg_171 );

    SC_METHOD(thread_zext_ln112_fu_318_p1);
    sensitive << ( grp_fu_194_p2 );

    SC_METHOD(thread_zext_ln1503_fu_274_p1);
    sensitive << ( op2_assign_fu_266_p3 );

    SC_METHOD(thread_zext_ln321_fu_323_p1);
    sensitive << ( grp_fu_194_p2 );

    SC_METHOD(thread_zext_ln92_fu_213_p1);
    sensitive << ( i_0_reg_138 );

    SC_METHOD(thread_zext_ln98_fu_224_p1);
    sensitive << ( i1_0_reg_149 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln91_fu_201_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln97_fu_218_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln108_fu_289_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln111_fu_306_p2 );
    sensitive << ( icmp_ln103_fu_235_p2 );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_prepare_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_address0, "(port)input_V_address0");
    sc_trace(mVcdFile, input_V_ce0, "(port)input_V_ce0");
    sc_trace(mVcdFile, input_V_q0, "(port)input_V_q0");
    sc_trace(mVcdFile, data_V_address0, "(port)data_V_address0");
    sc_trace(mVcdFile, data_V_ce0, "(port)data_V_ce0");
    sc_trace(mVcdFile, data_V_we0, "(port)data_V_we0");
    sc_trace(mVcdFile, data_V_d0, "(port)data_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_207_p2, "i_fu_207_p2");
    sc_trace(mVcdFile, i_reg_331, "i_reg_331");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln92_fu_213_p1, "zext_ln92_fu_213_p1");
    sc_trace(mVcdFile, zext_ln92_reg_336, "zext_ln92_reg_336");
    sc_trace(mVcdFile, icmp_ln91_fu_201_p2, "icmp_ln91_fu_201_p2");
    sc_trace(mVcdFile, i_5_fu_229_p2, "i_5_fu_229_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln97_fu_218_p2, "icmp_ln97_fu_218_p2");
    sc_trace(mVcdFile, i_6_fu_241_p2, "i_6_fu_241_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_7_fu_295_p2, "i_7_fu_295_p2");
    sc_trace(mVcdFile, i_7_reg_365, "i_7_reg_365");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln109_fu_301_p1, "zext_ln109_fu_301_p1");
    sc_trace(mVcdFile, zext_ln109_reg_370, "zext_ln109_reg_370");
    sc_trace(mVcdFile, icmp_ln108_fu_289_p2, "icmp_ln108_fu_289_p2");
    sc_trace(mVcdFile, i_8_fu_312_p2, "i_8_fu_312_p2");
    sc_trace(mVcdFile, i_8_reg_383, "i_8_reg_383");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln111_fu_306_p2, "icmp_ln111_fu_306_p2");
    sc_trace(mVcdFile, data1_V_address0, "data1_V_address0");
    sc_trace(mVcdFile, data1_V_ce0, "data1_V_ce0");
    sc_trace(mVcdFile, data1_V_we0, "data1_V_we0");
    sc_trace(mVcdFile, data1_V_d0, "data1_V_d0");
    sc_trace(mVcdFile, data1_V_q0, "data1_V_q0");
    sc_trace(mVcdFile, i_0_reg_138, "i_0_reg_138");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i1_0_reg_149, "i1_0_reg_149");
    sc_trace(mVcdFile, i2_0_reg_160, "i2_0_reg_160");
    sc_trace(mVcdFile, icmp_ln103_fu_235_p2, "icmp_ln103_fu_235_p2");
    sc_trace(mVcdFile, i3_0_reg_171, "i3_0_reg_171");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_phi_mux_i4_0_phi_fu_186_p4, "ap_phi_mux_i4_0_phi_fu_186_p4");
    sc_trace(mVcdFile, i4_0_reg_182, "i4_0_reg_182");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, zext_ln98_fu_224_p1, "zext_ln98_fu_224_p1");
    sc_trace(mVcdFile, zext_ln104_fu_257_p1, "zext_ln104_fu_257_p1");
    sc_trace(mVcdFile, zext_ln112_fu_318_p1, "zext_ln112_fu_318_p1");
    sc_trace(mVcdFile, zext_ln321_fu_323_p1, "zext_ln321_fu_323_p1");
    sc_trace(mVcdFile, trunc_ln1503_fu_284_p1, "trunc_ln1503_fu_284_p1");
    sc_trace(mVcdFile, grp_fu_194_p0, "grp_fu_194_p0");
    sc_trace(mVcdFile, xor_ln104_fu_247_p2, "xor_ln104_fu_247_p2");
    sc_trace(mVcdFile, sext_ln104_fu_253_p1, "sext_ln104_fu_253_p1");
    sc_trace(mVcdFile, trunc_ln104_fu_262_p1, "trunc_ln104_fu_262_p1");
    sc_trace(mVcdFile, op2_assign_fu_266_p3, "op2_assign_fu_266_p3");
    sc_trace(mVcdFile, zext_ln1503_fu_274_p1, "zext_ln1503_fu_274_p1");
    sc_trace(mVcdFile, lshr_ln1503_fu_278_p2, "lshr_ln1503_fu_278_p2");
    sc_trace(mVcdFile, grp_fu_194_p2, "grp_fu_194_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sha256_prepare_1::~sha256_prepare_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete data1_V_U;
}

void sha256_prepare_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln97_fu_218_p2.read()))) {
        i1_0_reg_149 = i_5_fu_229_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln91_fu_201_p2.read(), ap_const_lv1_1))) {
        i1_0_reg_149 = ap_const_lv8_51;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln97_fu_218_p2.read(), ap_const_lv1_1))) {
        i2_0_reg_160 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln103_fu_235_p2.read()))) {
        i2_0_reg_160 = i_6_fu_241_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln103_fu_235_p2.read()))) {
        i3_0_reg_171 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i3_0_reg_171 = i_7_reg_365.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(icmp_ln108_fu_289_p2.read(), ap_const_lv1_1))) {
        i4_0_reg_182 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i4_0_reg_182 = i_8_reg_383.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_138 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_138 = i_reg_331.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_7_reg_365 = i_7_fu_295_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_8_reg_383 = i_8_fu_312_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_331 = i_fu_207_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln108_fu_289_p2.read()))) {
        zext_ln109_reg_370 = zext_ln109_fu_301_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln91_fu_201_p2.read(), ap_const_lv1_0))) {
        zext_ln92_reg_336 = zext_ln92_fu_213_p1.read();
    }
}

void sha256_prepare_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_prepare_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_prepare_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_prepare_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256_prepare_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256_prepare_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256_prepare_1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256_prepare_1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256_prepare_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256_prepare_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(icmp_ln111_fu_306_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_ap_phi_mux_i4_0_phi_fu_186_p4() {
    ap_phi_mux_i4_0_phi_fu_186_p4 = i4_0_reg_182.read();
}

void sha256_prepare_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln111_fu_306_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_data1_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        data1_V_address0 =  (sc_lv<7>) (zext_ln112_fu_318_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        data1_V_address0 =  (sc_lv<7>) (zext_ln109_fu_301_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data1_V_address0 =  (sc_lv<7>) (zext_ln104_fu_257_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data1_V_address0 =  (sc_lv<7>) (zext_ln98_fu_224_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data1_V_address0 =  (sc_lv<7>) (zext_ln92_reg_336.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data1_V_address0 =  (sc_lv<7>) (ap_const_lv64_50);
    } else {
        data1_V_address0 = "XXXXXXX";
    }
}

void sha256_prepare_1::thread_data1_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data1_V_ce0 = ap_const_logic_1;
    } else {
        data1_V_ce0 = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_data1_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data1_V_d0 = trunc_ln1503_fu_284_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data1_V_d0 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data1_V_d0 = input_V_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data1_V_d0 = ap_const_lv8_80;
    } else {
        data1_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_prepare_1::thread_data1_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln97_fu_218_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln91_fu_201_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln103_fu_235_p2.read())))) {
        data1_V_we0 = ap_const_logic_1;
    } else {
        data1_V_we0 = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        data_V_address0 =  (sc_lv<7>) (zext_ln321_fu_323_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        data_V_address0 =  (sc_lv<7>) (zext_ln109_reg_370.read());
    } else {
        data_V_address0 = "XXXXXXX";
    }
}

void sha256_prepare_1::thread_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        data_V_ce0 = ap_const_logic_1;
    } else {
        data_V_ce0 = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_data_V_d0() {
    data_V_d0 = data1_V_q0.read();
}

void sha256_prepare_1::thread_data_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        data_V_we0 = ap_const_logic_1;
    } else {
        data_V_we0 = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_grp_fu_194_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_194_p0 = i4_0_reg_182.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_194_p0 = ap_phi_mux_i4_0_phi_fu_186_p4.read();
    } else {
        grp_fu_194_p0 = "XXXXXXX";
    }
}

void sha256_prepare_1::thread_grp_fu_194_p2() {
    grp_fu_194_p2 = (grp_fu_194_p0.read() ^ ap_const_lv7_40);
}

void sha256_prepare_1::thread_i_5_fu_229_p2() {
    i_5_fu_229_p2 = (!i1_0_reg_149.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i1_0_reg_149.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void sha256_prepare_1::thread_i_6_fu_241_p2() {
    i_6_fu_241_p2 = (!i2_0_reg_160.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i2_0_reg_160.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void sha256_prepare_1::thread_i_7_fu_295_p2() {
    i_7_fu_295_p2 = (!i3_0_reg_171.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i3_0_reg_171.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_prepare_1::thread_i_8_fu_312_p2() {
    i_8_fu_312_p2 = (!i4_0_reg_182.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i4_0_reg_182.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_prepare_1::thread_i_fu_207_p2() {
    i_fu_207_p2 = (!i_0_reg_138.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_138.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_prepare_1::thread_icmp_ln103_fu_235_p2() {
    icmp_ln103_fu_235_p2 = (!i2_0_reg_160.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i2_0_reg_160.read() == ap_const_lv4_8);
}

void sha256_prepare_1::thread_icmp_ln108_fu_289_p2() {
    icmp_ln108_fu_289_p2 = (!i3_0_reg_171.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i3_0_reg_171.read() == ap_const_lv7_40);
}

void sha256_prepare_1::thread_icmp_ln111_fu_306_p2() {
    icmp_ln111_fu_306_p2 = (!i4_0_reg_182.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i4_0_reg_182.read() == ap_const_lv7_40);
}

void sha256_prepare_1::thread_icmp_ln91_fu_201_p2() {
    icmp_ln91_fu_201_p2 = (!i_0_reg_138.read().is_01() || !ap_const_lv7_50.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_138.read() == ap_const_lv7_50);
}

void sha256_prepare_1::thread_icmp_ln97_fu_218_p2() {
    icmp_ln97_fu_218_p2 = (!i1_0_reg_149.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(i1_0_reg_149.read() == ap_const_lv8_80);
}

void sha256_prepare_1::thread_input_V_address0() {
    input_V_address0 =  (sc_lv<7>) (zext_ln92_fu_213_p1.read());
}

void sha256_prepare_1::thread_input_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        input_V_ce0 = ap_const_logic_1;
    } else {
        input_V_ce0 = ap_const_logic_0;
    }
}

void sha256_prepare_1::thread_lshr_ln1503_fu_278_p2() {
    lshr_ln1503_fu_278_p2 = (!zext_ln1503_fu_274_p1.read().is_01())? sc_lv<10>(): ap_const_lv10_280 >> (unsigned short)zext_ln1503_fu_274_p1.read().to_uint();
}

void sha256_prepare_1::thread_op2_assign_fu_266_p3() {
    op2_assign_fu_266_p3 = esl_concat<3,3>(trunc_ln104_fu_262_p1.read(), ap_const_lv3_0);
}

void sha256_prepare_1::thread_sext_ln104_fu_253_p1() {
    sext_ln104_fu_253_p1 = esl_sext<7,4>(xor_ln104_fu_247_p2.read());
}

void sha256_prepare_1::thread_trunc_ln104_fu_262_p1() {
    trunc_ln104_fu_262_p1 = i2_0_reg_160.read().range(3-1, 0);
}

void sha256_prepare_1::thread_trunc_ln1503_fu_284_p1() {
    trunc_ln1503_fu_284_p1 = lshr_ln1503_fu_278_p2.read().range(8-1, 0);
}

void sha256_prepare_1::thread_xor_ln104_fu_247_p2() {
    xor_ln104_fu_247_p2 = (i2_0_reg_160.read() ^ ap_const_lv4_F);
}

void sha256_prepare_1::thread_zext_ln104_fu_257_p1() {
    zext_ln104_fu_257_p1 = esl_zext<64,7>(sext_ln104_fu_253_p1.read());
}

void sha256_prepare_1::thread_zext_ln109_fu_301_p1() {
    zext_ln109_fu_301_p1 = esl_zext<64,7>(i3_0_reg_171.read());
}

void sha256_prepare_1::thread_zext_ln112_fu_318_p1() {
    zext_ln112_fu_318_p1 = esl_zext<64,7>(grp_fu_194_p2.read());
}

void sha256_prepare_1::thread_zext_ln1503_fu_274_p1() {
    zext_ln1503_fu_274_p1 = esl_zext<10,6>(op2_assign_fu_266_p3.read());
}

void sha256_prepare_1::thread_zext_ln321_fu_323_p1() {
    zext_ln321_fu_323_p1 = esl_zext<64,7>(grp_fu_194_p2.read());
}

void sha256_prepare_1::thread_zext_ln92_fu_213_p1() {
    zext_ln92_fu_213_p1 = esl_zext<64,7>(i_0_reg_138.read());
}

void sha256_prepare_1::thread_zext_ln98_fu_224_p1() {
    zext_ln98_fu_224_p1 = esl_zext<64,8>(i1_0_reg_149.read());
}

void sha256_prepare_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln91_fu_201_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln97_fu_218_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln103_fu_235_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln108_fu_289_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln111_fu_306_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

