// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha256_prepare_1_HH_
#define _sha256_prepare_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sha256_prepare_1_bkb.h"

namespace ap_rtl {

struct sha256_prepare_1 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > input_V_address0;
    sc_out< sc_logic > input_V_ce0;
    sc_in< sc_lv<8> > input_V_q0;
    sc_out< sc_lv<7> > data_V_address0;
    sc_out< sc_logic > data_V_ce0;
    sc_out< sc_logic > data_V_we0;
    sc_out< sc_lv<8> > data_V_d0;


    // Module declarations
    sha256_prepare_1(sc_module_name name);
    SC_HAS_PROCESS(sha256_prepare_1);

    ~sha256_prepare_1();

    sc_trace_file* mVcdFile;

    sha256_prepare_1_bkb* data1_V_U;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_fu_207_p2;
    sc_signal< sc_lv<7> > i_reg_331;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln92_fu_213_p1;
    sc_signal< sc_lv<64> > zext_ln92_reg_336;
    sc_signal< sc_lv<1> > icmp_ln91_fu_201_p2;
    sc_signal< sc_lv<8> > i_5_fu_229_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln97_fu_218_p2;
    sc_signal< sc_lv<4> > i_6_fu_241_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > i_7_fu_295_p2;
    sc_signal< sc_lv<7> > i_7_reg_365;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln109_fu_301_p1;
    sc_signal< sc_lv<64> > zext_ln109_reg_370;
    sc_signal< sc_lv<1> > icmp_ln108_fu_289_p2;
    sc_signal< sc_lv<7> > i_8_fu_312_p2;
    sc_signal< sc_lv<7> > i_8_reg_383;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > icmp_ln111_fu_306_p2;
    sc_signal< sc_lv<7> > data1_V_address0;
    sc_signal< sc_logic > data1_V_ce0;
    sc_signal< sc_logic > data1_V_we0;
    sc_signal< sc_lv<8> > data1_V_d0;
    sc_signal< sc_lv<8> > data1_V_q0;
    sc_signal< sc_lv<7> > i_0_reg_138;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > i1_0_reg_149;
    sc_signal< sc_lv<4> > i2_0_reg_160;
    sc_signal< sc_lv<1> > icmp_ln103_fu_235_p2;
    sc_signal< sc_lv<7> > i3_0_reg_171;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<7> > ap_phi_mux_i4_0_phi_fu_186_p4;
    sc_signal< sc_lv<7> > i4_0_reg_182;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<64> > zext_ln98_fu_224_p1;
    sc_signal< sc_lv<64> > zext_ln104_fu_257_p1;
    sc_signal< sc_lv<64> > zext_ln112_fu_318_p1;
    sc_signal< sc_lv<64> > zext_ln321_fu_323_p1;
    sc_signal< sc_lv<8> > trunc_ln1503_fu_284_p1;
    sc_signal< sc_lv<7> > grp_fu_194_p0;
    sc_signal< sc_lv<4> > xor_ln104_fu_247_p2;
    sc_signal< sc_lv<7> > sext_ln104_fu_253_p1;
    sc_signal< sc_lv<3> > trunc_ln104_fu_262_p1;
    sc_signal< sc_lv<6> > op2_assign_fu_266_p3;
    sc_signal< sc_lv<10> > zext_ln1503_fu_274_p1;
    sc_signal< sc_lv<10> > lshr_ln1503_fu_278_p2;
    sc_signal< sc_lv<7> > grp_fu_194_p2;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<8> ap_const_lv8_51;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<64> ap_const_lv64_50;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_50;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<10> ap_const_lv10_280;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_i4_0_phi_fu_186_p4();
    void thread_ap_ready();
    void thread_data1_V_address0();
    void thread_data1_V_ce0();
    void thread_data1_V_d0();
    void thread_data1_V_we0();
    void thread_data_V_address0();
    void thread_data_V_ce0();
    void thread_data_V_d0();
    void thread_data_V_we0();
    void thread_grp_fu_194_p0();
    void thread_grp_fu_194_p2();
    void thread_i_5_fu_229_p2();
    void thread_i_6_fu_241_p2();
    void thread_i_7_fu_295_p2();
    void thread_i_8_fu_312_p2();
    void thread_i_fu_207_p2();
    void thread_icmp_ln103_fu_235_p2();
    void thread_icmp_ln108_fu_289_p2();
    void thread_icmp_ln111_fu_306_p2();
    void thread_icmp_ln91_fu_201_p2();
    void thread_icmp_ln97_fu_218_p2();
    void thread_input_V_address0();
    void thread_input_V_ce0();
    void thread_lshr_ln1503_fu_278_p2();
    void thread_op2_assign_fu_266_p3();
    void thread_sext_ln104_fu_253_p1();
    void thread_trunc_ln104_fu_262_p1();
    void thread_trunc_ln1503_fu_284_p1();
    void thread_xor_ln104_fu_247_p2();
    void thread_zext_ln104_fu_257_p1();
    void thread_zext_ln109_fu_301_p1();
    void thread_zext_ln112_fu_318_p1();
    void thread_zext_ln1503_fu_274_p1();
    void thread_zext_ln321_fu_323_p1();
    void thread_zext_ln92_fu_213_p1();
    void thread_zext_ln98_fu_224_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
