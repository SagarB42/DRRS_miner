// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_prepare_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_prepare_2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_prepare_2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> sha256_prepare_2::ap_ST_fsm_state1 = "1";
const sc_lv<7> sha256_prepare_2::ap_ST_fsm_state2 = "10";
const sc_lv<7> sha256_prepare_2::ap_ST_fsm_state3 = "100";
const sc_lv<7> sha256_prepare_2::ap_ST_fsm_state4 = "1000";
const sc_lv<7> sha256_prepare_2::ap_ST_fsm_state5 = "10000";
const sc_lv<7> sha256_prepare_2::ap_ST_fsm_state6 = "100000";
const sc_lv<7> sha256_prepare_2::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> sha256_prepare_2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256_prepare_2::ap_const_lv32_1 = "1";
const sc_lv<1> sha256_prepare_2::ap_const_lv1_0 = "0";
const sc_lv<32> sha256_prepare_2::ap_const_lv32_3 = "11";
const sc_lv<32> sha256_prepare_2::ap_const_lv32_4 = "100";
const sc_lv<32> sha256_prepare_2::ap_const_lv32_5 = "101";
const sc_lv<32> sha256_prepare_2::ap_const_lv32_2 = "10";
const sc_lv<6> sha256_prepare_2::ap_const_lv6_0 = "000000";
const sc_lv<6> sha256_prepare_2::ap_const_lv6_21 = "100001";
const sc_lv<1> sha256_prepare_2::ap_const_lv1_1 = "1";
const sc_lv<4> sha256_prepare_2::ap_const_lv4_0 = "0000";
const sc_lv<32> sha256_prepare_2::ap_const_lv32_6 = "110";
const sc_lv<7> sha256_prepare_2::ap_const_lv7_0 = "0000000";
const sc_lv<64> sha256_prepare_2::ap_const_lv64_20 = "100000";
const sc_lv<8> sha256_prepare_2::ap_const_lv8_80 = "10000000";
const sc_lv<8> sha256_prepare_2::ap_const_lv8_0 = "00000000";
const sc_lv<6> sha256_prepare_2::ap_const_lv6_20 = "100000";
const sc_lv<6> sha256_prepare_2::ap_const_lv6_1 = "1";
const sc_lv<3> sha256_prepare_2::ap_const_lv3_0 = "000";
const sc_lv<5> sha256_prepare_2::ap_const_lv5_18 = "11000";
const sc_lv<6> sha256_prepare_2::ap_const_lv6_3F = "111111";
const sc_lv<4> sha256_prepare_2::ap_const_lv4_8 = "1000";
const sc_lv<4> sha256_prepare_2::ap_const_lv4_1 = "1";
const sc_lv<4> sha256_prepare_2::ap_const_lv4_F = "1111";
const sc_lv<9> sha256_prepare_2::ap_const_lv9_100 = "100000000";
const sc_lv<7> sha256_prepare_2::ap_const_lv7_40 = "1000000";
const sc_lv<7> sha256_prepare_2::ap_const_lv7_1 = "1";
const bool sha256_prepare_2::ap_const_boolean_1 = true;

sha256_prepare_2::sha256_prepare_2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    data1_V_U = new sha256_prepare_2_eOg("data1_V_U");
    data1_V_U->clk(ap_clk);
    data1_V_U->reset(ap_rst);
    data1_V_U->address0(data1_V_address0);
    data1_V_U->ce0(data1_V_ce0);
    data1_V_U->we0(data1_V_we0);
    data1_V_U->d0(data1_V_d0);
    data1_V_U->q0(data1_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln150_fu_317_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln150_fu_317_p2 );

    SC_METHOD(thread_data1_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln151_fu_329_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln135_fu_208_p1 );
    sensitive << ( zext_ln141_fu_252_p1 );
    sensitive << ( zext_ln147_fu_285_p1 );

    SC_METHOD(thread_data1_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data1_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln1503_fu_241_p1 );
    sensitive << ( trunc_ln1503_19_fu_312_p1 );

    SC_METHOD(thread_data1_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln134_fu_181_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln140_fu_246_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln146_fu_263_p2 );

    SC_METHOD(thread_data_V_address0);
    sensitive << ( zext_ln151_reg_371 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_V_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_V_d0);
    sensitive << ( data1_V_q0 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_V_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_i_2_fu_187_p2);
    sensitive << ( i_0_reg_136 );

    SC_METHOD(thread_i_3_fu_269_p2);
    sensitive << ( i2_0_reg_159 );

    SC_METHOD(thread_i_4_fu_323_p2);
    sensitive << ( i3_0_reg_170 );

    SC_METHOD(thread_i_fu_257_p2);
    sensitive << ( i1_0_reg_148 );

    SC_METHOD(thread_icmp_ln134_fu_181_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_136 );

    SC_METHOD(thread_icmp_ln140_fu_246_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i1_0_reg_148 );

    SC_METHOD(thread_icmp_ln146_fu_263_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i2_0_reg_159 );

    SC_METHOD(thread_icmp_ln150_fu_317_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i3_0_reg_170 );

    SC_METHOD(thread_input_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln135_1_fu_203_p1 );

    SC_METHOD(thread_input_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_lshr_ln1503_1_fu_306_p2);
    sensitive << ( zext_ln1503_fu_302_p1 );

    SC_METHOD(thread_lshr_ln1503_fu_235_p2);
    sensitive << ( input_V_q0 );
    sensitive << ( zext_ln135_2_fu_231_p1 );

    SC_METHOD(thread_op2_assign_1_fu_294_p3);
    sensitive << ( trunc_ln147_fu_290_p1 );

    SC_METHOD(thread_sext_ln147_fu_281_p1);
    sensitive << ( xor_ln147_fu_275_p2 );

    SC_METHOD(thread_shl_ln_fu_217_p3);
    sensitive << ( trunc_ln135_fu_213_p1 );

    SC_METHOD(thread_sub_ln135_fu_225_p2);
    sensitive << ( shl_ln_fu_217_p3 );

    SC_METHOD(thread_trunc_ln135_1_fu_193_p4);
    sensitive << ( i_0_reg_136 );

    SC_METHOD(thread_trunc_ln135_fu_213_p1);
    sensitive << ( i_0_reg_136 );

    SC_METHOD(thread_trunc_ln147_fu_290_p1);
    sensitive << ( i2_0_reg_159 );

    SC_METHOD(thread_trunc_ln1503_19_fu_312_p1);
    sensitive << ( lshr_ln1503_1_fu_306_p2 );

    SC_METHOD(thread_trunc_ln1503_fu_241_p1);
    sensitive << ( lshr_ln1503_fu_235_p2 );

    SC_METHOD(thread_xor_ln147_fu_275_p2);
    sensitive << ( i2_0_reg_159 );

    SC_METHOD(thread_zext_ln135_1_fu_203_p1);
    sensitive << ( trunc_ln135_1_fu_193_p4 );

    SC_METHOD(thread_zext_ln135_2_fu_231_p1);
    sensitive << ( sub_ln135_fu_225_p2 );

    SC_METHOD(thread_zext_ln135_fu_208_p1);
    sensitive << ( i_0_reg_136 );

    SC_METHOD(thread_zext_ln141_fu_252_p1);
    sensitive << ( i1_0_reg_148 );

    SC_METHOD(thread_zext_ln147_fu_285_p1);
    sensitive << ( sext_ln147_fu_281_p1 );

    SC_METHOD(thread_zext_ln1503_fu_302_p1);
    sensitive << ( op2_assign_1_fu_294_p3 );

    SC_METHOD(thread_zext_ln151_fu_329_p1);
    sensitive << ( i3_0_reg_170 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln134_fu_181_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln140_fu_246_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln150_fu_317_p2 );
    sensitive << ( icmp_ln146_fu_263_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_prepare_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_address0, "(port)input_V_address0");
    sc_trace(mVcdFile, input_V_ce0, "(port)input_V_ce0");
    sc_trace(mVcdFile, input_V_q0, "(port)input_V_q0");
    sc_trace(mVcdFile, data_V_address0, "(port)data_V_address0");
    sc_trace(mVcdFile, data_V_ce0, "(port)data_V_ce0");
    sc_trace(mVcdFile, data_V_we0, "(port)data_V_we0");
    sc_trace(mVcdFile, data_V_d0, "(port)data_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_2_fu_187_p2, "i_2_fu_187_p2");
    sc_trace(mVcdFile, i_2_reg_337, "i_2_reg_337");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln134_fu_181_p2, "icmp_ln134_fu_181_p2");
    sc_trace(mVcdFile, i_fu_257_p2, "i_fu_257_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln140_fu_246_p2, "icmp_ln140_fu_246_p2");
    sc_trace(mVcdFile, i_3_fu_269_p2, "i_3_fu_269_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_4_fu_323_p2, "i_4_fu_323_p2");
    sc_trace(mVcdFile, i_4_reg_366, "i_4_reg_366");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln151_fu_329_p1, "zext_ln151_fu_329_p1");
    sc_trace(mVcdFile, zext_ln151_reg_371, "zext_ln151_reg_371");
    sc_trace(mVcdFile, icmp_ln150_fu_317_p2, "icmp_ln150_fu_317_p2");
    sc_trace(mVcdFile, data1_V_address0, "data1_V_address0");
    sc_trace(mVcdFile, data1_V_ce0, "data1_V_ce0");
    sc_trace(mVcdFile, data1_V_we0, "data1_V_we0");
    sc_trace(mVcdFile, data1_V_d0, "data1_V_d0");
    sc_trace(mVcdFile, data1_V_q0, "data1_V_q0");
    sc_trace(mVcdFile, i_0_reg_136, "i_0_reg_136");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i1_0_reg_148, "i1_0_reg_148");
    sc_trace(mVcdFile, i2_0_reg_159, "i2_0_reg_159");
    sc_trace(mVcdFile, icmp_ln146_fu_263_p2, "icmp_ln146_fu_263_p2");
    sc_trace(mVcdFile, i3_0_reg_170, "i3_0_reg_170");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, zext_ln135_1_fu_203_p1, "zext_ln135_1_fu_203_p1");
    sc_trace(mVcdFile, zext_ln135_fu_208_p1, "zext_ln135_fu_208_p1");
    sc_trace(mVcdFile, zext_ln141_fu_252_p1, "zext_ln141_fu_252_p1");
    sc_trace(mVcdFile, zext_ln147_fu_285_p1, "zext_ln147_fu_285_p1");
    sc_trace(mVcdFile, trunc_ln1503_fu_241_p1, "trunc_ln1503_fu_241_p1");
    sc_trace(mVcdFile, trunc_ln1503_19_fu_312_p1, "trunc_ln1503_19_fu_312_p1");
    sc_trace(mVcdFile, trunc_ln135_1_fu_193_p4, "trunc_ln135_1_fu_193_p4");
    sc_trace(mVcdFile, trunc_ln135_fu_213_p1, "trunc_ln135_fu_213_p1");
    sc_trace(mVcdFile, shl_ln_fu_217_p3, "shl_ln_fu_217_p3");
    sc_trace(mVcdFile, sub_ln135_fu_225_p2, "sub_ln135_fu_225_p2");
    sc_trace(mVcdFile, zext_ln135_2_fu_231_p1, "zext_ln135_2_fu_231_p1");
    sc_trace(mVcdFile, lshr_ln1503_fu_235_p2, "lshr_ln1503_fu_235_p2");
    sc_trace(mVcdFile, xor_ln147_fu_275_p2, "xor_ln147_fu_275_p2");
    sc_trace(mVcdFile, sext_ln147_fu_281_p1, "sext_ln147_fu_281_p1");
    sc_trace(mVcdFile, trunc_ln147_fu_290_p1, "trunc_ln147_fu_290_p1");
    sc_trace(mVcdFile, op2_assign_1_fu_294_p3, "op2_assign_1_fu_294_p3");
    sc_trace(mVcdFile, zext_ln1503_fu_302_p1, "zext_ln1503_fu_302_p1");
    sc_trace(mVcdFile, lshr_ln1503_1_fu_306_p2, "lshr_ln1503_1_fu_306_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sha256_prepare_2::~sha256_prepare_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete data1_V_U;
}

void sha256_prepare_2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln140_fu_246_p2.read()))) {
        i1_0_reg_148 = i_fu_257_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln134_fu_181_p2.read(), ap_const_lv1_1))) {
        i1_0_reg_148 = ap_const_lv6_21;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln140_fu_246_p2.read(), ap_const_lv1_1))) {
        i2_0_reg_159 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln146_fu_263_p2.read()))) {
        i2_0_reg_159 = i_3_fu_269_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln146_fu_263_p2.read()))) {
        i3_0_reg_170 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i3_0_reg_170 = i_4_reg_366.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_136 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_136 = i_2_reg_337.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_337 = i_2_fu_187_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_4_reg_366 = i_4_fu_323_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln150_fu_317_p2.read()))) {
        zext_ln151_reg_371 = zext_ln151_fu_329_p1.read();
    }
}

void sha256_prepare_2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_prepare_2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_prepare_2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_prepare_2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256_prepare_2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256_prepare_2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256_prepare_2::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256_prepare_2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(icmp_ln150_fu_317_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(icmp_ln150_fu_317_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_data1_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        data1_V_address0 =  (sc_lv<6>) (zext_ln151_fu_329_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data1_V_address0 =  (sc_lv<6>) (zext_ln147_fu_285_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data1_V_address0 =  (sc_lv<6>) (zext_ln141_fu_252_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data1_V_address0 =  (sc_lv<6>) (zext_ln135_fu_208_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data1_V_address0 =  (sc_lv<6>) (ap_const_lv64_20);
    } else {
        data1_V_address0 = "XXXXXX";
    }
}

void sha256_prepare_2::thread_data1_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data1_V_ce0 = ap_const_logic_1;
    } else {
        data1_V_ce0 = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_data1_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data1_V_d0 = trunc_ln1503_19_fu_312_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data1_V_d0 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data1_V_d0 = trunc_ln1503_fu_241_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data1_V_d0 = ap_const_lv8_80;
    } else {
        data1_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_prepare_2::thread_data1_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln140_fu_246_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln134_fu_181_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln146_fu_263_p2.read())))) {
        data1_V_we0 = ap_const_logic_1;
    } else {
        data1_V_we0 = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_data_V_address0() {
    data_V_address0 =  (sc_lv<6>) (zext_ln151_reg_371.read());
}

void sha256_prepare_2::thread_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        data_V_ce0 = ap_const_logic_1;
    } else {
        data_V_ce0 = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_data_V_d0() {
    data_V_d0 = data1_V_q0.read();
}

void sha256_prepare_2::thread_data_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        data_V_we0 = ap_const_logic_1;
    } else {
        data_V_we0 = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_i_2_fu_187_p2() {
    i_2_fu_187_p2 = (!i_0_reg_136.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_reg_136.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256_prepare_2::thread_i_3_fu_269_p2() {
    i_3_fu_269_p2 = (!i2_0_reg_159.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i2_0_reg_159.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void sha256_prepare_2::thread_i_4_fu_323_p2() {
    i_4_fu_323_p2 = (!i3_0_reg_170.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i3_0_reg_170.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_prepare_2::thread_i_fu_257_p2() {
    i_fu_257_p2 = (!i1_0_reg_148.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i1_0_reg_148.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256_prepare_2::thread_icmp_ln134_fu_181_p2() {
    icmp_ln134_fu_181_p2 = (!i_0_reg_136.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_136.read() == ap_const_lv6_20);
}

void sha256_prepare_2::thread_icmp_ln140_fu_246_p2() {
    icmp_ln140_fu_246_p2 = (!i1_0_reg_148.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<1>(): sc_lv<1>(i1_0_reg_148.read() == ap_const_lv6_3F);
}

void sha256_prepare_2::thread_icmp_ln146_fu_263_p2() {
    icmp_ln146_fu_263_p2 = (!i2_0_reg_159.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i2_0_reg_159.read() == ap_const_lv4_8);
}

void sha256_prepare_2::thread_icmp_ln150_fu_317_p2() {
    icmp_ln150_fu_317_p2 = (!i3_0_reg_170.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i3_0_reg_170.read() == ap_const_lv7_40);
}

void sha256_prepare_2::thread_input_V_address0() {
    input_V_address0 =  (sc_lv<3>) (zext_ln135_1_fu_203_p1.read());
}

void sha256_prepare_2::thread_input_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        input_V_ce0 = ap_const_logic_1;
    } else {
        input_V_ce0 = ap_const_logic_0;
    }
}

void sha256_prepare_2::thread_lshr_ln1503_1_fu_306_p2() {
    lshr_ln1503_1_fu_306_p2 = (!zext_ln1503_fu_302_p1.read().is_01())? sc_lv<9>(): ap_const_lv9_100 >> (unsigned short)zext_ln1503_fu_302_p1.read().to_uint();
}

void sha256_prepare_2::thread_lshr_ln1503_fu_235_p2() {
    lshr_ln1503_fu_235_p2 = (!zext_ln135_2_fu_231_p1.read().is_01())? sc_lv<32>(): input_V_q0.read() >> (unsigned short)zext_ln135_2_fu_231_p1.read().to_uint();
}

void sha256_prepare_2::thread_op2_assign_1_fu_294_p3() {
    op2_assign_1_fu_294_p3 = esl_concat<3,3>(trunc_ln147_fu_290_p1.read(), ap_const_lv3_0);
}

void sha256_prepare_2::thread_sext_ln147_fu_281_p1() {
    sext_ln147_fu_281_p1 = esl_sext<6,4>(xor_ln147_fu_275_p2.read());
}

void sha256_prepare_2::thread_shl_ln_fu_217_p3() {
    shl_ln_fu_217_p3 = esl_concat<2,3>(trunc_ln135_fu_213_p1.read(), ap_const_lv3_0);
}

void sha256_prepare_2::thread_sub_ln135_fu_225_p2() {
    sub_ln135_fu_225_p2 = (!ap_const_lv5_18.is_01() || !shl_ln_fu_217_p3.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_18) - sc_biguint<5>(shl_ln_fu_217_p3.read()));
}

void sha256_prepare_2::thread_trunc_ln135_1_fu_193_p4() {
    trunc_ln135_1_fu_193_p4 = i_0_reg_136.read().range(4, 2);
}

void sha256_prepare_2::thread_trunc_ln135_fu_213_p1() {
    trunc_ln135_fu_213_p1 = i_0_reg_136.read().range(2-1, 0);
}

void sha256_prepare_2::thread_trunc_ln147_fu_290_p1() {
    trunc_ln147_fu_290_p1 = i2_0_reg_159.read().range(3-1, 0);
}

void sha256_prepare_2::thread_trunc_ln1503_19_fu_312_p1() {
    trunc_ln1503_19_fu_312_p1 = lshr_ln1503_1_fu_306_p2.read().range(8-1, 0);
}

void sha256_prepare_2::thread_trunc_ln1503_fu_241_p1() {
    trunc_ln1503_fu_241_p1 = lshr_ln1503_fu_235_p2.read().range(8-1, 0);
}

void sha256_prepare_2::thread_xor_ln147_fu_275_p2() {
    xor_ln147_fu_275_p2 = (i2_0_reg_159.read() ^ ap_const_lv4_F);
}

void sha256_prepare_2::thread_zext_ln135_1_fu_203_p1() {
    zext_ln135_1_fu_203_p1 = esl_zext<64,3>(trunc_ln135_1_fu_193_p4.read());
}

void sha256_prepare_2::thread_zext_ln135_2_fu_231_p1() {
    zext_ln135_2_fu_231_p1 = esl_zext<32,5>(sub_ln135_fu_225_p2.read());
}

void sha256_prepare_2::thread_zext_ln135_fu_208_p1() {
    zext_ln135_fu_208_p1 = esl_zext<64,6>(i_0_reg_136.read());
}

void sha256_prepare_2::thread_zext_ln141_fu_252_p1() {
    zext_ln141_fu_252_p1 = esl_zext<64,6>(i1_0_reg_148.read());
}

void sha256_prepare_2::thread_zext_ln147_fu_285_p1() {
    zext_ln147_fu_285_p1 = esl_zext<64,6>(sext_ln147_fu_281_p1.read());
}

void sha256_prepare_2::thread_zext_ln1503_fu_302_p1() {
    zext_ln1503_fu_302_p1 = esl_zext<9,6>(op2_assign_1_fu_294_p3.read());
}

void sha256_prepare_2::thread_zext_ln151_fu_329_p1() {
    zext_ln151_fu_329_p1 = esl_zext<64,7>(i3_0_reg_170.read());
}

void sha256_prepare_2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln134_fu_181_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln140_fu_246_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln146_fu_263_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln150_fu_317_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

