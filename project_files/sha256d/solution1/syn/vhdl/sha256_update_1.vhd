-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_update_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    state_V_ce0 : OUT STD_LOGIC;
    state_V_we0 : OUT STD_LOGIC;
    state_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    state_V_ce1 : OUT STD_LOGIC;
    state_V_we1 : OUT STD_LOGIC;
    state_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_update_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_201_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_306 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln91_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_reg_311 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln90_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_218_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_fu_235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_332 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln99_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_270_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln105_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_282_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal block_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal block_V_ce0 : STD_LOGIC;
    signal block_V_we0 : STD_LOGIC;
    signal block_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_transform_fu_186_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_186_ap_done : STD_LOGIC;
    signal grp_sha256_transform_fu_186_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_186_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_186_state_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_186_state_V_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_186_state_V_we0 : STD_LOGIC;
    signal grp_sha256_transform_fu_186_state_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_186_state_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_transform_fu_186_state_V_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_186_state_V_we1 : STD_LOGIC;
    signal grp_sha256_transform_fu_186_state_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_186_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_186_data_V_ce0 : STD_LOGIC;
    signal i_0_reg_130 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_141 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln96_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_0_reg_152 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i3_0_reg_164 : STD_LOGIC_VECTOR (5 downto 0);
    signal i4_0_reg_175 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln109_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_transform_fu_186_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln97_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_1_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_241_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln110_fu_288_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln110_fu_294_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_V_ce0 : OUT STD_LOGIC;
        state_V_we0 : OUT STD_LOGIC;
        state_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        state_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_V_ce1 : OUT STD_LOGIC;
        state_V_we1 : OUT STD_LOGIC;
        state_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_update_blodEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_V_U : component sha256_update_blodEe
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_V_address0,
        ce0 => block_V_ce0,
        we0 => block_V_we0,
        d0 => block_V_d0,
        q0 => block_V_q0);

    grp_sha256_transform_fu_186 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_186_ap_start,
        ap_done => grp_sha256_transform_fu_186_ap_done,
        ap_idle => grp_sha256_transform_fu_186_ap_idle,
        ap_ready => grp_sha256_transform_fu_186_ap_ready,
        state_V_address0 => grp_sha256_transform_fu_186_state_V_address0,
        state_V_ce0 => grp_sha256_transform_fu_186_state_V_ce0,
        state_V_we0 => grp_sha256_transform_fu_186_state_V_we0,
        state_V_d0 => grp_sha256_transform_fu_186_state_V_d0,
        state_V_q0 => state_V_q0,
        state_V_address1 => grp_sha256_transform_fu_186_state_V_address1,
        state_V_ce1 => grp_sha256_transform_fu_186_state_V_ce1,
        state_V_we1 => grp_sha256_transform_fu_186_state_V_we1,
        state_V_d1 => grp_sha256_transform_fu_186_state_V_d1,
        state_V_q1 => state_V_q1,
        data_V_address0 => grp_sha256_transform_fu_186_data_V_address0,
        data_V_ce0 => grp_sha256_transform_fu_186_data_V_ce0,
        data_V_q0 => block_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_transform_fu_186_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_transform_fu_186_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln109_fu_276_p2 = ap_const_lv1_1)) or ((icmp_ln90_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_sha256_transform_fu_186_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_transform_fu_186_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_transform_fu_186_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i1_0_reg_141 <= i_2_fu_218_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha256_transform_fu_186_ap_done = ap_const_logic_1))) then 
                i1_0_reg_141 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i2_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln96_fu_212_p2 = ap_const_lv1_1))) then 
                i2_0_reg_152 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_0_reg_152 <= i_3_reg_332;
            end if; 
        end if;
    end process;

    i3_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i3_0_reg_164 <= i_4_fu_270_p2;
            elsif (((icmp_ln99_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i3_0_reg_164 <= ap_const_lv6_11;
            end if; 
        end if;
    end process;

    i4_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i4_0_reg_175 <= ap_const_lv4_0;
            elsif (((icmp_ln109_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i4_0_reg_175 <= i_5_fu_282_p2;
            end if; 
        end if;
    end process;

    i_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_130 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_130 <= i_reg_306;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_332 <= i_3_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_306 <= i_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln91_reg_311(6 downto 0) <= zext_ln91_fu_207_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln91_reg_311(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln90_fu_195_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln99_fu_229_p2, ap_CS_fsm_state8, icmp_ln105_fu_259_p2, ap_CS_fsm_state9, grp_sha256_transform_fu_186_ap_done, ap_CS_fsm_state4, icmp_ln96_fu_212_p2, icmp_ln109_fu_276_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln90_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha256_transform_fu_186_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln96_fu_212_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln99_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln105_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln109_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_sha256_transform_fu_186_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_transform_fu_186_ap_done, ap_CS_fsm_state10)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_sha256_transform_fu_186_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha256_transform_fu_186_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_sha256_transform_fu_186_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_V_address0_assign_proc : process(zext_ln91_reg_311, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_sha256_transform_fu_186_data_V_address0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln109_fu_276_p2, ap_CS_fsm_state10, zext_ln97_fu_224_p1, zext_ln100_fu_254_p1, zext_ln106_fu_265_p1, zext_ln110_fu_298_p1)
    begin
        if (((icmp_ln109_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            block_V_address0 <= zext_ln110_fu_298_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            block_V_address0 <= zext_ln106_fu_265_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            block_V_address0 <= zext_ln100_fu_254_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_V_address0 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_V_address0 <= zext_ln97_fu_224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_V_address0 <= zext_ln91_reg_311(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            block_V_address0 <= grp_sha256_transform_fu_186_data_V_address0;
        else 
            block_V_address0 <= "XXXXXX";
        end if; 
    end process;


    block_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_sha256_transform_fu_186_data_V_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln109_fu_276_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln109_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            block_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            block_V_ce0 <= grp_sha256_transform_fu_186_data_V_ce0;
        else 
            block_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_V_d0_assign_proc : process(data_V_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state7, icmp_ln109_fu_276_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_V_d0 <= ap_const_lv8_80;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln109_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            block_V_d0 <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            block_V_d0 <= data_V_q0;
        else 
            block_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    block_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln99_fu_229_p2, ap_CS_fsm_state8, icmp_ln105_fu_259_p2, ap_CS_fsm_state9, ap_CS_fsm_state3, icmp_ln96_fu_212_p2, ap_CS_fsm_state7, icmp_ln109_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln109_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln105_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln99_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln96_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            block_V_we0 <= ap_const_logic_1;
        else 
            block_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln91_fu_207_p1, ap_CS_fsm_state6, zext_ln100_1_fu_249_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_V_address0 <= zext_ln100_1_fu_249_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_address0 <= zext_ln91_fu_207_p1(5 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha256_transform_fu_186_ap_start <= grp_sha256_transform_fu_186_ap_start_reg;
    i_2_fu_218_p2 <= std_logic_vector(unsigned(i1_0_reg_141) + unsigned(ap_const_lv7_1));
    i_3_fu_235_p2 <= std_logic_vector(unsigned(i2_0_reg_152) + unsigned(ap_const_lv5_1));
    i_4_fu_270_p2 <= std_logic_vector(unsigned(i3_0_reg_164) + unsigned(ap_const_lv6_1));
    i_5_fu_282_p2 <= std_logic_vector(unsigned(i4_0_reg_175) + unsigned(ap_const_lv4_1));
    i_fu_201_p2 <= std_logic_vector(unsigned(i_0_reg_130) + unsigned(ap_const_lv7_1));
    icmp_ln105_fu_259_p2 <= "1" when (i3_0_reg_164 = ap_const_lv6_38) else "0";
    icmp_ln109_fu_276_p2 <= "1" when (i4_0_reg_175 = ap_const_lv4_8) else "0";
    icmp_ln90_fu_195_p2 <= "1" when (i_0_reg_130 = ap_const_lv7_40) else "0";
    icmp_ln96_fu_212_p2 <= "1" when (i1_0_reg_141 = ap_const_lv7_40) else "0";
    icmp_ln99_fu_229_p2 <= "1" when (i2_0_reg_152 = ap_const_lv5_10) else "0";
    or_ln_fu_241_p3 <= (ap_const_lv2_2 & i2_0_reg_152);
        sext_ln110_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln110_fu_288_p2),6));

    state_V_address0 <= grp_sha256_transform_fu_186_state_V_address0;
    state_V_address1 <= grp_sha256_transform_fu_186_state_V_address1;

    state_V_ce0_assign_proc : process(grp_sha256_transform_fu_186_state_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_ce0 <= grp_sha256_transform_fu_186_state_V_ce0;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_ce1_assign_proc : process(grp_sha256_transform_fu_186_state_V_ce1, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_ce1 <= grp_sha256_transform_fu_186_state_V_ce1;
        else 
            state_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_V_d0 <= grp_sha256_transform_fu_186_state_V_d0;
    state_V_d1 <= grp_sha256_transform_fu_186_state_V_d1;

    state_V_we0_assign_proc : process(grp_sha256_transform_fu_186_state_V_we0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_we0 <= grp_sha256_transform_fu_186_state_V_we0;
        else 
            state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_we1_assign_proc : process(grp_sha256_transform_fu_186_state_V_we1, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_V_we1 <= grp_sha256_transform_fu_186_state_V_we1;
        else 
            state_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln110_fu_288_p2 <= (i4_0_reg_175 xor ap_const_lv4_8);
    zext_ln100_1_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_241_p3),64));
    zext_ln100_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_152),64));
    zext_ln106_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_164),64));
    zext_ln110_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln110_fu_294_p1),64));
    zext_ln91_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_130),64));
    zext_ln97_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_141),64));
end behav;
