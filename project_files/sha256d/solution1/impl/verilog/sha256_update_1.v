// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_update_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_V_address0,
        state_V_ce0,
        state_V_we0,
        state_V_d0,
        state_V_q0,
        state_V_address1,
        state_V_ce1,
        state_V_we1,
        state_V_d1,
        state_V_q1,
        data_V_address0,
        data_V_ce0,
        data_V_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] state_V_address0;
output   state_V_ce0;
output   state_V_we0;
output  [31:0] state_V_d0;
input  [31:0] state_V_q0;
output  [2:0] state_V_address1;
output   state_V_ce1;
output   state_V_we1;
output  [31:0] state_V_d1;
input  [31:0] state_V_q1;
output  [4:0] data_V_address0;
output   data_V_ce0;
input  [7:0] data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg state_V_ce0;
reg state_V_we0;
reg state_V_ce1;
reg state_V_we1;
reg[4:0] data_V_address0;
reg data_V_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_201_p2;
reg   [6:0] i_reg_306;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln91_fu_207_p1;
reg   [63:0] zext_ln91_reg_311;
wire   [0:0] icmp_ln90_fu_195_p2;
wire   [6:0] i_2_fu_218_p2;
wire    ap_CS_fsm_state5;
wire   [4:0] i_3_fu_235_p2;
reg   [4:0] i_3_reg_332;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln99_fu_229_p2;
wire   [5:0] i_4_fu_270_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln105_fu_259_p2;
wire   [3:0] i_5_fu_282_p2;
wire    ap_CS_fsm_state9;
reg   [5:0] block_V_address0;
reg    block_V_ce0;
reg    block_V_we0;
reg   [7:0] block_V_d0;
wire   [7:0] block_V_q0;
wire    grp_sha256_transform_fu_186_ap_start;
wire    grp_sha256_transform_fu_186_ap_done;
wire    grp_sha256_transform_fu_186_ap_idle;
wire    grp_sha256_transform_fu_186_ap_ready;
wire   [2:0] grp_sha256_transform_fu_186_state_V_address0;
wire    grp_sha256_transform_fu_186_state_V_ce0;
wire    grp_sha256_transform_fu_186_state_V_we0;
wire   [31:0] grp_sha256_transform_fu_186_state_V_d0;
wire   [2:0] grp_sha256_transform_fu_186_state_V_address1;
wire    grp_sha256_transform_fu_186_state_V_ce1;
wire    grp_sha256_transform_fu_186_state_V_we1;
wire   [31:0] grp_sha256_transform_fu_186_state_V_d1;
wire   [5:0] grp_sha256_transform_fu_186_data_V_address0;
wire    grp_sha256_transform_fu_186_data_V_ce0;
reg   [6:0] i_0_reg_130;
wire    ap_CS_fsm_state3;
reg   [6:0] i1_0_reg_141;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln96_fu_212_p2;
reg   [4:0] i2_0_reg_152;
wire    ap_CS_fsm_state7;
reg   [5:0] i3_0_reg_164;
reg   [3:0] i4_0_reg_175;
wire   [0:0] icmp_ln109_fu_276_p2;
reg    grp_sha256_transform_fu_186_ap_start_reg;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln97_fu_224_p1;
wire   [63:0] zext_ln100_1_fu_249_p1;
wire   [63:0] zext_ln100_fu_254_p1;
wire   [63:0] zext_ln106_fu_265_p1;
wire   [63:0] zext_ln110_fu_298_p1;
wire   [6:0] or_ln_fu_241_p3;
wire   [3:0] xor_ln110_fu_288_p2;
wire  signed [5:0] sext_ln110_fu_294_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_sha256_transform_fu_186_ap_start_reg = 1'b0;
end

sha256_update_blodEe #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
block_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_V_address0),
    .ce0(block_V_ce0),
    .we0(block_V_we0),
    .d0(block_V_d0),
    .q0(block_V_q0)
);

sha256_transform grp_sha256_transform_fu_186(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_186_ap_start),
    .ap_done(grp_sha256_transform_fu_186_ap_done),
    .ap_idle(grp_sha256_transform_fu_186_ap_idle),
    .ap_ready(grp_sha256_transform_fu_186_ap_ready),
    .state_V_address0(grp_sha256_transform_fu_186_state_V_address0),
    .state_V_ce0(grp_sha256_transform_fu_186_state_V_ce0),
    .state_V_we0(grp_sha256_transform_fu_186_state_V_we0),
    .state_V_d0(grp_sha256_transform_fu_186_state_V_d0),
    .state_V_q0(state_V_q0),
    .state_V_address1(grp_sha256_transform_fu_186_state_V_address1),
    .state_V_ce1(grp_sha256_transform_fu_186_state_V_ce1),
    .state_V_we1(grp_sha256_transform_fu_186_state_V_we1),
    .state_V_d1(grp_sha256_transform_fu_186_state_V_d1),
    .state_V_q1(state_V_q1),
    .data_V_address0(grp_sha256_transform_fu_186_data_V_address0),
    .data_V_ce0(grp_sha256_transform_fu_186_data_V_ce0),
    .data_V_q0(block_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_186_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state9) & (icmp_ln109_fu_276_p2 == 1'd1)) | ((icmp_ln90_fu_195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_sha256_transform_fu_186_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_186_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_186_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_0_reg_141 <= i_2_fu_218_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_sha256_transform_fu_186_ap_done == 1'b1))) begin
        i1_0_reg_141 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln96_fu_212_p2 == 1'd1))) begin
        i2_0_reg_152 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_0_reg_152 <= i_3_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        i3_0_reg_164 <= i_4_fu_270_p2;
    end else if (((icmp_ln99_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i3_0_reg_164 <= 6'd17;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i4_0_reg_175 <= 4'd0;
    end else if (((icmp_ln109_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i4_0_reg_175 <= i_5_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_130 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_130 <= i_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_332 <= i_3_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_306 <= i_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln91_reg_311[6 : 0] <= zext_ln91_fu_207_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (grp_sha256_transform_fu_186_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_sha256_transform_fu_186_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln109_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        block_V_address0 = zext_ln110_fu_298_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        block_V_address0 = zext_ln106_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        block_V_address0 = zext_ln100_fu_254_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_V_address0 = zext_ln97_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_V_address0 = zext_ln91_reg_311;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        block_V_address0 = grp_sha256_transform_fu_186_data_V_address0;
    end else begin
        block_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln109_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        block_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        block_V_ce0 = grp_sha256_transform_fu_186_data_V_ce0;
    end else begin
        block_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_V_d0 = 8'd128;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln109_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        block_V_d0 = 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        block_V_d0 = data_V_q0;
    end else begin
        block_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln109_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln105_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln99_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln96_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        block_V_we0 = 1'b1;
    end else begin
        block_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_V_address0 = zext_ln100_1_fu_249_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_address0 = zext_ln91_fu_207_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_ce0 = grp_sha256_transform_fu_186_state_V_ce0;
    end else begin
        state_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_ce1 = grp_sha256_transform_fu_186_state_V_ce1;
    end else begin
        state_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_we0 = grp_sha256_transform_fu_186_state_V_we0;
    end else begin
        state_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        state_V_we1 = grp_sha256_transform_fu_186_state_V_we1;
    end else begin
        state_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln90_fu_195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_sha256_transform_fu_186_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln96_fu_212_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln99_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln105_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln109_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_sha256_transform_fu_186_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_sha256_transform_fu_186_ap_start = grp_sha256_transform_fu_186_ap_start_reg;

assign i_2_fu_218_p2 = (i1_0_reg_141 + 7'd1);

assign i_3_fu_235_p2 = (i2_0_reg_152 + 5'd1);

assign i_4_fu_270_p2 = (i3_0_reg_164 + 6'd1);

assign i_5_fu_282_p2 = (i4_0_reg_175 + 4'd1);

assign i_fu_201_p2 = (i_0_reg_130 + 7'd1);

assign icmp_ln105_fu_259_p2 = ((i3_0_reg_164 == 6'd56) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_276_p2 = ((i4_0_reg_175 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_195_p2 = ((i_0_reg_130 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_212_p2 = ((i1_0_reg_141 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_229_p2 = ((i2_0_reg_152 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln_fu_241_p3 = {{2'd2}, {i2_0_reg_152}};

assign sext_ln110_fu_294_p1 = $signed(xor_ln110_fu_288_p2);

assign state_V_address0 = grp_sha256_transform_fu_186_state_V_address0;

assign state_V_address1 = grp_sha256_transform_fu_186_state_V_address1;

assign state_V_d0 = grp_sha256_transform_fu_186_state_V_d0;

assign state_V_d1 = grp_sha256_transform_fu_186_state_V_d1;

assign xor_ln110_fu_288_p2 = (i4_0_reg_175 ^ 4'd8);

assign zext_ln100_1_fu_249_p1 = or_ln_fu_241_p3;

assign zext_ln100_fu_254_p1 = i2_0_reg_152;

assign zext_ln106_fu_265_p1 = i3_0_reg_164;

assign zext_ln110_fu_298_p1 = $unsigned(sext_ln110_fu_294_p1);

assign zext_ln91_fu_207_p1 = i_0_reg_130;

assign zext_ln97_fu_224_p1 = i1_0_reg_141;

always @ (posedge ap_clk) begin
    zext_ln91_reg_311[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha256_update_1
