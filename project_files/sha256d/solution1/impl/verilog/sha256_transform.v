// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_V_address0,
        state_V_ce0,
        state_V_we0,
        state_V_d0,
        state_V_q0,
        state_V_address1,
        state_V_ce1,
        state_V_we1,
        state_V_d1,
        state_V_q1,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        data_V_offset
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] state_V_address0;
output   state_V_ce0;
output   state_V_we0;
output  [31:0] state_V_d0;
input  [31:0] state_V_q0;
output  [2:0] state_V_address1;
output   state_V_ce1;
output   state_V_we1;
output  [31:0] state_V_d1;
input  [31:0] state_V_q1;
output  [6:0] data_V_address0;
output   data_V_ce0;
input  [7:0] data_V_q0;
input  [0:0] data_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] state_V_address0;
reg state_V_ce0;
reg state_V_we0;
reg[31:0] state_V_d0;
reg[2:0] state_V_address1;
reg state_V_ce1;
reg state_V_we1;
reg[31:0] state_V_d1;
reg data_V_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] K_V_address0;
reg    K_V_ce0;
wire   [31:0] K_V_q0;
wire   [4:0] add_ln700_fu_445_p2;
reg   [4:0] add_ln700_reg_1023;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_439_p2;
wire   [6:0] j_V_fu_473_p2;
reg   [6:0] j_V_reg_1033;
wire   [5:0] trunc_ln215_2_fu_495_p1;
reg   [5:0] trunc_ln215_2_reg_1041;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln40_fu_489_p2;
wire   [2:0] state_V_addr_8_reg_1057;
wire   [31:0] m_V_q0;
reg   [31:0] m_V_load_reg_1062;
wire    ap_CS_fsm_state5;
wire   [31:0] m_V_q1;
reg   [31:0] m_V_load_1_reg_1071;
wire   [6:0] i_V_fu_699_p2;
wire    ap_CS_fsm_state6;
reg   [31:0] a_V_reg_1091;
wire    ap_CS_fsm_state7;
reg   [31:0] b_V_reg_1097;
wire   [2:0] state_V_addr_9_reg_1103;
wire   [2:0] state_V_addr_10_reg_1108;
reg   [31:0] c_V_reg_1113;
wire    ap_CS_fsm_state8;
reg   [31:0] d_V_reg_1119;
wire   [2:0] state_V_addr_11_reg_1125;
wire   [2:0] state_V_addr_12_reg_1130;
reg   [31:0] e_V_reg_1135;
wire    ap_CS_fsm_state9;
reg   [31:0] f_V_reg_1141;
wire   [2:0] state_V_addr_13_reg_1147;
wire   [2:0] state_V_addr_14_reg_1152;
reg   [31:0] g_V_reg_1157;
wire    ap_CS_fsm_state10;
reg   [31:0] h_V_reg_1163;
wire   [6:0] i_V_2_fu_711_p2;
reg   [6:0] i_V_2_reg_1172;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln887_1_fu_705_p2;
wire   [31:0] add_ln209_13_fu_831_p2;
reg   [31:0] add_ln209_13_reg_1187;
wire   [31:0] ret_V_64_fu_855_p2;
reg   [31:0] ret_V_64_reg_1192;
wire   [31:0] add_ln700_5_fu_873_p2;
reg   [31:0] add_ln700_5_reg_1197;
wire   [31:0] add_ln700_7_fu_878_p2;
reg   [31:0] add_ln700_7_reg_1202;
wire   [31:0] add_ln700_8_fu_883_p2;
reg   [31:0] add_ln700_8_reg_1207;
wire   [31:0] add_ln700_9_fu_888_p2;
reg   [31:0] add_ln700_9_reg_1212;
wire   [31:0] add_ln700_10_fu_893_p2;
reg   [31:0] add_ln700_10_reg_1217;
wire   [31:0] e_V_2_fu_987_p2;
wire    ap_CS_fsm_state12;
wire   [31:0] a_V_2_fu_999_p2;
reg   [5:0] m_V_address0;
reg    m_V_ce0;
reg    m_V_we0;
wire   [31:0] m_V_d0;
reg   [5:0] m_V_address1;
reg    m_V_ce1;
reg    m_V_we1;
wire   [31:0] m_V_d1;
reg   [6:0] p_0262_0_reg_308;
wire    ap_CS_fsm_state3;
reg   [4:0] p_01115_0_reg_319;
reg   [6:0] p_01115_1_reg_331;
reg   [6:0] p_01115_2_reg_343;
reg   [31:0] lhs_V_20_reg_354;
reg   [31:0] rhs_V_33_reg_364;
reg   [31:0] rhs_V_34_reg_375;
reg   [31:0] p_01587_0_reg_386;
reg   [31:0] lhs_V_reg_397;
reg   [31:0] rhs_V_reg_407;
reg   [31:0] rhs_V_32_reg_418;
reg   [31:0] p_01439_0_reg_429;
wire   [63:0] zext_ln1356_fu_468_p1;
wire   [63:0] zext_ln544_fu_479_p1;
wire   [63:0] zext_ln544_8_fu_505_p1;
wire   [63:0] zext_ln544_9_fu_516_p1;
wire   [63:0] zext_ln544_10_fu_526_p1;
wire   [63:0] zext_ln544_11_fu_536_p1;
wire   [63:0] zext_ln544_5_fu_541_p1;
wire   [63:0] zext_ln544_6_fu_819_p1;
wire   [31:0] add_ln700_3_fu_861_p2;
wire   [31:0] add_ln700_4_fu_867_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln700_6_fu_1004_p2;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [5:0] trunc_ln215_fu_451_p1;
wire   [5:0] ret_V_fu_455_p2;
wire   [6:0] tmp_fu_461_p3;
wire   [5:0] ret_V_41_fu_499_p2;
wire   [5:0] ret_V_45_fu_510_p2;
wire   [5:0] ret_V_46_fu_521_p2;
wire   [5:0] ret_V_50_fu_531_p2;
wire   [16:0] trunc_ln1503_fu_555_p1;
wire   [14:0] r_V_fu_546_p4;
wire   [18:0] trunc_ln1503_10_fu_575_p1;
wire   [12:0] r_V_s_fu_566_p4;
wire   [21:0] r_V_11_fu_586_p4;
wire   [31:0] r_V_24_fu_595_p1;
wire   [31:0] ret_V_66_fu_578_p3;
wire   [31:0] xor_ln1357_fu_599_p2;
wire   [31:0] ret_V_65_fu_558_p3;
wire   [6:0] trunc_ln1503_11_fu_621_p1;
wire   [24:0] r_V_12_fu_611_p4;
wire   [17:0] trunc_ln1503_12_fu_643_p1;
wire   [13:0] r_V_13_fu_633_p4;
wire   [28:0] r_V_14_fu_655_p4;
wire   [31:0] r_V_25_fu_665_p1;
wire   [31:0] ret_V_68_fu_647_p3;
wire   [31:0] xor_ln1357_12_fu_669_p2;
wire   [31:0] ret_V_67_fu_625_p3;
wire   [31:0] ret_V_44_fu_605_p2;
wire   [31:0] ret_V_49_fu_675_p2;
wire   [31:0] add_ln209_10_fu_686_p2;
wire   [31:0] add_ln209_fu_681_p2;
wire   [5:0] trunc_ln1503_13_fu_727_p1;
wire   [25:0] r_V_15_fu_717_p4;
wire   [10:0] trunc_ln1503_14_fu_749_p1;
wire   [20:0] r_V_16_fu_739_p4;
wire   [24:0] trunc_ln1503_15_fu_771_p1;
wire   [6:0] r_V_17_fu_761_p4;
wire   [31:0] ret_V_69_fu_731_p3;
wire   [31:0] ret_V_70_fu_753_p3;
wire   [31:0] xor_ln1357_14_fu_783_p2;
wire   [31:0] ret_V_71_fu_775_p3;
wire   [31:0] r_V_26_fu_801_p2;
wire   [31:0] ret_V_73_fu_807_p2;
wire   [31:0] ret_V_72_fu_795_p2;
wire   [31:0] ret_V_57_fu_813_p2;
wire   [31:0] ret_V_54_fu_789_p2;
wire   [31:0] add_ln209_12_fu_825_p2;
wire   [31:0] xor_ln1357_9_fu_837_p2;
wire   [31:0] ret_V_77_fu_843_p2;
wire   [31:0] ret_V_78_fu_849_p2;
wire   [31:0] add_ln209_11_fu_898_p2;
wire   [1:0] trunc_ln1503_16_fu_919_p1;
wire   [29:0] r_V_18_fu_909_p4;
wire   [12:0] trunc_ln1503_17_fu_941_p1;
wire   [18:0] r_V_19_fu_931_p4;
wire   [21:0] trunc_ln1503_18_fu_963_p1;
wire   [9:0] r_V_20_fu_953_p4;
wire   [31:0] ret_V_74_fu_923_p3;
wire   [31:0] ret_V_75_fu_945_p3;
wire   [31:0] xor_ln1357_17_fu_975_p2;
wire   [31:0] ret_V_76_fu_967_p3;
wire   [31:0] t1_V_fu_904_p2;
wire   [31:0] ret_V_61_fu_981_p2;
wire   [31:0] add_ln209_16_fu_993_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

sha256_transform_cud #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
K_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K_V_address0),
    .ce0(K_V_ce0),
    .q0(K_V_q0)
);

sha256_transform_dEe #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
m_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_V_address0),
    .ce0(m_V_ce0),
    .we0(m_V_we0),
    .d0(m_V_d0),
    .q0(m_V_q0),
    .address1(m_V_address1),
    .ce1(m_V_ce1),
    .we1(m_V_we1),
    .d1(m_V_d1),
    .q1(m_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        lhs_V_20_reg_354 <= a_V_2_fu_999_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lhs_V_20_reg_354 <= a_V_reg_1091;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        lhs_V_reg_397 <= e_V_2_fu_987_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lhs_V_reg_397 <= e_V_reg_1135;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_01115_0_reg_319 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_01115_0_reg_319 <= add_ln700_reg_1023;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_01115_1_reg_331 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_01115_1_reg_331 <= i_V_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_01115_2_reg_343 <= i_V_2_reg_1172;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_01115_2_reg_343 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_01439_0_reg_429 <= rhs_V_32_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_01439_0_reg_429 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_01587_0_reg_386 <= rhs_V_34_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_01587_0_reg_386 <= d_V_reg_1119;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0262_0_reg_308 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_0262_0_reg_308 <= j_V_reg_1033;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_32_reg_418 <= rhs_V_reg_407;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_32_reg_418 <= state_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_33_reg_364 <= lhs_V_20_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_33_reg_364 <= b_V_reg_1097;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_34_reg_375 <= rhs_V_33_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_34_reg_375 <= c_V_reg_1113;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rhs_V_reg_407 <= lhs_V_reg_397;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        rhs_V_reg_407 <= f_V_reg_1141;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_V_reg_1091 <= state_V_q0;
        b_V_reg_1097 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_705_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln209_13_reg_1187 <= add_ln209_13_fu_831_p2;
        ret_V_64_reg_1192 <= ret_V_64_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln700_10_reg_1217 <= add_ln700_10_fu_893_p2;
        add_ln700_5_reg_1197 <= add_ln700_5_fu_873_p2;
        add_ln700_7_reg_1202 <= add_ln700_7_fu_878_p2;
        add_ln700_8_reg_1207 <= add_ln700_8_fu_883_p2;
        add_ln700_9_reg_1212 <= add_ln700_9_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln700_reg_1023 <= add_ln700_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_V_reg_1113 <= state_V_q0;
        d_V_reg_1119 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        e_V_reg_1135 <= state_V_q0;
        f_V_reg_1141 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        g_V_reg_1157 <= state_V_q0;
        h_V_reg_1163 <= state_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_V_2_reg_1172 <= i_V_2_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_V_reg_1033 <= j_V_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_V_load_1_reg_1071 <= m_V_q1;
        m_V_load_reg_1062 <= m_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        trunc_ln215_2_reg_1041 <= trunc_ln215_2_fu_495_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        K_V_ce0 = 1'b1;
    end else begin
        K_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        m_V_address0 = zext_ln544_6_fu_819_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_V_address0 = zext_ln544_11_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_V_address0 = zext_ln544_8_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_V_address0 = zext_ln544_fu_479_p1;
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_address1 = zext_ln544_5_fu_541_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_V_address1 = zext_ln544_10_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_V_address1 = zext_ln544_9_fu_516_p1;
    end else begin
        m_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        m_V_ce1 = 1'b1;
    end else begin
        m_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_V_we0 = 1'b1;
    end else begin
        m_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_V_we1 = 1'b1;
    end else begin
        m_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_address0 = state_V_addr_13_reg_1147;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_address0 = state_V_addr_11_reg_1125;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_address0 = state_V_addr_9_reg_1103;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_V_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11))) begin
        state_V_address0 = 64'd0;
    end else begin
        state_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_address1 = state_V_addr_14_reg_1152;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_address1 = state_V_addr_12_reg_1130;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_address1 = state_V_addr_10_reg_1108;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_V_address1 = state_V_addr_8_reg_1057;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_V_address1 = 64'd1;
    end else begin
        state_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        state_V_ce0 = 1'b1;
    end else begin
        state_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        state_V_ce1 = 1'b1;
    end else begin
        state_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_d0 = add_ln700_9_reg_1212;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_d0 = add_ln700_7_reg_1202;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_d0 = add_ln700_5_reg_1197;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_V_d0 = add_ln700_3_fu_861_p2;
    end else begin
        state_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_V_d1 = add_ln700_10_reg_1217;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_V_d1 = add_ln700_8_reg_1207;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_V_d1 = add_ln700_6_fu_1004_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_V_d1 = add_ln700_4_fu_867_p2;
    end else begin
        state_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln887_1_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        state_V_we0 = 1'b1;
    end else begin
        state_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln887_1_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        state_V_we1 = 1'b1;
    end else begin
        state_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln40_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln887_1_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_V_address0 = zext_ln544_6_fu_819_p1;

assign a_V_2_fu_999_p2 = (add_ln209_16_fu_993_p2 + ret_V_64_reg_1192);

assign add_ln209_10_fu_686_p2 = (ret_V_44_fu_605_p2 + ret_V_49_fu_675_p2);

assign add_ln209_11_fu_898_p2 = (K_V_q0 + m_V_q0);

assign add_ln209_12_fu_825_p2 = (ret_V_57_fu_813_p2 + ret_V_54_fu_789_p2);

assign add_ln209_13_fu_831_p2 = (add_ln209_12_fu_825_p2 + p_01439_0_reg_429);

assign add_ln209_16_fu_993_p2 = (ret_V_61_fu_981_p2 + t1_V_fu_904_p2);

assign add_ln209_fu_681_p2 = (m_V_load_1_reg_1071 + m_V_q0);

assign add_ln700_10_fu_893_p2 = (h_V_reg_1163 + p_01439_0_reg_429);

assign add_ln700_3_fu_861_p2 = (a_V_reg_1091 + lhs_V_20_reg_354);

assign add_ln700_4_fu_867_p2 = (b_V_reg_1097 + rhs_V_33_reg_364);

assign add_ln700_5_fu_873_p2 = (c_V_reg_1113 + rhs_V_34_reg_375);

assign add_ln700_6_fu_1004_p2 = (d_V_reg_1119 + p_01587_0_reg_386);

assign add_ln700_7_fu_878_p2 = (e_V_reg_1135 + lhs_V_reg_397);

assign add_ln700_8_fu_883_p2 = (f_V_reg_1141 + rhs_V_reg_407);

assign add_ln700_9_fu_888_p2 = (g_V_reg_1157 + rhs_V_32_reg_418);

assign add_ln700_fu_445_p2 = (p_01115_0_reg_319 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_V_address0 = zext_ln1356_fu_468_p1;

assign e_V_2_fu_987_p2 = (t1_V_fu_904_p2 + p_01587_0_reg_386);

assign i_V_2_fu_711_p2 = (p_01115_2_reg_343 + 7'd1);

assign i_V_fu_699_p2 = (7'd1 + p_01115_1_reg_331);

assign icmp_ln40_fu_489_p2 = ((p_01115_1_reg_331 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_705_p2 = ((p_01115_2_reg_343 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_439_p2 = ((p_01115_0_reg_319 == 5'd16) ? 1'b1 : 1'b0);

assign j_V_fu_473_p2 = (7'd4 + p_0262_0_reg_308);

assign m_V_d0 = data_V_q0;

assign m_V_d1 = (add_ln209_10_fu_686_p2 + add_ln209_fu_681_p2);

assign r_V_11_fu_586_p4 = {{m_V_load_reg_1062[31:10]}};

assign r_V_12_fu_611_p4 = {{m_V_q1[31:7]}};

assign r_V_13_fu_633_p4 = {{m_V_q1[31:18]}};

assign r_V_14_fu_655_p4 = {{m_V_q1[31:3]}};

assign r_V_15_fu_717_p4 = {{lhs_V_reg_397[31:6]}};

assign r_V_16_fu_739_p4 = {{lhs_V_reg_397[31:11]}};

assign r_V_17_fu_761_p4 = {{lhs_V_reg_397[31:25]}};

assign r_V_18_fu_909_p4 = {{lhs_V_20_reg_354[31:2]}};

assign r_V_19_fu_931_p4 = {{lhs_V_20_reg_354[31:13]}};

assign r_V_20_fu_953_p4 = {{lhs_V_20_reg_354[31:22]}};

assign r_V_24_fu_595_p1 = r_V_11_fu_586_p4;

assign r_V_25_fu_665_p1 = r_V_14_fu_655_p4;

assign r_V_26_fu_801_p2 = (lhs_V_reg_397 ^ 32'd4294967295);

assign r_V_fu_546_p4 = {{m_V_load_reg_1062[31:17]}};

assign r_V_s_fu_566_p4 = {{m_V_load_reg_1062[31:19]}};

assign ret_V_41_fu_499_p2 = ($signed(6'd62) + $signed(trunc_ln215_2_fu_495_p1));

assign ret_V_44_fu_605_p2 = (xor_ln1357_fu_599_p2 ^ ret_V_65_fu_558_p3);

assign ret_V_45_fu_510_p2 = ($signed(6'd57) + $signed(trunc_ln215_2_fu_495_p1));

assign ret_V_46_fu_521_p2 = ($signed(6'd49) + $signed(trunc_ln215_2_reg_1041));

assign ret_V_49_fu_675_p2 = (xor_ln1357_12_fu_669_p2 ^ ret_V_67_fu_625_p3);

assign ret_V_50_fu_531_p2 = ($signed(6'd48) + $signed(trunc_ln215_2_reg_1041));

assign ret_V_54_fu_789_p2 = (xor_ln1357_14_fu_783_p2 ^ ret_V_71_fu_775_p3);

assign ret_V_57_fu_813_p2 = (ret_V_73_fu_807_p2 ^ ret_V_72_fu_795_p2);

assign ret_V_61_fu_981_p2 = (xor_ln1357_17_fu_975_p2 ^ ret_V_76_fu_967_p3);

assign ret_V_64_fu_855_p2 = (ret_V_78_fu_849_p2 ^ ret_V_77_fu_843_p2);

assign ret_V_65_fu_558_p3 = {{trunc_ln1503_fu_555_p1}, {r_V_fu_546_p4}};

assign ret_V_66_fu_578_p3 = {{trunc_ln1503_10_fu_575_p1}, {r_V_s_fu_566_p4}};

assign ret_V_67_fu_625_p3 = {{trunc_ln1503_11_fu_621_p1}, {r_V_12_fu_611_p4}};

assign ret_V_68_fu_647_p3 = {{trunc_ln1503_12_fu_643_p1}, {r_V_13_fu_633_p4}};

assign ret_V_69_fu_731_p3 = {{trunc_ln1503_13_fu_727_p1}, {r_V_15_fu_717_p4}};

assign ret_V_70_fu_753_p3 = {{trunc_ln1503_14_fu_749_p1}, {r_V_16_fu_739_p4}};

assign ret_V_71_fu_775_p3 = {{trunc_ln1503_15_fu_771_p1}, {r_V_17_fu_761_p4}};

assign ret_V_72_fu_795_p2 = (rhs_V_reg_407 & lhs_V_reg_397);

assign ret_V_73_fu_807_p2 = (rhs_V_32_reg_418 & r_V_26_fu_801_p2);

assign ret_V_74_fu_923_p3 = {{trunc_ln1503_16_fu_919_p1}, {r_V_18_fu_909_p4}};

assign ret_V_75_fu_945_p3 = {{trunc_ln1503_17_fu_941_p1}, {r_V_19_fu_931_p4}};

assign ret_V_76_fu_967_p3 = {{trunc_ln1503_18_fu_963_p1}, {r_V_20_fu_953_p4}};

assign ret_V_77_fu_843_p2 = (xor_ln1357_9_fu_837_p2 & lhs_V_20_reg_354);

assign ret_V_78_fu_849_p2 = (rhs_V_34_reg_375 & rhs_V_33_reg_364);

assign ret_V_fu_455_p2 = (trunc_ln215_fu_451_p1 | 6'd3);

assign state_V_addr_10_reg_1108 = 64'd3;

assign state_V_addr_11_reg_1125 = 64'd4;

assign state_V_addr_12_reg_1130 = 64'd5;

assign state_V_addr_13_reg_1147 = 64'd6;

assign state_V_addr_14_reg_1152 = 64'd7;

assign state_V_addr_8_reg_1057 = 64'd1;

assign state_V_addr_9_reg_1103 = 64'd2;

assign t1_V_fu_904_p2 = (add_ln209_13_reg_1187 + add_ln209_11_fu_898_p2);

assign tmp_fu_461_p3 = {{data_V_offset}, {ret_V_fu_455_p2}};

assign trunc_ln1503_10_fu_575_p1 = m_V_load_reg_1062[18:0];

assign trunc_ln1503_11_fu_621_p1 = m_V_q1[6:0];

assign trunc_ln1503_12_fu_643_p1 = m_V_q1[17:0];

assign trunc_ln1503_13_fu_727_p1 = lhs_V_reg_397[5:0];

assign trunc_ln1503_14_fu_749_p1 = lhs_V_reg_397[10:0];

assign trunc_ln1503_15_fu_771_p1 = lhs_V_reg_397[24:0];

assign trunc_ln1503_16_fu_919_p1 = lhs_V_20_reg_354[1:0];

assign trunc_ln1503_17_fu_941_p1 = lhs_V_20_reg_354[12:0];

assign trunc_ln1503_18_fu_963_p1 = lhs_V_20_reg_354[21:0];

assign trunc_ln1503_fu_555_p1 = m_V_load_reg_1062[16:0];

assign trunc_ln215_2_fu_495_p1 = p_01115_1_reg_331[5:0];

assign trunc_ln215_fu_451_p1 = p_0262_0_reg_308[5:0];

assign xor_ln1357_12_fu_669_p2 = (ret_V_68_fu_647_p3 ^ r_V_25_fu_665_p1);

assign xor_ln1357_14_fu_783_p2 = (ret_V_70_fu_753_p3 ^ ret_V_69_fu_731_p3);

assign xor_ln1357_17_fu_975_p2 = (ret_V_75_fu_945_p3 ^ ret_V_74_fu_923_p3);

assign xor_ln1357_9_fu_837_p2 = (rhs_V_34_reg_375 ^ rhs_V_33_reg_364);

assign xor_ln1357_fu_599_p2 = (ret_V_66_fu_578_p3 ^ r_V_24_fu_595_p1);

assign zext_ln1356_fu_468_p1 = tmp_fu_461_p3;

assign zext_ln544_10_fu_526_p1 = ret_V_46_fu_521_p2;

assign zext_ln544_11_fu_536_p1 = ret_V_50_fu_531_p2;

assign zext_ln544_5_fu_541_p1 = p_01115_1_reg_331;

assign zext_ln544_6_fu_819_p1 = p_01115_2_reg_343;

assign zext_ln544_8_fu_505_p1 = ret_V_41_fu_499_p2;

assign zext_ln544_9_fu_516_p1 = ret_V_45_fu_510_p2;

assign zext_ln544_fu_479_p1 = p_01115_0_reg_319;

endmodule //sha256_transform
