-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_prepare_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_we0 : OUT STD_LOGIC;
    data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_prepare_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_187_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln134_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_257_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln140_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_269_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_4_fu_323_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_366 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln151_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_reg_371 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln150_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data1_V_ce0 : STD_LOGIC;
    signal data1_V_we0 : STD_LOGIC;
    signal data1_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_148 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_0_reg_159 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln146_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_0_reg_170 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln135_1_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1503_19_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln135_1_fu_193_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln135_fu_213_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_217_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln135_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln135_2_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1503_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln147_fu_275_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln147_fu_281_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln147_fu_290_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal op2_assign_1_fu_294_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1503_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln1503_1_fu_306_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component sha256_prepare_2_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    data1_V_U : component sha256_prepare_2_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data1_V_address0,
        ce0 => data1_V_ce0,
        we0 => data1_V_we0,
        d0 => data1_V_d0,
        q0 => data1_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_0_reg_148 <= i_fu_257_p2;
            elsif (((icmp_ln134_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_148 <= ap_const_lv6_21;
            end if; 
        end if;
    end process;

    i2_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_159 <= ap_const_lv4_0;
            elsif (((icmp_ln146_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_159 <= i_3_fu_269_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln146_fu_263_p2 = ap_const_lv1_1))) then 
                i3_0_reg_170 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i3_0_reg_170 <= i_4_reg_366;
            end if; 
        end if;
    end process;

    i_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_136 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_136 <= i_2_reg_337;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_337 <= i_2_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_4_reg_366 <= i_4_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln151_reg_371(6 downto 0) <= zext_ln151_fu_329_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln151_reg_371(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln134_fu_181_p2, ap_CS_fsm_state4, icmp_ln140_fu_246_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln150_fu_317_p2, icmp_ln146_fu_263_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln134_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln140_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln146_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln150_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln150_fu_317_p2)
    begin
        if ((((icmp_ln150_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln150_fu_317_p2)
    begin
        if (((icmp_ln150_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln151_fu_329_p1, ap_CS_fsm_state3, zext_ln135_fu_208_p1, zext_ln141_fu_252_p1, zext_ln147_fu_285_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data1_V_address0 <= zext_ln151_fu_329_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data1_V_address0 <= zext_ln147_fu_285_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data1_V_address0 <= zext_ln141_fu_252_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data1_V_address0 <= zext_ln135_fu_208_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data1_V_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        else 
            data1_V_address0 <= "XXXXXX";
        end if; 
    end process;


    data1_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data1_V_ce0 <= ap_const_logic_1;
        else 
            data1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, trunc_ln1503_fu_241_p1, trunc_ln1503_19_fu_312_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data1_V_d0 <= trunc_ln1503_19_fu_312_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data1_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data1_V_d0 <= trunc_ln1503_fu_241_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data1_V_d0 <= ap_const_lv8_80;
        else 
            data1_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    data1_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln134_fu_181_p2, ap_CS_fsm_state4, icmp_ln140_fu_246_p2, ap_CS_fsm_state5, ap_CS_fsm_state3, icmp_ln146_fu_263_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln146_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln140_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln134_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data1_V_we0 <= ap_const_logic_1;
        else 
            data1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_address0 <= zext_ln151_reg_371(6 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_d0 <= data1_V_q0;

    data_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_187_p2 <= std_logic_vector(unsigned(i_0_reg_136) + unsigned(ap_const_lv6_1));
    i_3_fu_269_p2 <= std_logic_vector(unsigned(i2_0_reg_159) + unsigned(ap_const_lv4_1));
    i_4_fu_323_p2 <= std_logic_vector(unsigned(i3_0_reg_170) + unsigned(ap_const_lv7_1));
    i_fu_257_p2 <= std_logic_vector(unsigned(i1_0_reg_148) + unsigned(ap_const_lv6_1));
    icmp_ln134_fu_181_p2 <= "1" when (i_0_reg_136 = ap_const_lv6_20) else "0";
    icmp_ln140_fu_246_p2 <= "1" when (i1_0_reg_148 = ap_const_lv6_3F) else "0";
    icmp_ln146_fu_263_p2 <= "1" when (i2_0_reg_159 = ap_const_lv4_8) else "0";
    icmp_ln150_fu_317_p2 <= "1" when (i3_0_reg_170 = ap_const_lv7_40) else "0";
    input_V_address0 <= zext_ln135_1_fu_203_p1(3 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1503_1_fu_306_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv9_100),to_integer(unsigned('0' & zext_ln1503_fu_302_p1(9-1 downto 0)))));
    lshr_ln1503_fu_235_p2 <= std_logic_vector(shift_right(unsigned(input_V_q0),to_integer(unsigned('0' & zext_ln135_2_fu_231_p1(31-1 downto 0)))));
    op2_assign_1_fu_294_p3 <= (trunc_ln147_fu_290_p1 & ap_const_lv3_0);
        sext_ln147_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln147_fu_275_p2),6));

    shl_ln_fu_217_p3 <= (trunc_ln135_fu_213_p1 & ap_const_lv3_0);
    sub_ln135_fu_225_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(shl_ln_fu_217_p3));
    trunc_ln135_1_fu_193_p4 <= i_0_reg_136(4 downto 2);
    trunc_ln135_fu_213_p1 <= i_0_reg_136(2 - 1 downto 0);
    trunc_ln147_fu_290_p1 <= i2_0_reg_159(3 - 1 downto 0);
    trunc_ln1503_19_fu_312_p1 <= lshr_ln1503_1_fu_306_p2(8 - 1 downto 0);
    trunc_ln1503_fu_241_p1 <= lshr_ln1503_fu_235_p2(8 - 1 downto 0);
    xor_ln147_fu_275_p2 <= (i2_0_reg_159 xor ap_const_lv4_F);
    zext_ln135_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln135_1_fu_193_p4),64));
    zext_ln135_2_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln135_fu_225_p2),32));
    zext_ln135_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_136),64));
    zext_ln141_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_148),64));
    zext_ln147_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln147_fu_281_p1),64));
    zext_ln1503_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_1_fu_294_p3),9));
    zext_ln151_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_170),64));
end behav;
