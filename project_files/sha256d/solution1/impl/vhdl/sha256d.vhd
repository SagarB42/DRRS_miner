-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_we1 : OUT STD_LOGIC;
    output_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256d,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.796000,HLS_SYN_LAT=1872,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=1961,HLS_SYN_LUT=4798,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_395_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln118_fu_401_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln118_reg_597 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln117_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_410_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_607 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln1503_2_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln214_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln214_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_495_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_626 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln118_1_fu_501_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln118_1_reg_631 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln117_1_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln118_1_fu_510_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln118_1_reg_641 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln1503_5_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln214_1_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln214_1_reg_652 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_V_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_V_1_ce0 : STD_LOGIC;
    signal state_V_1_we0 : STD_LOGIC;
    signal state_V_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_V_1_ce1 : STD_LOGIC;
    signal state_V_1_we1 : STD_LOGIC;
    signal state_V_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_V_ce0 : STD_LOGIC;
    signal state_V_we0 : STD_LOGIC;
    signal state_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_V_ce1 : STD_LOGIC;
    signal state_V_we1 : STD_LOGIC;
    signal state_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash1_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hash1_V_ce0 : STD_LOGIC;
    signal hash1_V_we0 : STD_LOGIC;
    signal hash1_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash1_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal hash1_V_ce1 : STD_LOGIC;
    signal hash1_V_we1 : STD_LOGIC;
    signal hash1_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_372_ap_start : STD_LOGIC;
    signal grp_sha256_update_fu_372_ap_done : STD_LOGIC;
    signal grp_sha256_update_fu_372_ap_idle : STD_LOGIC;
    signal grp_sha256_update_fu_372_ap_ready : STD_LOGIC;
    signal grp_sha256_update_fu_372_state_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_372_state_V_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_372_state_V_we0 : STD_LOGIC;
    signal grp_sha256_update_fu_372_state_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_372_state_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_372_state_V_ce1 : STD_LOGIC;
    signal grp_sha256_update_fu_372_state_V_we1 : STD_LOGIC;
    signal grp_sha256_update_fu_372_state_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_372_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha256_update_fu_372_data_V_ce0 : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_ap_start : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_ap_done : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_ap_idle : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_ap_ready : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_state_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_1_fu_381_state_V_ce0 : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_state_V_we0 : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_state_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_1_fu_381_state_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_1_fu_381_state_V_ce1 : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_state_V_we1 : STD_LOGIC;
    signal grp_sha256_update_1_fu_381_state_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_1_fu_381_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha256_update_1_fu_381_data_V_ce0 : STD_LOGIC;
    signal i_0_i_i_reg_350 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_i_i11_reg_361 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_sha256_update_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sha256_update_1_fu_381_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln118_1_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln118_3_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_2_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_1_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_1_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln119_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln120_fu_469_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln121_fu_479_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln119_1_fu_533_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln120_1_fu_569_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln121_1_fu_579_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component sha256_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_V_ce0 : OUT STD_LOGIC;
        state_V_we0 : OUT STD_LOGIC;
        state_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        state_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_V_ce1 : OUT STD_LOGIC;
        state_V_we1 : OUT STD_LOGIC;
        state_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_update_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_V_ce0 : OUT STD_LOGIC;
        state_V_we0 : OUT STD_LOGIC;
        state_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        state_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_V_ce1 : OUT STD_LOGIC;
        state_V_we1 : OUT STD_LOGIC;
        state_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256d_state_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256d_hash1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    state_V_1_U : component sha256d_state_V_1
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_V_1_address0,
        ce0 => state_V_1_ce0,
        we0 => state_V_1_we0,
        d0 => state_V_1_d0,
        q0 => state_V_1_q0,
        address1 => state_V_1_address1,
        ce1 => state_V_1_ce1,
        we1 => state_V_1_we1,
        d1 => state_V_1_d1,
        q1 => state_V_1_q1);

    state_V_U : component sha256d_state_V_1
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_V_address0,
        ce0 => state_V_ce0,
        we0 => state_V_we0,
        d0 => state_V_d0,
        q0 => state_V_q0,
        address1 => state_V_address1,
        ce1 => state_V_ce1,
        we1 => state_V_we1,
        d1 => state_V_d1,
        q1 => state_V_q1);

    hash1_V_U : component sha256d_hash1_V
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hash1_V_address0,
        ce0 => hash1_V_ce0,
        we0 => hash1_V_we0,
        d0 => hash1_V_d0,
        q0 => hash1_V_q0,
        address1 => hash1_V_address1,
        ce1 => hash1_V_ce1,
        we1 => hash1_V_we1,
        d1 => hash1_V_d1);

    grp_sha256_update_fu_372 : component sha256_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_update_fu_372_ap_start,
        ap_done => grp_sha256_update_fu_372_ap_done,
        ap_idle => grp_sha256_update_fu_372_ap_idle,
        ap_ready => grp_sha256_update_fu_372_ap_ready,
        state_V_address0 => grp_sha256_update_fu_372_state_V_address0,
        state_V_ce0 => grp_sha256_update_fu_372_state_V_ce0,
        state_V_we0 => grp_sha256_update_fu_372_state_V_we0,
        state_V_d0 => grp_sha256_update_fu_372_state_V_d0,
        state_V_q0 => state_V_q0,
        state_V_address1 => grp_sha256_update_fu_372_state_V_address1,
        state_V_ce1 => grp_sha256_update_fu_372_state_V_ce1,
        state_V_we1 => grp_sha256_update_fu_372_state_V_we1,
        state_V_d1 => grp_sha256_update_fu_372_state_V_d1,
        state_V_q1 => state_V_q1,
        data_V_address0 => grp_sha256_update_fu_372_data_V_address0,
        data_V_ce0 => grp_sha256_update_fu_372_data_V_ce0,
        data_V_q0 => input_V_q0);

    grp_sha256_update_1_fu_381 : component sha256_update_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_update_1_fu_381_ap_start,
        ap_done => grp_sha256_update_1_fu_381_ap_done,
        ap_idle => grp_sha256_update_1_fu_381_ap_idle,
        ap_ready => grp_sha256_update_1_fu_381_ap_ready,
        state_V_address0 => grp_sha256_update_1_fu_381_state_V_address0,
        state_V_ce0 => grp_sha256_update_1_fu_381_state_V_ce0,
        state_V_we0 => grp_sha256_update_1_fu_381_state_V_we0,
        state_V_d0 => grp_sha256_update_1_fu_381_state_V_d0,
        state_V_q0 => state_V_1_q0,
        state_V_address1 => grp_sha256_update_1_fu_381_state_V_address1,
        state_V_ce1 => grp_sha256_update_1_fu_381_state_V_ce1,
        state_V_we1 => grp_sha256_update_1_fu_381_state_V_we1,
        state_V_d1 => grp_sha256_update_1_fu_381_state_V_d1,
        state_V_q1 => state_V_1_q1,
        data_V_address0 => grp_sha256_update_1_fu_381_data_V_address0,
        data_V_ce0 => grp_sha256_update_1_fu_381_data_V_ce0,
        data_V_q0 => hash1_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_update_1_fu_381_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_update_1_fu_381_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_sha256_update_1_fu_381_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_update_1_fu_381_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_update_1_fu_381_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_update_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_update_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_sha256_update_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_update_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_update_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i11_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_0_i_i11_reg_361 <= i_1_reg_626;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_sha256_update_1_fu_381_ap_done = ap_const_logic_1))) then 
                i_0_i_i11_reg_361 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_i_i_reg_350 <= i_reg_592;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_sha256_update_fu_372_ap_done = ap_const_logic_1))) then 
                i_0_i_i_reg_350 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_1_reg_626 <= i_1_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_reg_592 <= i_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    shl_ln118_1_reg_641(4 downto 2) <= shl_ln118_1_fu_510_p3(4 downto 2);
                trunc_ln1503_5_reg_647 <= state_V_1_q0(15 downto 8);
                trunc_ln214_1_reg_652 <= trunc_ln214_1_fu_565_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    shl_ln_reg_607(4 downto 2) <= shl_ln_fu_410_p3(4 downto 2);
                trunc_ln1503_2_reg_613 <= state_V_q0(15 downto 8);
                trunc_ln214_reg_618 <= trunc_ln214_fu_465_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_1_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                trunc_ln118_1_reg_631 <= trunc_ln118_1_fu_501_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                trunc_ln118_reg_597 <= trunc_ln118_fu_401_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_607(1 downto 0) <= "00";
    shl_ln118_1_reg_641(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln117_fu_389_p2, ap_CS_fsm_state15, icmp_ln117_1_fu_489_p2, grp_sha256_update_fu_372_ap_done, grp_sha256_update_1_fu_381_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_sha256_update_fu_372_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln117_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_sha256_update_1_fu_381_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln117_1_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state15, icmp_ln117_1_fu_489_p2)
    begin
        if (((icmp_ln117_1_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, icmp_ln117_1_fu_489_p2)
    begin
        if (((icmp_ln117_1_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha256_update_1_fu_381_ap_start <= grp_sha256_update_1_fu_381_ap_start_reg;
    grp_sha256_update_fu_372_ap_start <= grp_sha256_update_fu_372_ap_start_reg;

    hash1_V_address0_assign_proc : process(ap_CS_fsm_state8, grp_sha256_update_1_fu_381_data_V_address0, ap_CS_fsm_state9, ap_CS_fsm_state14, zext_ln118_fu_417_p1, zext_ln120_fu_474_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hash1_V_address0 <= zext_ln120_fu_474_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hash1_V_address0 <= zext_ln118_fu_417_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash1_V_address0 <= grp_sha256_update_1_fu_381_data_V_address0;
        else 
            hash1_V_address0 <= "XXXXX";
        end if; 
    end process;


    hash1_V_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln119_fu_439_p1, zext_ln121_fu_484_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hash1_V_address1 <= zext_ln121_fu_484_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hash1_V_address1 <= zext_ln119_fu_439_p1(5 - 1 downto 0);
        else 
            hash1_V_address1 <= "XXXXX";
        end if; 
    end process;


    hash1_V_ce0_assign_proc : process(ap_CS_fsm_state8, grp_sha256_update_1_fu_381_data_V_ce0, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash1_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hash1_V_ce0 <= grp_sha256_update_1_fu_381_data_V_ce0;
        else 
            hash1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash1_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash1_V_ce1 <= ap_const_logic_1;
        else 
            hash1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash1_V_d0_assign_proc : process(ap_CS_fsm_state8, trunc_ln1503_2_reg_613, state_V_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hash1_V_d0 <= trunc_ln1503_2_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hash1_V_d0 <= state_V_q0(31 downto 24);
        else 
            hash1_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hash1_V_d1_assign_proc : process(ap_CS_fsm_state8, trunc_ln214_reg_618, state_V_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hash1_V_d1 <= trunc_ln214_reg_618;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hash1_V_d1 <= state_V_q0(23 downto 16);
        else 
            hash1_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    hash1_V_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash1_V_we0 <= ap_const_logic_1;
        else 
            hash1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash1_V_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash1_V_we1 <= ap_const_logic_1;
        else 
            hash1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_495_p2 <= std_logic_vector(unsigned(i_0_i_i11_reg_361) + unsigned(ap_const_lv4_1));
    i_fu_395_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_350) + unsigned(ap_const_lv4_1));
    icmp_ln117_1_fu_489_p2 <= "1" when (i_0_i_i11_reg_361 = ap_const_lv4_8) else "0";
    icmp_ln117_fu_389_p2 <= "1" when (i_0_i_i_reg_350 = ap_const_lv4_8) else "0";
    input_V_address0 <= grp_sha256_update_fu_372_data_V_address0;
    input_V_ce0 <= grp_sha256_update_fu_372_data_V_ce0;
    or_ln119_1_fu_533_p2 <= (shl_ln118_1_fu_510_p3 or ap_const_lv5_1);
    or_ln119_fu_433_p2 <= (shl_ln_fu_410_p3 or ap_const_lv5_1);
    or_ln120_1_fu_569_p2 <= (shl_ln118_1_reg_641 or ap_const_lv5_2);
    or_ln120_fu_469_p2 <= (shl_ln_reg_607 or ap_const_lv5_2);
    or_ln121_1_fu_579_p2 <= (shl_ln118_1_reg_641 or ap_const_lv5_3);
    or_ln121_fu_479_p2 <= (shl_ln_reg_607 or ap_const_lv5_3);

    output_V_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln118_2_fu_517_p1, zext_ln120_1_fu_574_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_address0 <= zext_ln120_1_fu_574_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_V_address0 <= zext_ln118_2_fu_517_p1(5 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln119_1_fu_539_p1, zext_ln121_1_fu_584_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_address1 <= zext_ln121_1_fu_584_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_V_address1 <= zext_ln119_1_fu_539_p1(5 - 1 downto 0);
        else 
            output_V_address1 <= "XXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state16, trunc_ln1503_5_reg_647, state_V_1_q0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_d0 <= trunc_ln1503_5_reg_647;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_V_d0 <= state_V_1_q0(31 downto 24);
        else 
            output_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(ap_CS_fsm_state16, trunc_ln214_1_reg_652, state_V_1_q0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_d1 <= trunc_ln214_1_reg_652;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_V_d1 <= state_V_1_q0(23 downto 16);
        else 
            output_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln118_1_fu_510_p3 <= (trunc_ln118_1_reg_631 & ap_const_lv2_0);
    shl_ln_fu_410_p3 <= (trunc_ln118_reg_597 & ap_const_lv2_0);

    state_V_1_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state15, grp_sha256_update_1_fu_381_state_V_address0, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, zext_ln118_3_fu_505_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_V_1_address0 <= zext_ln118_3_fu_505_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_1_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_1_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_1_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_1_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_address0 <= grp_sha256_update_1_fu_381_state_V_address0;
        else 
            state_V_1_address0 <= "XXX";
        end if; 
    end process;


    state_V_1_address1_assign_proc : process(ap_CS_fsm_state7, grp_sha256_update_1_fu_381_state_V_address1, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_1_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_1_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_1_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_1_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_address1 <= grp_sha256_update_1_fu_381_state_V_address1;
        else 
            state_V_1_address1 <= "XXX";
        end if; 
    end process;


    state_V_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state15, grp_sha256_update_1_fu_381_state_V_ce0, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_V_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_ce0 <= grp_sha256_update_1_fu_381_state_V_ce0;
        else 
            state_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_1_ce1_assign_proc : process(ap_CS_fsm_state7, grp_sha256_update_1_fu_381_state_V_ce1, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_V_1_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_ce1 <= grp_sha256_update_1_fu_381_state_V_ce1;
        else 
            state_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_1_d0_assign_proc : process(ap_CS_fsm_state7, grp_sha256_update_1_fu_381_state_V_d0, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_1_d0 <= ap_const_lv32_1F83D9AB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_1_d0 <= ap_const_lv32_510E527F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_1_d0 <= ap_const_lv32_3C6EF372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_1_d0 <= ap_const_lv32_6A09E667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_d0 <= grp_sha256_update_1_fu_381_state_V_d0;
        else 
            state_V_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_1_d1_assign_proc : process(ap_CS_fsm_state7, grp_sha256_update_1_fu_381_state_V_d1, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_V_1_d1 <= ap_const_lv32_5BE0CD19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_1_d1 <= ap_const_lv32_9B05688C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_V_1_d1 <= ap_const_lv32_A54FF53A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_1_d1 <= ap_const_lv32_BB67AE85;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_d1 <= grp_sha256_update_1_fu_381_state_V_d1;
        else 
            state_V_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_1_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln117_fu_389_p2, grp_sha256_update_1_fu_381_state_V_we0, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln117_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_V_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_we0 <= grp_sha256_update_1_fu_381_state_V_we0;
        else 
            state_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_1_we1_assign_proc : process(ap_CS_fsm_state7, icmp_ln117_fu_389_p2, grp_sha256_update_1_fu_381_state_V_we1, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln117_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            state_V_1_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_1_we1 <= grp_sha256_update_1_fu_381_state_V_we1;
        else 
            state_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state7, grp_sha256_update_fu_372_state_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln118_1_fu_405_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_address0 <= zext_ln118_1_fu_405_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_address0 <= grp_sha256_update_fu_372_state_V_address0;
        else 
            state_V_address0 <= "XXX";
        end if; 
    end process;


    state_V_address1_assign_proc : process(ap_CS_fsm_state1, grp_sha256_update_fu_372_state_V_address1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_V_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_address1 <= grp_sha256_update_fu_372_state_V_address1;
        else 
            state_V_address1 <= "XXX";
        end if; 
    end process;


    state_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, grp_sha256_update_fu_372_state_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_ce0 <= grp_sha256_update_fu_372_state_V_ce0;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_update_fu_372_state_V_ce1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_ce1 <= grp_sha256_update_fu_372_state_V_ce1;
        else 
            state_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_d0_assign_proc : process(ap_CS_fsm_state1, grp_sha256_update_fu_372_state_V_d0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_d0 <= ap_const_lv32_1F83D9AB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_d0 <= ap_const_lv32_510E527F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_d0 <= ap_const_lv32_3C6EF372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_V_d0 <= ap_const_lv32_6A09E667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_d0 <= grp_sha256_update_fu_372_state_V_d0;
        else 
            state_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_d1_assign_proc : process(ap_CS_fsm_state1, grp_sha256_update_fu_372_state_V_d1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_d1 <= ap_const_lv32_5BE0CD19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_V_d1 <= ap_const_lv32_9B05688C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_V_d1 <= ap_const_lv32_A54FF53A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_V_d1 <= ap_const_lv32_BB67AE85;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_d1 <= grp_sha256_update_fu_372_state_V_d1;
        else 
            state_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_update_fu_372_state_V_we0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_we0 <= grp_sha256_update_fu_372_state_V_we0;
        else 
            state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_update_fu_372_state_V_we1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_V_we1 <= grp_sha256_update_fu_372_state_V_we1;
        else 
            state_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln118_1_fu_501_p1 <= i_0_i_i11_reg_361(3 - 1 downto 0);
    trunc_ln118_fu_401_p1 <= i_0_i_i_reg_350(3 - 1 downto 0);
    trunc_ln214_1_fu_565_p1 <= state_V_1_q0(8 - 1 downto 0);
    trunc_ln214_fu_465_p1 <= state_V_q0(8 - 1 downto 0);
    zext_ln118_1_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_350),64));
    zext_ln118_2_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln118_1_fu_510_p3),64));
    zext_ln118_3_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i11_reg_361),64));
    zext_ln118_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_410_p3),64));
    zext_ln119_1_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln119_1_fu_533_p2),64));
    zext_ln119_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln119_fu_433_p2),64));
    zext_ln120_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln120_1_fu_569_p2),64));
    zext_ln120_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln120_fu_469_p2),64));
    zext_ln121_1_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_1_fu_579_p2),64));
    zext_ln121_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_fu_479_p2),64));
end behav;
