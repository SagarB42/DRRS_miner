-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_prepare_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_we0 : OUT STD_LOGIC;
    data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_prepare_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_51 : STD_LOGIC_VECTOR (7 downto 0) := "01010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_207_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_331 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln92_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_reg_336 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln91_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln97_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_241_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_7_fu_295_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_365 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln109_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln108_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_312_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_reg_383 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln111_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal data1_V_ce0 : STD_LOGIC;
    signal data1_V_we0 : STD_LOGIC;
    signal data1_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_138 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_0_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln103_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_0_reg_171 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_i4_0_phi_fu_186_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i4_0_reg_182 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln98_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1503_fu_284_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln104_fu_247_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln104_fu_253_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln104_fu_262_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal op2_assign_fu_266_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1503_fu_274_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln1503_fu_278_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component sha256_prepare_1_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    data1_V_U : component sha256_prepare_1_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data1_V_address0,
        ce0 => data1_V_ce0,
        we0 => data1_V_we0,
        d0 => data1_V_d0,
        q0 => data1_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_0_reg_149 <= i_5_fu_229_p2;
            elsif (((icmp_ln91_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_149 <= ap_const_lv8_51;
            end if; 
        end if;
    end process;

    i2_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_160 <= ap_const_lv4_0;
            elsif (((icmp_ln103_fu_235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_160 <= i_6_fu_241_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln103_fu_235_p2 = ap_const_lv1_1))) then 
                i3_0_reg_171 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i3_0_reg_171 <= i_7_reg_365;
            end if; 
        end if;
    end process;

    i4_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i4_0_reg_182 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i4_0_reg_182 <= i_8_reg_383;
            end if; 
        end if;
    end process;

    i_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_138 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_138 <= i_reg_331;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_7_reg_365 <= i_7_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_8_reg_383 <= i_8_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_331 <= i_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln109_reg_370(6 downto 0) <= zext_ln109_fu_301_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln92_reg_336(6 downto 0) <= zext_ln92_fu_213_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln92_reg_336(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln109_reg_370(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln91_fu_201_p2, ap_CS_fsm_state4, icmp_ln97_fu_218_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln108_fu_289_p2, ap_CS_fsm_state8, icmp_ln111_fu_306_p2, icmp_ln103_fu_235_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln91_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln97_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln103_fu_235_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln108_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln111_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln111_fu_306_p2)
    begin
        if ((((icmp_ln111_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i4_0_phi_fu_186_p4 <= i4_0_reg_182;

    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln111_fu_306_p2)
    begin
        if (((icmp_ln111_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln92_reg_336, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln109_fu_301_p1, ap_CS_fsm_state8, ap_CS_fsm_state3, zext_ln98_fu_224_p1, zext_ln104_fu_257_p1, zext_ln112_fu_318_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data1_V_address0 <= zext_ln112_fu_318_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data1_V_address0 <= zext_ln109_fu_301_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data1_V_address0 <= zext_ln104_fu_257_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data1_V_address0 <= zext_ln98_fu_224_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data1_V_address0 <= zext_ln92_reg_336(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data1_V_address0 <= ap_const_lv64_50(7 - 1 downto 0);
        else 
            data1_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    data1_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data1_V_ce0 <= ap_const_logic_1;
        else 
            data1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_d0_assign_proc : process(input_V_q0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, trunc_ln1503_fu_284_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data1_V_d0 <= trunc_ln1503_fu_284_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data1_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data1_V_d0 <= input_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data1_V_d0 <= ap_const_lv8_80;
        else 
            data1_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    data1_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln91_fu_201_p2, ap_CS_fsm_state4, icmp_ln97_fu_218_p2, ap_CS_fsm_state5, ap_CS_fsm_state3, icmp_ln103_fu_235_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln103_fu_235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln97_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln91_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data1_V_we0 <= ap_const_logic_1;
        else 
            data1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_address0_assign_proc : process(zext_ln109_reg_370, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln321_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_V_address0 <= zext_ln321_fu_323_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_V_address0 <= zext_ln109_reg_370(7 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_d0 <= data1_V_q0;

    data_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_194_p0_assign_proc : process(ap_CS_fsm_state8, ap_phi_mux_i4_0_phi_fu_186_p4, i4_0_reg_182, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_194_p0 <= i4_0_reg_182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_194_p0 <= ap_phi_mux_i4_0_phi_fu_186_p4;
        else 
            grp_fu_194_p0 <= "XXXXXXX";
        end if; 
    end process;

    grp_fu_194_p2 <= (grp_fu_194_p0 xor ap_const_lv7_40);
    i_5_fu_229_p2 <= std_logic_vector(unsigned(i1_0_reg_149) + unsigned(ap_const_lv8_1));
    i_6_fu_241_p2 <= std_logic_vector(unsigned(i2_0_reg_160) + unsigned(ap_const_lv4_1));
    i_7_fu_295_p2 <= std_logic_vector(unsigned(i3_0_reg_171) + unsigned(ap_const_lv7_1));
    i_8_fu_312_p2 <= std_logic_vector(unsigned(i4_0_reg_182) + unsigned(ap_const_lv7_1));
    i_fu_207_p2 <= std_logic_vector(unsigned(i_0_reg_138) + unsigned(ap_const_lv7_1));
    icmp_ln103_fu_235_p2 <= "1" when (i2_0_reg_160 = ap_const_lv4_8) else "0";
    icmp_ln108_fu_289_p2 <= "1" when (i3_0_reg_171 = ap_const_lv7_40) else "0";
    icmp_ln111_fu_306_p2 <= "1" when (i4_0_reg_182 = ap_const_lv7_40) else "0";
    icmp_ln91_fu_201_p2 <= "1" when (i_0_reg_138 = ap_const_lv7_50) else "0";
    icmp_ln97_fu_218_p2 <= "1" when (i1_0_reg_149 = ap_const_lv8_80) else "0";
    input_V_address0 <= zext_ln92_fu_213_p1(7 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1503_fu_278_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv10_280),to_integer(unsigned('0' & zext_ln1503_fu_274_p1(10-1 downto 0)))));
    op2_assign_fu_266_p3 <= (trunc_ln104_fu_262_p1 & ap_const_lv3_0);
        sext_ln104_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln104_fu_247_p2),7));

    trunc_ln104_fu_262_p1 <= i2_0_reg_160(3 - 1 downto 0);
    trunc_ln1503_fu_284_p1 <= lshr_ln1503_fu_278_p2(8 - 1 downto 0);
    xor_ln104_fu_247_p2 <= (i2_0_reg_160 xor ap_const_lv4_F);
    zext_ln104_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln104_fu_253_p1),64));
    zext_ln109_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_171),64));
    zext_ln112_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_194_p2),64));
    zext_ln1503_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_fu_266_p3),10));
    zext_ln321_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_194_p2),64));
    zext_ln92_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_138),64));
    zext_ln98_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_149),64));
end behav;
