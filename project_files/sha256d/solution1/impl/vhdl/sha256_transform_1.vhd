-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_transform_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    state_V_ce0 : OUT STD_LOGIC;
    state_V_we0 : OUT STD_LOGIC;
    state_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    state_V_ce1 : OUT STD_LOGIC;
    state_V_we1 : OUT STD_LOGIC;
    state_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_transform_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal K_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal K_V_ce0 : STD_LOGIC;
    signal K_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln700_reg_999 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_V_reg_1009 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln215_1_fu_476_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln215_1_reg_1017 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln40_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_V_addr_1_reg_1033 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_load_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_load_1_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_fu_680_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_V_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal b_V_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_addr_2_reg_1079 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_V_addr_3_reg_1084 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_V_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal d_V_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_addr_4_reg_1101 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_V_addr_5_reg_1106 : STD_LOGIC_VECTOR (2 downto 0);
    signal e_V_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal f_V_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_V_addr_6_reg_1123 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_V_addr_7_reg_1128 : STD_LOGIC_VECTOR (2 downto 0);
    signal g_V_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal h_V_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_1_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_V_1_reg_1148 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln887_1_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_5_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_5_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_25_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_25_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_5_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_5_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_7_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_7_reg_1178 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_8_fu_864_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_8_reg_1183 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_9_fu_869_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_9_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_10_fu_874_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_10_reg_1193 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_V_1_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal a_V_1_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_V_ce0 : STD_LOGIC;
    signal m_V_we0 : STD_LOGIC;
    signal m_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_V_ce1 : STD_LOGIC;
    signal m_V_we1 : STD_LOGIC;
    signal m_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0262_0_reg_296 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_01115_0_reg_307 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_01115_1_reg_319 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_01115_2_reg_331 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_10_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_16_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_17_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_01587_0_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_15_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_01439_0_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln544_1_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_7_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_6_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_3_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_4_fu_848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln700_6_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln215_fu_439_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_fu_443_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_2_fu_480_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_6_fu_491_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_7_fu_502_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_11_fu_512_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1503_fu_536_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_527_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1503_1_fu_556_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_s_fu_547_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_fu_567_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_14_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_27_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1357_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_26_fu_539_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1503_2_fu_602_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_2_fu_592_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1503_3_fu_624_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_fu_614_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_4_fu_636_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_15_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_29_fu_628_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1357_2_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_28_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_10_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_1_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1503_4_fu_708_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_5_fu_698_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1503_5_fu_730_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_6_fu_720_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1503_6_fu_752_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_7_fu_742_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_30_fu_712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_31_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1357_4_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_32_fu_756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_16_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_34_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_33_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_18_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_15_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_4_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1357_9_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_38_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_39_fu_830_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_3_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1503_7_fu_900_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_8_fu_890_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln1503_8_fu_922_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_9_fu_912_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln1503_9_fu_944_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_10_fu_934_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_35_fu_904_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_36_fu_926_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1357_7_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_37_fu_948_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_V_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_22_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_8_fu_974_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component sha256_transform_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_transform_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    K_V_U : component sha256_transform_cud
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K_V_address0,
        ce0 => K_V_ce0,
        q0 => K_V_q0);

    m_V_U : component sha256_transform_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_V_address0,
        ce0 => m_V_ce0,
        we0 => m_V_we0,
        d0 => m_V_d0,
        q0 => m_V_q0,
        address1 => m_V_address1,
        ce1 => m_V_ce1,
        we1 => m_V_we1,
        d1 => m_V_d1,
        q1 => m_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    lhs_V_10_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                lhs_V_10_reg_342 <= a_V_1_fu_980_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                lhs_V_10_reg_342 <= a_V_reg_1067;
            end if; 
        end if;
    end process;

    lhs_V_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                lhs_V_reg_385 <= e_V_1_fu_968_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                lhs_V_reg_385 <= e_V_reg_1111;
            end if; 
        end if;
    end process;

    p_01115_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_01115_0_reg_307 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_01115_0_reg_307 <= add_ln700_reg_999;
            end if; 
        end if;
    end process;

    p_01115_1_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_01115_1_reg_319 <= ap_const_lv7_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_01115_1_reg_319 <= i_V_fu_680_p2;
            end if; 
        end if;
    end process;

    p_01115_2_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_01115_2_reg_331 <= i_V_1_reg_1148;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_01115_2_reg_331 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    p_01439_0_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_01439_0_reg_417 <= rhs_V_15_reg_406;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_01439_0_reg_417 <= state_V_q1;
            end if; 
        end if;
    end process;

    p_01587_0_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_01587_0_reg_374 <= rhs_V_17_reg_363;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_01587_0_reg_374 <= d_V_reg_1095;
            end if; 
        end if;
    end process;

    p_0262_0_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0262_0_reg_296 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0262_0_reg_296 <= j_V_reg_1009;
            end if; 
        end if;
    end process;

    rhs_V_15_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_15_reg_406 <= rhs_V_reg_395;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                rhs_V_15_reg_406 <= state_V_q0;
            end if; 
        end if;
    end process;

    rhs_V_16_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_16_reg_352 <= lhs_V_10_reg_342;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                rhs_V_16_reg_352 <= b_V_reg_1073;
            end if; 
        end if;
    end process;

    rhs_V_17_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_17_reg_363 <= rhs_V_16_reg_352;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                rhs_V_17_reg_363 <= c_V_reg_1089;
            end if; 
        end if;
    end process;

    rhs_V_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                rhs_V_reg_395 <= lhs_V_reg_385;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                rhs_V_reg_395 <= f_V_reg_1117;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a_V_reg_1067 <= state_V_q0;
                b_V_reg_1073 <= state_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_1_fu_686_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln209_5_reg_1163 <= add_ln209_5_fu_812_p2;
                ret_V_25_reg_1168 <= ret_V_25_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_1_fu_686_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln700_10_reg_1193 <= add_ln700_10_fu_874_p2;
                add_ln700_5_reg_1173 <= add_ln700_5_fu_854_p2;
                add_ln700_7_reg_1178 <= add_ln700_7_fu_859_p2;
                add_ln700_8_reg_1183 <= add_ln700_8_fu_864_p2;
                add_ln700_9_reg_1188 <= add_ln700_9_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln700_reg_999 <= add_ln700_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                c_V_reg_1089 <= state_V_q0;
                d_V_reg_1095 <= state_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                e_V_reg_1111 <= state_V_q0;
                f_V_reg_1117 <= state_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                g_V_reg_1133 <= state_V_q0;
                h_V_reg_1139 <= state_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_V_1_reg_1148 <= i_V_1_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_V_reg_1009 <= j_V_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_V_load_1_reg_1047 <= m_V_q1;
                m_V_load_reg_1038 <= m_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_470_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                trunc_ln215_1_reg_1017 <= trunc_ln215_1_fu_476_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_427_p2, ap_CS_fsm_state4, icmp_ln40_fu_470_p2, ap_CS_fsm_state11, icmp_ln887_1_fu_686_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln40_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln887_1_fu_686_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    K_V_address0 <= zext_ln544_6_fu_800_p1(6 - 1 downto 0);

    K_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            K_V_ce0 <= ap_const_logic_1;
        else 
            K_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_V_1_fu_980_p2 <= std_logic_vector(unsigned(add_ln209_8_fu_974_p2) + unsigned(ret_V_25_reg_1168));
    add_ln209_1_fu_667_p2 <= std_logic_vector(unsigned(ret_V_5_fu_586_p2) + unsigned(ret_V_10_fu_656_p2));
    add_ln209_3_fu_879_p2 <= std_logic_vector(unsigned(K_V_q0) + unsigned(m_V_q0));
    add_ln209_4_fu_806_p2 <= std_logic_vector(unsigned(ret_V_18_fu_794_p2) + unsigned(ret_V_15_fu_770_p2));
    add_ln209_5_fu_812_p2 <= std_logic_vector(unsigned(add_ln209_4_fu_806_p2) + unsigned(p_01439_0_reg_417));
    add_ln209_8_fu_974_p2 <= std_logic_vector(unsigned(ret_V_22_fu_962_p2) + unsigned(t1_V_fu_885_p2));
    add_ln209_fu_662_p2 <= std_logic_vector(unsigned(m_V_load_1_reg_1047) + unsigned(m_V_q0));
    add_ln700_10_fu_874_p2 <= std_logic_vector(unsigned(h_V_reg_1139) + unsigned(p_01439_0_reg_417));
    add_ln700_3_fu_842_p2 <= std_logic_vector(unsigned(a_V_reg_1067) + unsigned(lhs_V_10_reg_342));
    add_ln700_4_fu_848_p2 <= std_logic_vector(unsigned(b_V_reg_1073) + unsigned(rhs_V_16_reg_352));
    add_ln700_5_fu_854_p2 <= std_logic_vector(unsigned(c_V_reg_1089) + unsigned(rhs_V_17_reg_363));
    add_ln700_6_fu_985_p2 <= std_logic_vector(unsigned(d_V_reg_1095) + unsigned(p_01587_0_reg_374));
    add_ln700_7_fu_859_p2 <= std_logic_vector(unsigned(e_V_reg_1111) + unsigned(lhs_V_reg_385));
    add_ln700_8_fu_864_p2 <= std_logic_vector(unsigned(f_V_reg_1117) + unsigned(rhs_V_reg_395));
    add_ln700_9_fu_869_p2 <= std_logic_vector(unsigned(g_V_reg_1133) + unsigned(rhs_V_15_reg_406));
    add_ln700_fu_433_p2 <= std_logic_vector(unsigned(p_01115_0_reg_307) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_V_address0 <= zext_ln544_1_fu_449_p1(6 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_V_1_fu_968_p2 <= std_logic_vector(unsigned(t1_V_fu_885_p2) + unsigned(p_01587_0_reg_374));
    i_V_1_fu_692_p2 <= std_logic_vector(unsigned(p_01115_2_reg_331) + unsigned(ap_const_lv7_1));
    i_V_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(p_01115_1_reg_319));
    icmp_ln40_fu_470_p2 <= "1" when (p_01115_1_reg_319 = ap_const_lv7_40) else "0";
    icmp_ln887_1_fu_686_p2 <= "1" when (p_01115_2_reg_331 = ap_const_lv7_40) else "0";
    icmp_ln887_fu_427_p2 <= "1" when (p_01115_0_reg_307 = ap_const_lv5_10) else "0";
    j_V_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(p_0262_0_reg_296));

    m_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state3, zext_ln544_fu_460_p1, zext_ln544_3_fu_486_p1, zext_ln544_7_fu_517_p1, zext_ln544_6_fu_800_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            m_V_address0 <= zext_ln544_6_fu_800_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_V_address0 <= zext_ln544_7_fu_517_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_V_address0 <= zext_ln544_3_fu_486_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_V_address0 <= zext_ln544_fu_460_p1(6 - 1 downto 0);
        else 
            m_V_address0 <= "XXXXXX";
        end if; 
    end process;


    m_V_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln544_4_fu_497_p1, zext_ln544_5_fu_507_p1, zext_ln544_2_fu_522_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_V_address1 <= zext_ln544_2_fu_522_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_V_address1 <= zext_ln544_5_fu_507_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_V_address1 <= zext_ln544_4_fu_497_p1(6 - 1 downto 0);
        else 
            m_V_address1 <= "XXXXXX";
        end if; 
    end process;


    m_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_V_ce0 <= ap_const_logic_1;
        else 
            m_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_V_ce1 <= ap_const_logic_1;
        else 
            m_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_V_q0),32));
    m_V_d1 <= std_logic_vector(unsigned(add_ln209_1_fu_667_p2) + unsigned(add_ln209_fu_662_p2));

    m_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_V_we0 <= ap_const_logic_1;
        else 
            m_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_V_we1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_V_we1 <= ap_const_logic_1;
        else 
            m_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_10_fu_934_p4 <= lhs_V_10_reg_342(31 downto 22);
    r_V_14_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_567_p4),32));
    r_V_15_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_636_p4),32));
    r_V_16_fu_782_p2 <= (lhs_V_reg_385 xor ap_const_lv32_FFFFFFFF);
    r_V_1_fu_567_p4 <= m_V_load_reg_1038(31 downto 10);
    r_V_2_fu_592_p4 <= m_V_q1(31 downto 7);
    r_V_3_fu_614_p4 <= m_V_q1(31 downto 18);
    r_V_4_fu_636_p4 <= m_V_q1(31 downto 3);
    r_V_5_fu_698_p4 <= lhs_V_reg_385(31 downto 6);
    r_V_6_fu_720_p4 <= lhs_V_reg_385(31 downto 11);
    r_V_7_fu_742_p4 <= lhs_V_reg_385(31 downto 25);
    r_V_8_fu_890_p4 <= lhs_V_10_reg_342(31 downto 2);
    r_V_9_fu_912_p4 <= lhs_V_10_reg_342(31 downto 13);
    r_V_fu_527_p4 <= m_V_load_reg_1038(31 downto 17);
    r_V_s_fu_547_p4 <= m_V_load_reg_1038(31 downto 19);
    ret_V_10_fu_656_p2 <= (xor_ln1357_2_fu_650_p2 xor ret_V_28_fu_606_p3);
    ret_V_11_fu_512_p2 <= std_logic_vector(signed(ap_const_lv6_30) + signed(trunc_ln215_1_reg_1017));
    ret_V_15_fu_770_p2 <= (xor_ln1357_4_fu_764_p2 xor ret_V_32_fu_756_p3);
    ret_V_18_fu_794_p2 <= (ret_V_34_fu_788_p2 xor ret_V_33_fu_776_p2);
    ret_V_22_fu_962_p2 <= (xor_ln1357_7_fu_956_p2 xor ret_V_37_fu_948_p3);
    ret_V_25_fu_836_p2 <= (ret_V_39_fu_830_p2 xor ret_V_38_fu_824_p2);
    ret_V_26_fu_539_p3 <= (trunc_ln1503_fu_536_p1 & r_V_fu_527_p4);
    ret_V_27_fu_559_p3 <= (trunc_ln1503_1_fu_556_p1 & r_V_s_fu_547_p4);
    ret_V_28_fu_606_p3 <= (trunc_ln1503_2_fu_602_p1 & r_V_2_fu_592_p4);
    ret_V_29_fu_628_p3 <= (trunc_ln1503_3_fu_624_p1 & r_V_3_fu_614_p4);
    ret_V_2_fu_480_p2 <= std_logic_vector(signed(ap_const_lv6_3E) + signed(trunc_ln215_1_fu_476_p1));
    ret_V_30_fu_712_p3 <= (trunc_ln1503_4_fu_708_p1 & r_V_5_fu_698_p4);
    ret_V_31_fu_734_p3 <= (trunc_ln1503_5_fu_730_p1 & r_V_6_fu_720_p4);
    ret_V_32_fu_756_p3 <= (trunc_ln1503_6_fu_752_p1 & r_V_7_fu_742_p4);
    ret_V_33_fu_776_p2 <= (rhs_V_reg_395 and lhs_V_reg_385);
    ret_V_34_fu_788_p2 <= (rhs_V_15_reg_406 and r_V_16_fu_782_p2);
    ret_V_35_fu_904_p3 <= (trunc_ln1503_7_fu_900_p1 & r_V_8_fu_890_p4);
    ret_V_36_fu_926_p3 <= (trunc_ln1503_8_fu_922_p1 & r_V_9_fu_912_p4);
    ret_V_37_fu_948_p3 <= (trunc_ln1503_9_fu_944_p1 & r_V_10_fu_934_p4);
    ret_V_38_fu_824_p2 <= (xor_ln1357_9_fu_818_p2 and lhs_V_10_reg_342);
    ret_V_39_fu_830_p2 <= (rhs_V_17_reg_363 and rhs_V_16_reg_352);
    ret_V_5_fu_586_p2 <= (xor_ln1357_fu_580_p2 xor ret_V_26_fu_539_p3);
    ret_V_6_fu_491_p2 <= std_logic_vector(signed(ap_const_lv6_39) + signed(trunc_ln215_1_fu_476_p1));
    ret_V_7_fu_502_p2 <= std_logic_vector(signed(ap_const_lv6_31) + signed(trunc_ln215_1_reg_1017));
    ret_V_fu_443_p2 <= (trunc_ln215_fu_439_p1 or ap_const_lv6_3);
    state_V_addr_1_reg_1033 <= ap_const_lv64_1(3 - 1 downto 0);
    state_V_addr_2_reg_1079 <= ap_const_lv64_2(3 - 1 downto 0);
    state_V_addr_3_reg_1084 <= ap_const_lv64_3(3 - 1 downto 0);
    state_V_addr_4_reg_1101 <= ap_const_lv64_4(3 - 1 downto 0);
    state_V_addr_5_reg_1106 <= ap_const_lv64_5(3 - 1 downto 0);
    state_V_addr_6_reg_1123 <= ap_const_lv64_6(3 - 1 downto 0);
    state_V_addr_7_reg_1128 <= ap_const_lv64_7(3 - 1 downto 0);

    state_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, state_V_addr_2_reg_1079, ap_CS_fsm_state8, state_V_addr_4_reg_1101, ap_CS_fsm_state9, state_V_addr_6_reg_1123, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_V_address0 <= state_V_addr_6_reg_1123;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_address0 <= state_V_addr_4_reg_1101;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_V_address0 <= state_V_addr_2_reg_1079;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            state_V_address0 <= "XXX";
        end if; 
    end process;


    state_V_address1_assign_proc : process(ap_CS_fsm_state4, state_V_addr_1_reg_1033, ap_CS_fsm_state7, state_V_addr_3_reg_1084, ap_CS_fsm_state8, state_V_addr_5_reg_1106, ap_CS_fsm_state9, state_V_addr_7_reg_1128, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_V_address1 <= state_V_addr_7_reg_1128;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_address1 <= state_V_addr_5_reg_1106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_V_address1 <= state_V_addr_3_reg_1084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_address1 <= state_V_addr_1_reg_1033;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_V_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            state_V_address1 <= "XXX";
        end if; 
    end process;


    state_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_V_ce0 <= ap_const_logic_1;
        else 
            state_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_V_ce1 <= ap_const_logic_1;
        else 
            state_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_d0_assign_proc : process(ap_CS_fsm_state11, add_ln700_5_reg_1173, add_ln700_7_reg_1178, add_ln700_9_reg_1188, add_ln700_3_fu_842_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_V_d0 <= add_ln700_9_reg_1188;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_d0 <= add_ln700_7_reg_1178;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_V_d0 <= add_ln700_5_reg_1173;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_d0 <= add_ln700_3_fu_842_p2;
        else 
            state_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_d1_assign_proc : process(ap_CS_fsm_state11, add_ln700_8_reg_1183, add_ln700_10_reg_1193, add_ln700_4_fu_848_p2, ap_CS_fsm_state13, add_ln700_6_fu_985_p2, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_V_d1 <= add_ln700_10_reg_1193;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_V_d1 <= add_ln700_8_reg_1183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_V_d1 <= add_ln700_6_fu_985_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_V_d1 <= add_ln700_4_fu_848_p2;
        else 
            state_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_V_we0_assign_proc : process(ap_CS_fsm_state11, icmp_ln887_1_fu_686_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln887_1_fu_686_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            state_V_we0 <= ap_const_logic_1;
        else 
            state_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_V_we1_assign_proc : process(ap_CS_fsm_state11, icmp_ln887_1_fu_686_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln887_1_fu_686_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            state_V_we1 <= ap_const_logic_1;
        else 
            state_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t1_V_fu_885_p2 <= std_logic_vector(unsigned(add_ln209_5_reg_1163) + unsigned(add_ln209_3_fu_879_p2));
    trunc_ln1503_1_fu_556_p1 <= m_V_load_reg_1038(19 - 1 downto 0);
    trunc_ln1503_2_fu_602_p1 <= m_V_q1(7 - 1 downto 0);
    trunc_ln1503_3_fu_624_p1 <= m_V_q1(18 - 1 downto 0);
    trunc_ln1503_4_fu_708_p1 <= lhs_V_reg_385(6 - 1 downto 0);
    trunc_ln1503_5_fu_730_p1 <= lhs_V_reg_385(11 - 1 downto 0);
    trunc_ln1503_6_fu_752_p1 <= lhs_V_reg_385(25 - 1 downto 0);
    trunc_ln1503_7_fu_900_p1 <= lhs_V_10_reg_342(2 - 1 downto 0);
    trunc_ln1503_8_fu_922_p1 <= lhs_V_10_reg_342(13 - 1 downto 0);
    trunc_ln1503_9_fu_944_p1 <= lhs_V_10_reg_342(22 - 1 downto 0);
    trunc_ln1503_fu_536_p1 <= m_V_load_reg_1038(17 - 1 downto 0);
    trunc_ln215_1_fu_476_p1 <= p_01115_1_reg_319(6 - 1 downto 0);
    trunc_ln215_fu_439_p1 <= p_0262_0_reg_296(6 - 1 downto 0);
    xor_ln1357_2_fu_650_p2 <= (ret_V_29_fu_628_p3 xor r_V_15_fu_646_p1);
    xor_ln1357_4_fu_764_p2 <= (ret_V_31_fu_734_p3 xor ret_V_30_fu_712_p3);
    xor_ln1357_7_fu_956_p2 <= (ret_V_36_fu_926_p3 xor ret_V_35_fu_904_p3);
    xor_ln1357_9_fu_818_p2 <= (rhs_V_17_reg_363 xor rhs_V_16_reg_352);
    xor_ln1357_fu_580_p2 <= (ret_V_27_fu_559_p3 xor r_V_14_fu_576_p1);
    zext_ln544_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_443_p2),64));
    zext_ln544_2_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01115_1_reg_319),64));
    zext_ln544_3_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_480_p2),64));
    zext_ln544_4_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_6_fu_491_p2),64));
    zext_ln544_5_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_7_fu_502_p2),64));
    zext_ln544_6_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01115_2_reg_331),64));
    zext_ln544_7_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_11_fu_512_p2),64));
    zext_ln544_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01115_0_reg_307),64));
end behav;
